microchip_startup = {
	set_variable = { country_microchip_production_var = 0 }
	set_variable = { country_composite_production_var = 0 }
	set_variable = { country_base_reducer_microchips_tracker_var = 0 }
	set_variable = { country_base_reducer_composites_tracker_var = 0 }
	add_dynamic_modifier = { modifier = advanced_production_modifier }
}

#this auto-adds composites for nations that need only one building. This needs more work for nations that start w/ multiples
composite_building_add = {
	ingame_update_setup = yes
	random_owned_controlled_state = {
		add_building_construction = {
			type = composite_plant
			level = 1
			instant_build = yes
		}
	}
	ingame_update_setup = yes
	if = { limit = { check_variable = { startup_composite_fac_needed > 0 } } composite_building_add_multi = yes }
}

composite_building_add_multi = {
	ingame_update_setup = yes
	while_loop_effect = {
		limit = {
			check_variable = { startup_composite_fac_needed > 0 }
		}
		random_owned_controlled_state = {
			add_building_construction = {
				type = composite_plant
				level = 1
				instant_build = yes
			}
		}
		add_to_variable = { startup_composite_fac_needed = -1 }
	}
	clear_variable = startup_composite_fac_needed
	ingame_update_setup = yes
}

#debug script for grabbing all resources. Not used in code, but used to get this number on game start
give_me_resources = {
	set_variable = { global.steel = 0 }
	set_variable = { global.aluminium = 0 }
	set_variable = { global.oil = 0 }
	set_variable = { global.tungsten = 0 }
	set_variable = { global.chromium = 0 }
	set_variable = { global.rubber = 0 }
	set_variable = { global.microchips = 0 }
	set_variable = { global.composites = 0 }

	for_each_scope_loop = {
		array = global.countries

		add_to_variable = { global.steel = resource_produced@steel }
		add_to_variable = { global.aluminium = resource_produced@aluminium }
		add_to_variable = { global.oil = resource_produced@oil }
		add_to_variable = { global.tungsten = resource_produced@tungsten }
		add_to_variable = { global.chromium = resource_produced@chromium }
		add_to_variable = { global.rubber = resource_produced@rubber }
		add_to_variable = { global.microchips = resource_produced@microchips }
		add_to_variable = { global.composites = resource_produced@composites }
	}

	log = "Steel Number: [?global.steel] Alum Number: [?global.aluminium] Oil Number: [?global.oil] Tech Metal Number: [?global.tungsten] Rare Metal Number: [?global.chromium] Rubber Number: [?global.rubber] Microchips Number: [?global.microchips] Composites Number: [?global.composites]"
}

#TODO: use the production modifier for microchips so that if you are starved of them, you can still do SOME production, even if the microchip production is 0
#Simulates the bare minimum production off repurposing / scraps that would occur, even if you don't have large level nationwide production
#Restrict this on the GNSS modifier; that should have no effect
microchip_update = {
	if = {
		limit = {
			NOT = {
				has_dynamic_modifier = { modifier = advanced_production_modifier }
			}
		}
		add_dynamic_modifier = { modifier = advanced_production_modifier }
	}

	#Gather total resources remaining
	set_temp_variable = { country_tech_remaining = resource@tungsten }
	set_temp_variable = { country_rare_remaining = resource@chromium }

	#Starting produced needs to be set manually, else math has a seizure. Math will never be perfect, because it ignores all the stacked modifiers
	#But I just don't care anymore, because I just want this to work, damnit
	set_temp_variable = { country_microchip_produced = microchip_plant_total }
	multiply_temp_variable = { country_microchip_produced = 16 }

	set_temp_variable = { total_base_reducer = country_microchip_produced }

	set_temp_variable = { prod_reducer = var_GNSS_civ_local_resources_factor }
	add_to_temp_variable = { prod_reducer = country_excavation_production_var }

	multiply_temp_variable = { total_base_reducer = prod_reducer }
	set_variable = { country_base_reducer_microchips_tracker_var = total_base_reducer }
	round_variable = country_base_reducer_microchips_tracker_var

	set_temp_variable = { country_microchip_reducer = 0 }

	#Gather overall production demand
	#Math is here. Unless you know the math, PLEASE do not mess with these variables
	set_temp_variable = { country_tech_demand = 2 }
	multiply_temp_variable = { country_tech_demand = country_microchip_produced }

	set_temp_variable = { country_rare_demand = 1 }
	set_temp_variable = { total_rare_needed = country_microchip_produced }

	#First, check if we even need to do all this. If there is a surplus of both tech and precious metals, there is no need to adjust production
	if = {
		limit = {
			OR = {
				check_variable = { country_tech_remaining < 0 }
				check_variable = { country_rare_remaining < 0 }
			}
		}
		#Invert the numbers here for a fast check. Surplus now can't be higher than demand, since it's negative
		#Deficit now is positive, and can be used easily in the cost math since it's positive
		multiply_temp_variable = { country_tech_remaining = -1 }
		multiply_temp_variable = { country_rare_remaining = -1 }

		if = {
			limit = {
				check_variable = { country_rare_remaining > 0 }
			}
			add_to_temp_variable = { country_microchip_reducer = country_rare_remaining }
		}
		if = {
			limit = {
				check_variable = { country_tech_remaining > 0 }
			}
			multiply_temp_variable = { country_tech_remaining = 1.25 }
			round_temp_variable = country_tech_remaining
			add_to_temp_variable = { country_microchip_reducer = country_tech_remaining }
		}
		set_variable = { country_microchip_production_var = country_microchip_reducer }
		set_temp_variable = { country_microchip_reducer_max = country_microchip_produced }
		multiply_temp_variable = { country_microchip_reducer_max = 0.95 }
		round_temp_variable = country_microchip_reducer_max
		clamp_variable = {
			var = country_microchip_production_var
			min = 0
			max = country_microchip_reducer_max
		}
	}else = {
		#There should be no reduction here, because we have a surplus of all inputs
		set_variable = { country_microchip_production_var = 0 }
	}
	#add the final base reduction values here, since production should always be reduced by this ammount
	add_to_variable = { country_microchip_production_var = total_base_reducer }
}

composite_update = {
	#Gather total resources remaining
	set_temp_variable = { country_alum_remaining = resource@aluminium }
	set_temp_variable = { country_rare_remaining = resource@chromium }
	set_temp_variable = { country_rubber_remaining = resource@rubber }
	set_temp_variable = { country_steel_remaining = resource@steel }

	set_temp_variable = { country_composite_produced = composite_plant_total }
	multiply_temp_variable = { country_composite_produced = 16 }

	set_temp_variable = { total_base_reducer = country_composite_produced }

	set_temp_variable = { prod_reducer = var_GNSS_civ_local_resources_factor }
	add_to_temp_variable = { prod_reducer = country_excavation_production_var }

	multiply_temp_variable = { total_base_reducer = prod_reducer }
	set_variable = { country_base_reducer_composites_tracker_var = total_base_reducer }
	round_variable = country_base_reducer_composites_tracker_var

	set_temp_variable = { country_composite_reducer = 0 }

	#Gather overall production demand
	#Math is here. Unless you know the math, PLEASE do not mess with these variables
	set_temp_variable = { country_alum_demand = 4 }
	multiply_temp_variable = { country_alum_demand = country_composite_produced }

	set_temp_variable = { country_rare_demand = 2 }
	set_temp_variable = { country_rare_demand = country_composite_produced }

	set_temp_variable = { country_rubber_demand = 2 }
	set_temp_variable = { country_rubber_demand = country_composite_produced }

	set_temp_variable = { country_steel_demand = 2 }
	set_temp_variable = { country_steel_demand = country_composite_produced }

	#First, check if we even need to do all this. If there is a surplus of both tech and precious metals, there is no need to adjust production
	if = {
		limit = {
			OR = {
				check_variable = { country_alum_remaining < 0 }
				check_variable = { country_rare_remaining < 0 }
				check_variable = { country_rubber_remaining < 0 }
				check_variable = { country_steel_remaining < 0 }
			}
		}
		#Invert the numbers here for a fast check. Surplus now can't be higher than demand, since it's negative
		#Deficit now is positive, and can be used easily in the cost math since it's positive
		multiply_temp_variable = { country_alum_remaining = -1 }
		multiply_temp_variable = { country_rare_remaining = -1 }
		multiply_temp_variable = { country_rubber_remaining = -1 }
		multiply_temp_variable = { country_steel_remaining = -1 }

		if = {
			limit = {
				check_variable = { country_rare_remaining > 0 }
			}
			add_to_temp_variable = { country_composite_reducer = country_rare_remaining }
		}
		if = {
			limit = {
				check_variable = { country_alum_remaining > 0 }
			}
			multiply_temp_variable = { country_alum_remaining = 1.5 }
			round_temp_variable = country_alum_remaining
			add_to_temp_variable = { country_composite_reducer = country_alum_remaining }
		}
		if = {
			limit = {
				check_variable = { country_rubber_remaining > 0 }
			}
			add_to_temp_variable = { country_composite_reducer = country_rubber_remaining }
		}
		if = {
			limit = {
				check_variable = { country_steel_remaining > 0 }
			}
			add_to_temp_variable = { country_composite_reducer = country_steel_remaining }
		}
		set_variable = { country_composite_production_var = country_composite_reducer }
		set_temp_variable = { country_composite_reducer_max = country_composite_produced }
		multiply_temp_variable = { country_composite_reducer_max = 0.95 }
		round_temp_variable = country_composite_reducer_max
		#Clamp the max at -90% of production, this number can be adjusted
		clamp_variable = {
			var = country_composite_production_var
			min = 0
			max = country_composite_reducer_max
		}
	}else = {
		#There should be no reduction here, because we have a surplus of all inputs
		set_variable = { country_composite_production_var = 0 }
	}
	#add the final base reduction values here, since production should always be reduced by this amount
	add_to_variable = { country_composite_production_var = total_base_reducer }
}