#written by PokemonUnited26, aka Mari

#Al Qaeda in Yemen
	#Counter Terrorism is used in each state to determine the severity, size, and frequency of Al Qaeda and Al Qaeda attacks
	#Al Qaeda size, strength, and severity are determined by government response and focuses, and determines the severity of the state and country modifiers and strength of Al Qaeda during uprisings
	update_alqaeda_strength = {
		set_variable = { alqaeda_strength = aden_strength }
		#add_to_variable = { alqaeda_strength = shabwa_strength }
		#if = {
		#	limit = {
		#		952 = {
		#			has_dynamic_modifier = YEM_alqaeda_in_marib
		#		}
		#	}
		#	add_to_variable = { alqaeda_strength = marib_strength }
		#}
		#if = {
		#	limit = {
		#		199 = {
		#			has_dynamic_modifier = YEM_alqaeda_in_hadramawt
		#		}
		#	}
		#	add_to_variable = { alqaeda_strength = hadramawt_strength }
		#}
		#divide_variable = { alqaeda_strength = 4 }
		set_variable = { alqaeda_strength_stab_var = alqaeda_strength }
		multiply_variable = { alqaeda_strength_stab_var = -0.1 }
		#set_variable = { mafia_strength_construction_var = alqaeda_strength }
		#multiply_variable = { mafia_strength_construction_var = -0.5 }
		#set_variable = { mafia_strength_pp_var = alqaeda_strength }
		#multiply_variable = { mafia_strength_pp_var = -0.5 }
		#set_variable = { mafia_strength_lega_drift_var = alqaeda_strength }
		#multiply_variable = { mafia_strength_lega_drift_var = 0.1 }
		#set_variable = { mafia_strength_ai_factor_var = 1 }
		#subtract_from_variable = { mafia_strength_ai_factor_var = alqaeda_strength }
		#multiply_variable = { mafia_strength_ai_factor_var = mafia_strength_ai_factor_var }
	}
	#Aden
	#Aden Terrorist events
		if = {
			limit = {
				198 = {
					has_dynamic_modifier = {  modifier = YEM_alqaeda_in_aden_-2 }
				}
			}
			subtract_from_variable = { aden_strength = 0.04 }
		}
		if = {
			limit = {
				198 = {
					has_dynamic_modifier = {  modifier = YEM_alqaeda_in_aden_-1 }
				}
			}
			subtract_from_variable = { aden_strength = 0.02 }
		}
		if = {
			limit = {
				198 = {
					has_dynamic_modifier = {  modifier = YEM_alqaeda_in_aden }
				}
			}
			random_list = {
				70 = {
				}
				30 = {
					YEM = {
						country_event = YEM_AQY.1
					}
				}
			}
		}
		if = {
			limit = {
				198 = {
					has_dynamic_modifier = {  modifier = YEM_alqaeda_in_aden_1 }
				}
			}
			add_to_variable = { aden_strength = 0.02 }
		}
		if = {
			limit = {
				198 = {
					has_dynamic_modifier = {  modifier = YEM_alqaeda_in_aden_2 }
				}
			}
			add_to_variable = { aden_strength = 0.04 }
		}
		
#Yemeni Crisis Influence

# The init influence acts as a reset to get an influence array prepared for additions
init_sadah_influence = {
	clear_array = sadah_influence_val
	clear_array = sadah_influence
}

# Startup Influence:
# The function is triggered only in the history. It sorts the starting influence arrays.
# Everything else is fired in the on_startup.
startup_influence = {
	sort_influence = yes
}

Sadah_math_variables = {
	log = "[GetDateText]: [ROOT.GetName]: Running Effect: Sadah_math_variables"
	
	set_variable = { yem_sadah_influence = sadah_influence_val^0 }
	divide_variable = { yem_sadah_influence = 4 }
	set_variable = { sau_sadah_influence = sadah_influence_val^1 }
	divide_variable = { sau_sadah_influence = 4 }
	set_variable = { uae_sadah_influence = sadah_influence_val^2 }
	divide_variable = { uae_sadah_influence = 4 }
	set_variable = { per_sadah_influence = sadah_influence_val^3 }
	divide_variable = { per_sadah_influence = 4 }
}
init_state_variables = {    
    951 = {
        set_variable = { yem_sadah_influence = 79 }
        set_variable = { sau_sadah_influence = 14 }
        set_variable = { uae_sadah_influence = 11 }
        set_variable = { per_sadah_influence = 0 }
    }
    195 = {
        set_variable = { yem_sadah_influence = 80 }
        set_variable = { sau_sadah_influence = 10 }
        set_variable = { uae_sadah_influence = 5 }
        set_variable = { per_sadah_influence = 5 }
    }
    #...
}

update_state_values_yemen = {
    custom_effect_tooltip = change_me_yemen_values
    add_to_variable = { sadah_influence^index = value }

    resize_temp_array = { array = sadah_influence_temp size = sadah_influence^num }

    set_temp_variable = { sadah_influence_total = 0 }
    for_each_loop = {
        array = sadah_influence_temp
        add_to_temp_variable = { sadah_influence_total = v }
    }

    set_temp_variable = { sadah_influence_scalar = 100 }
    divide_temp_variable = { sadah_influence_scalar = sadah_influence_total }
    for_each_loop = {
        array = sadah_influence
        value = v
        index = i
        multiply_variable = { sadah_influence^i = sadah_influence_scalar }
        clamp_variable = { var = sadah_influence^i max = 100 min = 0 }
    }

    if = { limit = { NOT = { check_variable = { sadah_influence_total = 100 } } }
        set_temp_variable = { difference = 100 }
        subtract_from_temp_variable = { difference = sadah_influence_total }
        find_highest_in_array = {
            array = sadah_influence
            value = max
            index = max_index
        }
        add_to_variable = { sadah_influence^max_index = difference }
    }
}