############################################################################################################
#	AC mod - on actions
############################################################################################################

on_actions = {

	on_weekly = {
		effect = {

			### cancel invalid projects

			if = { limit = { check_variable = { active_projects > 0 } }

				for_each_loop = { array = project_array

					if = { limit = { check_variable = { v < 0 } }

						set_variable = { project_type = i }

						if = {
							limit = {
								OR = {
									is_owned_and_controlled_by = ROOT
									CONTROLLER = { has_war_with = ROOT } # target state controller at war with project owner
									CONTROLLER = { is_justifying_wargoal_against = ROOT }
									ROOT = { is_justifying_wargoal_against = CONTROLLER }
									var:v = { NOT = { investment_building_slot_available = yes } } # building slot unavailable in target state
								}
							}

							set_variable = { project = i }
							log = "AC - [GetDate] [This.GetTag] - on_daily - deleted invalid project [?project] in [?project_array^project] [?project_array^project.GetName]"
							end_project = yes
						}
					}
				}

				clear_variable = project_type
			}
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {
			FROM.FROM = {

				if = { limit = { check_variable = { projects_in_state^num > 0 } }

					for_each_scope_loop = {
						array = projects_in_state


						### update project target country

						meta_effect = { # remove target decision from old controller
							text = { var:project_target_country^PREV.project_target_state_@THIS = { remove_targeted_decision = { target = PREV decision = project_[x]_target_decision } } }
							x = "[?PREV.project_target_state_@THIS]"
						}

						set_variable = { project_target_country^PREV.project_target_state_@THIS = ROOT.id }
					}
				}
			}
		}
	}

	on_annex = { #ROOT is winner #FROM gets annexed - For civil wars on_civil_war_end is also fired
		effect = {
			FROM = {
				# projects
				# remove all projects by the annexed country
				if = { limit = { check_variable = { active_projects > 0 } }

					for_each_loop = {
						array = project_array

						if = { limit = { check_variable = { v < 0 } }

							set_variable = { project = i }
							end_project = yes
						}
					}
				}
			}
		}
	}
}