# monthly on_action by Yard1
on_actions = {
	on_startup = { # on_daily is executed before on_startup
		effect = {
			add_to_variable = { global.next_month = 1 }
		}
	}
	on_daily = {
		effect = {
			if = {
				# don't touch!
				limit = {
					NOT = {
						has_global_flag = on_monthly_done
					}
					meta_trigger = {
						text = {
							date > [YEAR].[MONTH].1
						}
						YEAR = "[?global.year]"
						MONTH = "[?global.next_month]"
					}
				}
				add_to_variable = { global.month = 1 }
				add_to_variable = { global.next_month = 1 }
				set_global_flag = { flag = on_monthly_done value = 1 days = 27 }
				if = {
					limit = { check_variable = { global.month > 12 } }
					set_variable = { global.month = 1 }
				}
				if = {
					limit = { check_variable = { global.next_month > 12 } }
					set_variable = { global.next_month = 1 }

					set_global_flag = { flag = on_monthly_done value = 1 days = 31 }
				}
				# this is done only ONCE per month, even though on_daily fires for every country
				# will also be done on startup

				# your code here
				country_event = { id = low_stability.1 }
				set_power_ranking_ideas_for_every_country = yes

				#killrabbit stuff
				every_country = {
					recalculate_party = yes
				}
			}
			if = {
				limit = { NOT = { has_country_flag = has_done_intro_startup } }
				ingame_update_setup = yes
				set_country_flag = has_done_intro_startup
			}
			# Cancel Invalid Projects
		}
	}

	on_weekly = {
		effect = {
			#Update money system right before adjusting weekly value
			ingame_update_setup = yes
			#Remove weekly rate from treasury
			add_to_variable = { treasury = treasury_rate }
			#Automated taking debt - has calculate_interest_rate at the end
			automated_debt_taker = yes

			# Force Update Influencer Map Mode
			recalculate_influence = yes
			force_update_map_mode = { mapmode = influence_map_mode }

			# Cancel Invalid Projects
			if = { limit = { check_variable = { active_projects > 0 } }
				# Project loop.
				for_each_loop = { array = project_array

					if = { limit = { check_variable = { v < 0 } }

						set_variable = { project_type = i }

						if = {
							limit = {
								OR = {
									CONTROLLER = { has_war_with = ROOT } # target state controller at war with project owner
									var:v = { NOT = { investment_building_slot_available = yes } } # building slot unavailable in target state
								}
							}

							set_variable = { project = i }
							log = "AC Project Deletion - [GetDate] [This.GetTag] - on_weekly - deleted invalid project [?project] in [?project_array^project] [?project_array^project.GetName] [?project_array^project.GetName]"
							end_project = yes
						}
					}
				}

				clear_variable = project_type
			}
			# If child soldier thing
			if = { limit = { has_idea = child_soldiers }
				add_to_variable = { child_soldiers = child_soldiers_recruitment }
			}
		}
	}
}
