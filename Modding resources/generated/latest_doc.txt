== TRIGGER DOCUMENTATION ==
state - check state id
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM CAPITAL

if - if_, CIfTrigger, A conditional trigger
if = { limit = { <triggers> } <trigger> }
Supported scopes: ???

Supported targets:

is_mio_visible - "Checks if the visible trigger in the Military Industrial Organisation in scope returns true.
ex:
mio:my_mio = {
	is_mio_visible = yes
	is_mio_visible = no
}"
Supported scopes: MIO

Supported targets:

is_mio_available - "Checks if the available AND visible triggers in the Military Industrial Organisation in scope return true.
ex:
mio:my_mio = {
	is_mio_available = yes
	is_mio_available = no
}"
Supported scopes: MIO

Supported targets:

can_build_railway - Checks if a railway can be built according to specifications. Example:
can_build_railway = {
  build_only_on_allied = yes # No by default. If yes and the effect scope is country, it will only build on allied territories for the country

  # You can specify a weight function that will be used in pathing. The scope will be the controller of the province it is trying to path to.
  # A negative value will make it not to path to that controller.
  # Non-negative values will be used as a path cost for that province.
  controller_priority = {
    base = 1

    modifier = {
      tag = MAN
      add = 2
    }
  }

  # The following options are used for picking a path. You can specify multiple options and it will pick in following order:
  fallback = yes # Default no. If yes, each option will try to fallback to next one.
  # option 1: List of provinces to draw railways. If fallback = yes uses start and end provinces of the path as fallback in option 2.
  path = { 10 20 30 40 }
  # option 2: Specify start & end province IDs. It will pick the shortest path. If provinces are not valid and if fallback = yes it will use states of those provs and use in option 3.
  start_province = 42
  target_province = 84
  # option 3: Specify start & end state IDs. It will pick provinces with the best node (capital > nodes > naval )
  start_state = 50
  target_state = 100
}

Supported scopes: ???

Supported targets: ???

num_of_supply_nodes - check amount of supply nodes
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

date - checks for a specific date
Supported scopes: ???

Supported targets:

skill - compare leader skill levels
Supported scopes: combatant character

Supported targets:

any_subject_country - check if any subject country meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_subject_countries - check if all subject countries meet the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_railway_level - Checks if a state contains a railway at or above the specified level. Example:
has_railway_level = {
  level = 3
  state = 1234
}

Supported scopes: ???

Supported targets: ???

phase - check if we are in this combat phase
Supported scopes: combatant

Supported targets:

has_railway_connection - Checks for an existing rail connection. Uses same params as can_build_railway. Example:
has_railway_connection = {
  build_only_on_allied = yes # No by default. If yes and the effect scope is country, it will only build on allied territories for the country

  # The following options are used for picking a path. You can specify multiple options and it will pick in following order:
  fallback = yes # Default no. If yes, each option will try to fallback to next one.
  # option 1: List of provinces to draw railways. If fallback = yes uses start and end provinces of the path as fallback in option 2.
  path = { 10 20 30 40 }
  # option 2: Specify start & end province IDs. It will pick the shortest path. If provinces are not valid and if fallback = yes it will use states of those provs and use in option 3.
  start_province = 42
  target_province = 84
  # option 3: Specify start & end state IDs. It will pick provinces with the best node (capital > nodes > naval )
  start_state = 50
  target_state = 100
}


Supported scopes: ???

Supported targets: ???

num_of_controlled_factories - check the number of factories in controlled states excluding any gained or lost through trade, relations, modifiers etc.
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_of_owned_factories - check the number of factories in owned states excluding any gained or lost through trade, relations, modifiers etc.
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

and - all inside trigger must be true
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

or - at least one entry inside trigger must be true
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

not - negates content of trigger
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

exists - Check if the current country exist. The country of the scope you are in. Example: DEN = { exists = yes }
Supported scopes: country

Supported targets:

difficulty - check if the difficulty is above or below specified value 0-2 (difficulty enum). Example: difficulty > 0 (above easy)
Supported scopes: ???

Supported targets:

log - Print message to game.log - Can be localized
Supported scopes: ???

Supported targets:

any_neighbor_country - check if any neighbor country meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_country_flag - has country flag been set.Check flag val date set and days since set.
Example: has_country_flag = test_flag
has_country_flag = {
	flag = <name> (mandatory)
	value < <int> (optional)
	date > <date> (optional)
	days > <int> (optional)
}
Supported scopes: country

Supported targets: ???

reserves - check amount of reserves
Supported scopes: combatant

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

tag - country tag trigger
Supported scopes: country combatant

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

any_country - check if any country meets the trigger
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

check_variable - "Compares a variable to a number or another variable
ex:
check_variable = {
	var = varname
	value = 12	# accepts variables
	compare = equals
	# possible values for compare :
	# less_than, less_than_or_equals
	# greater_than, greater_than_or_equals
	# equals, not_equals
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and/or RIGHT tokens in it
}
# some shorter versions :
check_variable = { varname = 0 }
check_variable = { varname > 12 }
check_variable = { varname < 42 }
check_variable = { varname > another_varname }
"
Supported scopes: ???

Supported targets: ???

region - check state's strategic area id
Supported scopes: state

Supported targets: none

is_subject - Checks if the country is subject of any other country
Supported scopes: country

Supported targets: ???

area - check state's strategic area id
Supported scopes: state

Supported targets: none

has_war_with_major - is country at war with a major
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

threat - check the global threat value (world tension). 0-1 value
Supported scopes: ???

Supported targets:

always - always returns specified value
Supported scopes: ???

Supported targets: ???

is_capital - Is scope state a capital. 169 = { is_capital = yes }
Supported scopes: state

Supported targets: none

has_global_flag - has global flag been set.Check flag val date set and days since set.
Example: has_global_flag = test_flag
has_global_flag = {
	flag = <name> (mandatory)
	value < <int> (optional)
	date > <date> (optional)
	days > <int> (optional)
}
Supported scopes: ???

Supported targets: ???

impassable - checks if a state is impassable
Supported scopes: state

Supported targets: ??? none

is_attacker - check if attacker side in combat
Supported scopes: combatant

Supported targets:

has_dlc - Checks if player has a DLC.
Example: has_dlc = "name of the dlc"
Supported scopes: ???

Supported targets:

hidden_trigger - a hidden trigger, anything in it not shown in tooltips
Supported scopes: state country combatant character MIO

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_female - checks if scoped unit leader, ace or country is female
Supported scopes: country character

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_idea - check if country has idea
Supported scopes: country

Supported targets:

any_enemy_country - check if any enemy country meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_neighbor_of - check if neighbor ( controlled territory ) with specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_opinion - check what opinion the country has towards a specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_opinion_modifier - check if a country has the opinion modifier
Supported scopes: country

Supported targets:

is_subject_of - Checks if the country is subject of specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_neighbor_country - check if all neighbor countries meet the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_country - check if all countries meets the trigger. tooltip=key can be defined to override title
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_enemy_country - check if all enemy countries meet the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

night - check if combat is at night
Supported scopes: combatant

Supported targets:

dig_in - check if we have digin level (lowest)
Supported scopes: combatant

Supported targets:

temperature - check combat province temperature
Supported scopes: combatant

Supported targets:

any_state_division - check if any division meets the trigger. tooltip=key can be defined to override title
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

armor - Check that average armor level of combatant is over a certain level
Supported scopes: combatant

Supported targets:

unit_strength - Check scope unit strength status 0-1: Example unit_strength < 1
Supported scopes:

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

unit_organization - Check scope unit organization status 0-1: Example unit_organization < 1
Supported scopes:

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

division_has_majority_template - checks if division template has majority of subunit type.
Supported scopes:

Supported targets:

any_country_division - check if any division meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_unit_template_reserves - returns true if this unit's template has the reserves priority
Supported scopes:

Supported targets: ???

has_war - is country at war
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_controlled_by - check if state is controlled by
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_owned_by - check if state is owned by
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_embargoed_by - check if embargoed by specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_embargoing - check if country is embargoing specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

skill_advantage - compare leader skill levels
Supported scopes: combatant

Supported targets:

owns_state - check owner for state(s)
Supported scopes: country

Supported targets: THIS ROOT PREV FROM CAPITAL

controls_state - check controller for state(s)
Supported scopes: country

Supported targets: THIS ROOT PREV FROM CAPITAL

has_government - does country government (ruling party) belong to ideology group
Supported scopes: country

Supported targets:

has_state_flag - has state flag been setCheck flag val date set and days since set.
Example: has_state_flag = test_flag
has_state_flag = {
	flag = <name> (mandatory)
	value < <int> (optional)
	date > <date> (optional)
	days > <int> (optional)
}
Supported scopes: state

Supported targets: ??? none

any_country_with_core - check if any country with a core on the scoped state meets the trigger. tooltip=key can be defined to override title
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_resources_in_country - checks for amount of resources in country (the balance by default)
Example:
has_resources_in_country = {
	resource = chromium
	amount > 10
	extracted = no # (optional, default: no) checks extracted amount instead of country balance
	buildings = no # (optional, default: no) checks only amount from local buildings instead of country balance
Supported scopes: country

Supported targets:

pc_is_state_claimed - Check if state is claimed (and uncontested) in conferenceExample:
pc_is_state_claimed = yes/no
Supported scopes: state

Supported targets: none

division_has_battalion_in_template - checks if division template has the subunit type.
Supported scopes:

Supported targets:

has_war_with - is countries at war
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_resources_rights - Checks for resources rights in state.Warning! this always returns false if the state has no resource.
Example:
has_resources_rights = {
	state = 60 # optional - can be used in state scope instead
	receiver = GER # optional - can be used in country scope instead
	resources = {steel oil} # optional - if not provided checks all resources.
Supported scopes: state country

Supported targets: none

divisions_in_state - checks for amount of divisions in specified state owned by current country.
divisions_in_state = {
  state = state_id
  size > 42
  type = unit type eg. infantry, armor (optional)
  unit = specific unit eg. mountaineers, light_tank (optional)
}
Supported scopes: country

Supported targets:

country_exists - check if the specified country exist
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

ships_in_area - checks for amount of ships in specified area
Supported scopes: country

Supported targets:

has_army_size - checks for amount of divisions, additionally of a specified type
Supported scopes: country

Supported targets:

has_navy_size - Checks for amount of ships, additionally of a specified type, archetype, or sub unit definition.

Examples:
	has_navy_size = { size > 10 type = convoy } # Must have more than 10 convoys.
	has_navy_size = { size < 1 archetype = ship_hull_light } # Must not have any ships with light hulls.
	has_navy_size = { size > 39 unit = heavy_cruiser } # Must have 40 or more heavy cruisers.
	has_navy_size = { size < 100 } # Must have fewer than 100 ships of any type.
Supported scopes: country

Supported targets:

num_of_military_factories - check amount of military factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_of_civilian_factories - check amount of civilian factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_of_naval_factories - check amount of naval factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_of_nukes - check amount of nukes
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_manpower - check amount of manpower
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_political_power - check amount of political power
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_of_available_military_factories - check amount of available military factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_of_available_naval_factories - check amount of available naval factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_of_available_civilian_factories - check amount of available civilian factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_in_faction_with - check if member of same faction as specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_in_faction - check if member of any faction
Supported scopes: country

Supported targets:

is_faction_leader - check if country leads a faction
Supported scopes: country

Supported targets:

is_guaranteed_by - check if guaranteed by specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_guaranteed - check if country has guaranteed specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_military_access_to - check country has military access to specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

gives_military_access_to - check if country gives military access to specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

any_state - check if any state meets the trigger. tooltip=key can be defined to override title
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

any_owned_state - check if any owned state meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

any_neighbor_state - check if any neighbor state meets the trigger. tooltip=key can be defined to override title
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

any_allied_country - Check if any allied country meets the trigger. Does not include the country itself. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_state - check if all states meets the trigger. tooltip=key can be defined to override title
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_owned_state - check if all owned states meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_neighbor_state - check if all neighbor states meets the trigger. tooltip=key can be defined to override title
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_allied_country - Check if all allied countries meet the trigger. Does not include the country itself. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

surrender_progress - check if a country is close to surrendering
Supported scopes: country

Supported targets:

political_power_daily - Checks if daily political power increase is more or less that specified value
 political_power_daily > 1.5
Supported scopes: country

Supported targets:

has_bombing_war_support - check value of bombing malus to war support 0-1: Example has_bombing_war_support < 0.1
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_casualties_war_support - check value of casualties malus to war support 0-1: Example has_casualties_war_support < 0.1
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_convoys_war_support - check value of convoys sunk malus to war support 0-1: Example has_convoys_war_support < 0.1
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

resistance - Compares the current resistance level of a state to a value. Example: resistance > 50
Supported scopes: state

Supported targets: ??? none

ic_ratio - Compares the ratio of total industrial capacity between the scope country and the one set with 'tag'
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

any_war_score - compares the warscore of all wars in a country to see if any fullfills the comparison condition 0-100 - Example: any_war_score > 40
Supported scopes: country

Supported targets:

has_idea_with_trait - check if country has idea with specified trait
Supported scopes: country

Supported targets:

has_deployed_air_force_size - checks for amount of aircrafts, additionally of a specified type
Supported scopes: country

Supported targets:

is_fighting_in_terrain - check what terrain is in combat
Supported scopes: combatant

Supported targets:

is_defender - check if defender side in combat
Supported scopes: combatant

Supported targets:

has_combat_modifier - check if combatant has modifier
Supported scopes: combatant

Supported targets:

is_winning - check if defender side in combat
Supported scopes: combatant

Supported targets:

fastest_unit - check if fastest unit of combatant is over this limit
Supported scopes: combatant

Supported targets:

recon_advantage - checks if side has an advantage in recon level
Supported scopes: combatant

Supported targets:

has_tech - check if country has technology
Supported scopes: country

Supported targets:

land_doctrine_level - checks researched land doctrine level
Supported scopes: country

Supported targets:

is_ironman - Check if current game is ironman.
Supported scopes: ???

Supported targets:

has_start_date - Compare the initial start date of current game.
Supported scopes: ???

Supported targets:

has_built - checks country has built a set number (at least) of a certain type of building since taking goal
has_built = {
  type = building_type
  value = 42
}
Supported scopes: country

Supported targets:

has_available_idea_with_traits - Checks if country has available ideas with specific traits more than limit. Example:
has_available_idea_with_traits = {
	idea = head_of_intelligence # trait names. can be a list of traits in { }
	limit = 1
	characters = yes/no - only runs this trigger on characters
	ignore = generic_head_of_intelligence # if specified, these ideas will be ignored. can be a list of ideas in { }
}

Supported scopes: country

Supported targets:

is_claimed_by - Checks if state is claimed by country
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_core_of - Checks if state is core of country
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_ai - Checks if country is AI controlled.
Supported scopes: country

Supported targets:

has_trait - check if sides leader has trait
Supported scopes: combatant character

Supported targets:

has_reserves - check if side has reserves waiting
Supported scopes: combatant

Supported targets:

frontage_full - check if sides front is full or can get more reinforcements
Supported scopes: combatant

Supported targets:

is_lend_leasing - is lend-leasing country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

free_building_slots - checks building for available construction levels
free_building_slots = {
	building = building_type
	size > 5
	include_locked = yes
	province = 42 #will check province buildings if specified
}
Supported scopes: state

Supported targets: none

is_demilitarized_zone - checks if a state is a demilitarized zone
Supported scopes: state

Supported targets: ??? none

is_border_conflict - checks if a state is in border conflict
Supported scopes: state

Supported targets: ??? none

has_completed_focus - has country completed focus
Supported scopes: country

Supported targets:

has_offensive_war_with - One country has offensive war against other country.
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_defensive_war_with - One country has defensive war against other country.
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_offensive_war - is country at offensive war
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_defensive_war - is country at defensive war
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_coastal - check if state is coastal
Supported scopes: state

Supported targets: none

casualties - Check the amount of casualties a country has suffered in all of it's wars
Supported scopes: country

Supported targets:

custom_trigger_tooltip - Works as an and-trigger with a custom tooltip. will check if KEY_NOT first if it is inside NOT = { }
Supported scopes: ???

Supported targets:

has_equipment - checks for amount of equipment stored
Supported scopes: country

Supported targets:

num_of_factories - Check amount of available factories (excluding temporary sources like trade and lend-lease)
Example:
GER = { num_of_factories < 50 }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

focus_progress - checks focus progress example:
 focus_progress = { focus = id progress > 0.5 }
Supported scopes: country

Supported targets:

is_puppet - Checks if the country is puppet of any other country
Supported scopes: country

Supported targets: ???

is_puppet_of - Checks if the country is puppet of specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

ships_in_state_ports - checks for amount of ships in specified state's ports.
ships_in_state_ports = {
  type = ship_category
  state = state_id (or scopped variable)
  size = 42
}
Supported scopes: country

Supported targets:

is_major - check if country is a major
Supported scopes: country

Supported targets:

is_on_continent - is state located on continent
Supported scopes: state

Supported targets: none

is_amphibious_invasion - check if combat is at night
Supported scopes: combatant

Supported targets:

strength_ratio - Compares the estimated army strength between the scope country and the one set with 'tag'
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_max_planning - check if side has maximal planning bonus
Supported scopes: combatant

Supported targets:

has_civil_war - check if participant in civil war as revolter or target
Supported scopes: country

Supported targets:

less_combat_width_than_opponent - check if side has more combat width than their opponent
Supported scopes: combatant

Supported targets:

is_fighting_air_units - check if side is fighting air units
Supported scopes: combatant

Supported targets:

has_carrier_airwings_on_mission - check if side has a career with air wings on a mission
Supported scopes: combatant

Supported targets:

has_flanked_opponent - check if side has flanked their opponent
Supported scopes: combatant

Supported targets:

any_claim - check if there is a claim between a country and all others
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_volunteers_amount_from - Compares number of volunteers from the country. Example: has_volunteers_amount_from = { tag = ITA count > 1 }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_of_controlled_states - check amount of controlled stats
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

original_tag - original tag is ( for civil wars checks )
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_added_tension_amount - Compare if the country has added above or below the specified ammount of tension
Supported scopes: country

Supported targets:

has_manpower_for_recruit_change_to - check if manpower is enough to switch recruitment laws not to be negative
Supported scopes: country

Supported targets:

ai_liberate_desire - check what liberation desire the country has towards a specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

distance_to - check distance between two states
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

can_research - check if country can research technology
Supported scopes: country

Supported targets:

has_annex_war_goal - Checks a country has annex war goal on another country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

hardness - check lowest/highest hardness level on combatant
Supported scopes: combatant

Supported targets:

has_template_containing_unit - check if country has a division template that contains a specific unit
Supported scopes: country

Supported targets:

is_in_home_area - Checks if the first province in the state is connected to the capital of its owner
Supported scopes: state

Supported targets: ??? none

state_population - check the population in the state
Supported scopes: state

Supported targets: none

ai_irrationality - check the ai irrationality value
Supported scopes: country

Supported targets:

has_war_together_with - Are the countries fighting on the same side of a war
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_capitulated - checks if the country has capitulated
Supported scopes: country

Supported targets:

has_army_manpower - checks for amount of manpower of selected type, additionally of a specified type
Supported scopes: country

Supported targets:

is_owned_and_controlled_by - check if state is owned by
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_tutorial - check if the tutorial is active
Supported scopes: ???

Supported targets:

is_historical_focus_on - check if the historical focus is active
Supported scopes: ???

Supported targets:

original_research_slots - check number of research slots at start of game
Supported scopes: country

Supported targets:

has_wargoal_against - Checks if country has a wargoal against the target.
Example 1:
ENG = { has_wargoal_against = GER }
Example 2:
ENG = {
  has_wargoal_against = {
    target = GER
    type = take_state  # (optional: if not specified any wargoal will do)
  }
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_justifying_wargoal_against - Checks if country is justifying a wargoal against the target.
Example: ENG = { is_justifying_wargoal_against = GER }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_owner_neighbor_of - check if neighbor ( owned territory ) with specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

ai_wants_divisions - Will compare towards the amount of divisions an ai wants to have.
Supported scopes: country

Supported targets:

num_owned_neighbour_states - Checks if a country owns the amount of states neighbouring the scoped state
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_island_state - "return true if the state is composed exclusively of one-province-islands.
More precisly, all provinces in the state have no land neighbor.
Or if they do they are connected by a strait.
(cf. is_one_state_island for checking if the state itself is an island)
ex: 145 = {
	is_island_state = yes
	is_island_state = no
}"
Supported scopes: state

Supported targets: ??? none

has_elections - Checks the country's politics on allowing elections. has_elections = yes
Supported scopes: country

Supported targets: ???

alliance_strength_ratio - Compares the estimated army strength between the scope country, his allies and his enemies.
Supported scopes: country

Supported targets:

civilwar_target - civilwar target is ( for civil wars checks )
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_in_peace_conference - Checks if the country is currently in a peaceconference
Supported scopes: country

Supported targets:

has_unit_leader - check if country has unit leader with specified ID. Don't localize this. Tooltip only for debug.
Supported scopes: country

Supported targets:

any_home_area_neighbor_country - check if any neighbor country in the home area meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets:

any_other_country - check if any other country meets the trigger. Excludes current country. tooltip=key can be defined to override title
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_other_country - check if all other countries meets the trigger. Excludes current country. tooltip=key can be defined to override title
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_non_aggression_pact_with - Check if country has non aggression pact with the specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_faction_members - Compares the number of members in the faction for the current country.
 Example: num_faction_members > 10
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

enemies_strength_ratio - Compares the estimated army strength between the scope country and all its enemies
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_custom_difficulty_setting - Returns true if the game has the specified custom difficulty on:
Example: has_custom_difficulty_setting = TheAxisIndustry
Supported scopes: ???

Supported targets: ???

has_any_custom_difficulty_setting - Returns true if the game has any custom difficulty on
Supported scopes: ???

Supported targets: ???

has_country_custom_difficulty_setting - Returns true if the game has any custom difficulty on the scope nation
Supported scopes: country

Supported targets: ???

is_researching_technology - Checks if the country is currently researching a specific technology.
Example: is_researching_technology = mechanised_infantry
Supported scopes: country

Supported targets:

is_in_tech_sharing_group - Checks if country is member specified technology sharing group.
Example: is_in_technology_sharing_group = commonwealth_research
Supported scopes: country

Supported targets:

has_autonomy_state - check if country currently has an autonomy state, example:
has_autonomy_state = puppet
Supported scopes: country

Supported targets:

compare_autonomy_progress_ratio - check if autonomy progress ratio is higher than value, example:
compare_autonomy_progress_ratio > 0.5
Supported scopes: country

Supported targets:

compare_autonomy_state - check if autonomy state is higher than other one, example:
compare_autonomy_state > puppet
Supported scopes: country

Supported targets:

has_cosmetic_tag - Checks if country has specific cosmetic tag set.
Example: INS = { has_cosmetic_tag = INS1 }
Supported scopes: country

Supported targets:

num_subjects - check the number of subjects of nation
Supported scopes: country

Supported targets:

num_tech_sharing_groups - checks how many groups a nation is a member of
Supported scopes: country

Supported targets:

has_template - Check if country has a division template of specific name
Supported scopes: country

Supported targets:

has_state_category - Check if state has a specific state category
Supported scopes: state

Supported targets: none

has_cavalry_ratio - Check that ratio of cavalry brigades in the composition of a side of combating troops are over a certain level
Supported scopes: combatant

Supported targets:

num_occupied_states - check the number of states occupied by nation
Supported scopes: country

Supported targets:

has_damaged_buildings - check for damaged buildings of nation
Supported scopes: country

Supported targets:

has_resources_amount - checks for amount of resources in state
Example:
has_resources_amount = {
	resource = chromium
	amount > 10
	state = 31 (optional - can be used in state scope instead)
	delivered = no # (optional, default: no) check the actual delivered amount from the state to its controller, with all modifiers applied
Supported scopes: state

Supported targets: none

has_tech_bonus - checks if the country has a bonus for the specified technology or category
Example:
has_tech_bonus = {
	technology =  <tech>
	category = <tech cat>
	}
Supported scopes: country

Supported targets: ???

has_template_majority_unit - check if country has a division template that is majority of specific unit
Supported scopes: country

Supported targets:

min_planning - check if side has maximal planning bonus
Supported scopes: combatant

Supported targets:

has_country_leader - check if country has leader with specified ID. Don't localize this. Tooltip only for debug.
has_country_leader = {
	ruling_only = yes/no (default = yes)
	character = <string> # recommended criteria
	name = <string> # alternative criteria
	id = <ID> # alternative criteria
}
Supported scopes: country

Supported targets:

has_army_experience - Compares current country's army experience with right side value.
 has_army_experience < <value>
Supported scopes: country

Supported targets:

has_air_experience - Compares current country's air experience with right side value.
 has_air_experience < <value>
Supported scopes: country

Supported targets:

has_navy_experience - Compares current country's navy experience with right side value.
 has_navy_experience < <value>
Supported scopes: country

Supported targets:

has_full_control_of_state - check controller for state(s)
Supported scopes: country

Supported targets: THIS ROOT PREV FROM CAPITAL

num_divisions - Will compare towards the amount of divisions a country has control over, if strength matters use has_army_size.
Supported scopes: country

Supported targets:

count_triggers - Returns true if the specified number of sub-triggers return true
count_triggers = { amount = 2 <trigger> <trigger> <trigger> }
Supported scopes: ???

Supported targets:

is_target_of_coup - is_target_of_coup = yes - Returns true if current country is being targeted by a coup from any country.
Supported scopes: country

Supported targets:

is_staging_coup - is_staging_coup = yes - Returns true if current country is staging a coup in another any country.
Supported scopes: country

Supported targets:

has_focus_tree - Does current country have the specified focus tree.
Supported scopes: country

Supported targets:

has_template_ai_majority_unit - check if country has a division template that is majority of specific unit using AI's priorities rather than visual
Supported scopes: country

Supported targets:

has_any_license - Country has any active licenses
Example: has_any_license = yes
Supported scopes: country

Supported targets: ???

has_license - Country has specific active license
Example: has_license = {
	from = TAG # has license from this country, optional
	 #if archetype is specified equipment should not be specified
	archetype = light_tank_equipment #any armor license
	equipment = { # classical equipment reference
		type = light_tank_equipment_2
		version = 0
	}
}
Supported scopes: country

Supported targets: ???

is_licensing_any_to - Current country is licensing something to target country
Example: is_licensing_any_to = ENG
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_licensing_to - Country is licensing specific equipment to target. License is active
Example: is_licensing_to = {
	target = TAG # licensing to this country
	 #if archetype is specified equipment should not be specified
	archetype = light_tank_equipment #any armor license
	equipment = { # classical equipment reference
		type = light_tank_equipment_2
		version = 0
	}
}
Supported scopes: country

Supported targets: ???

ai_has_role_template - check if the ai controlled country has any template for a specific role
Supported scopes: country

Supported targets:

ai_has_role_division - check if the ai controlled country has any fielded divisions for a specific role
Supported scopes: country

Supported targets:

has_relation_modifier - Country has specified relation modifier when dealing with _target_ county
Example: has_relation_modifier = {
	target = TAG # has license from this country, optional
	modifier = static_modifier_here
	}
}
Supported scopes: country

Supported targets: ???

any_province_building_level - In the current state, checks if any province within the specified limit has a building of the specified level.
Supported scopes: state

Supported targets: ??? none

estimated_intel_max_armor - Compares estimated max armor based on intel. Example: estimated_intel_max_armor = { tag = ITA value > 1 }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

estimated_intel_max_piercing - Compares estimated max armor based on intel. Example: estimated_intel_max_piercing = { tag = ITA value > 1 }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

amount_research_slots - check number of research current research slots
 amount_research_slots > 2
Supported scopes: country

Supported targets:

manpower_per_military_factory - Number of available manpower per factory the country has. Excluding dockyards.
manpower_per_military_factory < 1000
Supported scopes: country

Supported targets:

amount_taken_ideas - has current country picked specified amount of ideas. Category and slots is optional.
Excludes national_spirit, hidden, law = yes
amount_taken_ideas = {
	amount < <int> (mandatory)
	categories = { military_staff } (optional)
	slots = { army_chief political_advisor } (optional)
}
Supported scopes: country

Supported targets:

has_carrier_airwings_in_own_combat - Check if carrier has airplanes that are part of the current combat
Supported scopes: combatant

Supported targets:

naval_strength_ratio - Compares the estimated navy strength between the scope country and the one set with 'tag'
naval_strength_ratio = {
  tag = GER
  ratio > 0.5
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

enemies_naval_strength_ratio - Compares the estimated navy strength between the scope country and all its enemies
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

alliance_naval_strength_ratio - Compares the estimated naval strength between the scope country, his allies and his enemies.
Supported scopes: country

Supported targets:

has_stability - check value of stability 0-1: Example has_stability < 0.6
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_war_support - check value of war_support 0-1: Example has_war_support < 0.6
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_unit_leader - "Checks if all Unit Leaders of the Country in scope match the triggers.
tooltip=key can be defined to override title.
ex: GER = {
  all_unit_leader = {
	tooltip = my_loc_key # Optional
	include_invisible = yes # Optional - default = no
    ... character scope triggers ...
  }
}"
Supported scopes: country

Supported targets:

any_unit_leader - "Checks if at least one Unit Leader of the Country in scope matches the triggers.
tooltip=key can be defined to override title.
ex: GER = {
  any_unit_leader = {
	tooltip = my_loc_key # Optional
	include_invisible = yes # Optional - default = no
    ... character scope triggers ...
  }
}"
Supported scopes: country

Supported targets:

all_army_leader - "Checks if All Army Leader of the Country in scope match the triggers.
tooltip=key can be defined to override title.
ex: GER = {
  all_army_leader = {
	tooltip = my_loc_key # Optional
	include_invisible = yes # Optional - default = no
    ... character scope triggers ...
  }
}"
Supported scopes: country

Supported targets:

any_army_leader - "Checks if at least one Army Leader of the Country in scope matches the triggers.
tooltip=key can be defined to override title.
ex: GER = {
  any_army_leader = {
	tooltip = my_loc_key # Optional
	include_invisible = yes # Optional - default = no
    ... character scope triggers ...
  }
}"
Supported scopes: country

Supported targets:

all_navy_leader - "Checks if all Navy Leaders of the Country in scope match the triggers.
tooltip=key can be defined to override title.
ex: GER = {
  all_navy_leader = {
	tooltip = my_loc_key # Optional
	include_invisible = yes # Optional - default = no
    ... character scope triggers ...
  }
}"
Supported scopes: country

Supported targets:

any_navy_leader - "Checks if at least one Navy Leader of the Country in scope matches the triggers.
tooltip=key can be defined to override title.
ex: GER = {
  any_navy_leader = {
	tooltip = my_loc_key # Optional
	include_invisible = yes # Optional - default = no
    ... character scope triggers ...
  }
}"
Supported scopes: country

Supported targets:

is_assigned - is_assigned = yes/no - Checks if the current unit leader is assigned to command an army/navy
Supported scopes: character

Supported targets:

num_units - Check number of units commanded by the unit leader
 num_units > 2
Supported scopes: character

Supported targets:

is_field_marshal - is_field_marshal = yes/no - Checks if the current unit leader is a field marshall
Supported scopes: character

Supported targets:

has_unit_leader_flag - This trigger is deprecated in favor of has_character_flag (which does the same)has a character flag been setCheck flag val date set and days since set.
Example: has_unit_leader_flag = test_flag
has_unit_leader_flag = {
	flag = <name> (mandatory)
	value < <int> (optional)
	date > <date> (optional)
	days > <int> (optional)
}
Supported scopes: character

Supported targets: ???

has_decision - check if country has active selected decision
Supported scopes: country

Supported targets:

command_power - Checks if available command power is more or less that specified value
 command_power > 1.5
Supported scopes: country

Supported targets:

command_power_daily - Checks if daily command power increase is more or less that specified value
 command_power_daily > 1.5
Supported scopes: country

Supported targets:

has_completed_custom_achievement - "Return true if the input achievement is found in currently loaded mods, and if this achievement has been completed (either in current game or in a previous one)

Example:
has_completed_custom_achievement = {
	mod = my_mod_unique_id # set in common/achievements files
	achievement = my_achievement_token
}"
Supported scopes: ???

Supported targets: ???

has_advisor_role - has_advisor_role = 'character_slot_name' - Checks if the character in scope has an advisor role for the given slot
Supported scopes: character

Supported targets:

advisor_can_be_fired - "Return true if the character has an advisor role and they can be fired.
Warning: will return false if the character has no advisor role or it does not match the input slot. You should use has_advisor_role trigger first to really test the can_be_fired flag.

Examples:
some_character_scope = {
  advisor_can_be_fired = {
    slot = political_advisor # mandatory if the character has several advisor role
  }
}

some_character_scope = {
  advisor_can_be_fired = yes # or no
}"
Supported scopes: character

Supported targets:

is_hired_as_advisor - is_hired_as_advisor = yes/no - Checks if the current character has at least one advisor role for which they are hired
Supported scopes: character

Supported targets:

all_military_industrial_organization - "Checks if all Military Industrial Organisations of the Country in scope match the triggers.
tooltip=key can be defined to override title.
ex: GER = {
  any_military_industrial_organization = {
	tooltip = my_loc_key # Optional
	include_invisible = yes # Optional - default = no
    ... MIO scope triggers ...
  }
}"
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_fully_controlled_by - Checks if state is fully controlled by specified tag
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_military_industrial_organization - "Checks if the Country in scope has a  Military Industrial Organisation matching the input token.
Can use variable as input.
ex:
GER = {
  has_military_industrial_organization = infantry_mio_token
  has_military_industrial_organization = var:my_mio_var
}"
Supported scopes: country

Supported targets:

any_military_industrial_organization - "Checks if at least one Military Industrial Organisation of the Country in scope matches the triggers.
tooltip=key can be defined to override title.
ex: GER = {
  any_military_industrial_organization = {
	tooltip = my_loc_key # Optional
	include_invisible = yes # Optional - default = no
    ... MIO scope triggers ...
  }
}"
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_ability - does unit leader have the abilityCheck if a unit leader has the ability.
Example: has_ability = force_attack
Supported scopes: character

Supported targets: ???

has_variable - Checks if a variable exists in a scope
Supported scopes: ???

Supported targets: ???

has_id - check unit leader has specified ID. Don't localize this. Tooltip only for debug.
Supported scopes: character

Supported targets:

can_select_trait - check if leader can select a trait
Supported scopes: combatant character

Supported targets:

has_captured_operative - Checks if a country has a captured an operative ( supports scoped variables )
has_captured_operative = GER/yes/no

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_to_temp_variable - Adds a value or a variable to a temporary variable
Example: add_to_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger
}
Supported scopes: ???

Supported targets:

subtract_from_temp_variable - Subtracts a value or a variable to a temporary variable
Example: subtract_from_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger
}
Supported scopes: ???

Supported targets:

multiply_temp_variable - Multiplies a temporary variable by a value or another variable
Example: multiply_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger
}
Supported scopes: ???

Supported targets:

divide_temp_variable - Divies a temporary variable by a value or another variable
Example: divide_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger
}
Supported scopes: ???

Supported targets:

set_temp_variable - Sets a temporary variable to a value or another variable
Example: set_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger
}
Supported scopes: ???

Supported targets:

clamp_temp_variable - clamps a temp variable between two values/variables
Supported scopes: ???

Supported targets:

num_of_civilian_factories_available_for_projects - check amount of civilian factories available for a new project to use
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_event_target - checks if current scope or global scope has the specified event target saved
Supported scopes: ???

Supported targets: ???

political_power_growth - Check the value of political power daily growth.Exacmple: political_power_growth > 0
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_border_war - Checks if a there is any border wars for country/state
Supported scopes: state country

Supported targets: ??? none

is_border_war - Checks if a the combatant or leader has a border war
Supported scopes: combatant character

Supported targets: ???

has_border_war_between - Checks if a there is a border war between two states
Supported scopes: ???

Supported targets: ???

has_border_war_with - Checks if a there is a border against a state/country
Supported scopes: state country

Supported targets: ??? none

average_stats - Compares the average stats for a unit leader.
Example: average_stats > 10
Supported scopes: combatant character

Supported targets:

attack_skill_level - Compares attack skill level of a unit leader.
Example: attack_skill_level > 5
Supported scopes: combatant character

Supported targets:

defense_skill_level - Compares defense skill level of a unit leader.
Example: defense_skill_level > 5
Supported scopes: combatant character

Supported targets:

logistics_skill_level - Compares logistics skill level of a unit leader.
Example: logistics_skill_level > 5
Supported scopes: combatant character

Supported targets:

planning_skill_level - Compares planning skill level of a unit leader.
Example: planning_skill_level > 5
Supported scopes: combatant character

Supported targets:

is_leading_army_group - is_leading_army_group = yes/no - Checks if the current unit leader is leading an army group (not single army)
Supported scopes: character

Supported targets:

is_leading_army - is_leading_army = yes/no - Checks if the current unit leader is leading a single army (not army group)
Supported scopes: character

Supported targets:

print_variables - prints all variables in scope and temp variables to a file
Example: print_variables = {
file = log_file
text = header_text
append = yes
print_global = yes
var_list = { a b c } #optional
}
Supported scopes: ???

Supported targets:

num_planes_stationed_in_regions - Will compare the number of planes which have bases in the specified regions. Supports < > =
Example: num_planes_stationed_in_regions = {
value < 100
regions = { 18 47 }
}
Supported scopes: country

Supported targets:

has_active_mission - check if country has an active mission with specified ID. has_active_mission = my_test_mission
Supported scopes: country

Supported targets:

pc_turn - Checks turn number in PC.
Example:
pc_turn > 20
Supported scopes: ???

Supported targets:

has_attache - Has attaché from any other country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_attache_from - Has attaché from specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

amount_manpower_in_deployment_queue - Checks for amount manpower currently in deploymentview. amount_manpower_in_training > 10
Supported scopes: country

Supported targets:

army_manpower_in_state - Checks for amount manpower currently the target state with option to specify a type.
Example:
army_manpower_in_state = {
	state = <id> (variables supported)
	amount < <int> (variables supported)
	type > <equipment_type> (armor, infantry, etc.)
Supported scopes: country

Supported targets:

is_exiled_leader - Checks if scope leader is from an exiled government. is_exiled_leader = yes
Supported scopes: character

Supported targets:

is_exiled_in - Checks if scope country is a government in exile in target tag. is_exiled_in = ENG
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_hosting_exile - Checks if scope country is hosting target tag as an exile. is_hosting_exile = FRA
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_exiled_leader_from - Checks if scope leader is from specified exiled government. is_exiled_leader_from = FRA
Supported scopes: character

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_exile_host - Checks if scope country is hosting an exile. is_exile_host = yes
Supported scopes: country

Supported targets: ???

is_government_in_exile - Checks if scope country an exiled government. is_government_in_exile = yes
Supported scopes: country

Supported targets: ???

divisions_in_border_state - checks for amount of divisions in specified state owned by current country.
Supported scopes: country

Supported targets:

stockpile_ratio - Compares the ratio of equipment archetype in stockpile vs used. a value of 2 means we have double in stockpile of what is fielded or in training.
Supported scopes: country

Supported targets:

state_strategic_value - Checks for state strategic value
Supported scopes: state

Supported targets: none

state_and_terrain_strategic_value - Checks for state strategic value
Supported scopes: state

Supported targets: none

round_temp_variable - Rounds a temporary variable
Example: round_temp_variable = num_dogs
Supported scopes: ???

Supported targets:

pc_is_forced_government_to - Checks if country has had their government force-changed to a certain ideology in the peace conference.
Example:
CZE = { pc_is_forced_government_to = communism }
Supported scopes: country

Supported targets:

pc_is_state_outside_influence_for_winner - Check if state is outside valid influence range for winner TAG in the current peace conference
Example:
pc_is_state_outside_influence_for_winner = SOV/ROOT/ROOT.FROM
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

pc_total_score - Checks country's total peace conference score. Only usable if the country is on the winning side.
Example:
CZE = { pc_total_score > 400 }
Supported scopes: country

Supported targets:

pc_current_score - Checks country's total peace conference score. Only usable if the country is on the winning side.
Example:
CZE = { pc_current_score > 400 }
Supported scopes: country

Supported targets:

pc_is_winner - Checks if country is a winner in the peace conference.
Example:
ENG = { pc_is_winner = yes }
Supported scopes: country

Supported targets:

pc_is_loser - Checks if country is a loser in the peace conference.
Example:
ENG = { pc_is_loser = yes }
Supported scopes: country

Supported targets:

pc_is_liberated - Checks if country has been liberated in the peace conference.
Example:
CZE = { pc_is_liberated = yes }
Supported scopes: country

Supported targets:

pc_is_puppeted - Checks if country is a puppet, or has been released as a puppet in the peace conference.
Example:
CZE = { pc_is_puppeted = yes }
Supported scopes: country

Supported targets:

pc_is_on_winning_side - Checks if country is on the winning side in the peace conference.
Example:
CZE = { pc_is_on_winning_side = yes }
Supported scopes: country

Supported targets:

has_subject - Checks if the country has for subject the given country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_game_rule - Checks if a game rule is set to a particular option.
Example:
has_game_rule = {
	rule = GER_can_remilitarize_rhineland
	option = yes
}
Supported scopes: ???

Supported targets:

game_rules_allow_achievements - Returns true if all of the active game rule options allow achievements.
Supported scopes: ???

Supported targets:

is_in_array - Checks if an element is in array
Example: is_in_array = {
	array = array_name
	value = 42
}
#shorter usage: is_in_array = { array_name = 42 }
Supported scopes: ???

Supported targets:

add_to_temp_array - Adds an element to a temporary array
Example: add_to_temp_array = {
	array = array_name
	value = 42 #optional, if not defined adds scope
	index = 3 #optional, default is end. otherwise elements are shifted
}
#shorter usage: add_to_temp_array = { array_name = 42 }
Supported scopes: ???

Supported targets:

remove_from_temp_array - Removes an element from a temporary array using value or index
Example: remove_from_temp_array = {
	array = array_name
	value = 42 #optional, use index or this. if neither it removes last element
	index = 3 #optional, use value or this. if neither it removes last element
}
#shorter usage: remove_from_temp_array = { array_name = 42 }
Supported scopes: ???

Supported targets:

clear_temp_array - Clears the contents of a temporary array
Example: clear_temp_array = array_name
Supported scopes: ???

Supported targets:

resize_temp_array - Resizes a temp array
Example: resize_temp_array = {
	array = array_name
	value = 42 #optional, if not specified and array grows the new elements are set to this (default 0)
	size = 3 #if higher than old size, new elements are added to end. otherwise last elements are removed to match to new size
}
#shorter usage: resize_temp_array = { array_name = 3 }
Supported scopes: ???

Supported targets:

any_of - Runs a loop on an array and check a trigger for each value, if any true returns true. otherwise returns false
Example: any_of = {
	array = array_name
	value = value_name #optional (default 'value') current value in array will be stored in this temp variable
	index = index_name #optional (default 'index') current index in array will be stored in this temp variable
 #trigger 1
 #trigger 2 ...
}
Supported scopes: ???

Supported targets: ???

all_of - Runs a loop on an array and check a trigger for each value, if any false returns false. otherwise returns true
Example: all_of = {
	array = array_name
	value = value_name #optional (default 'v') current value in array will be stored in this temp variable
	index = index_name #optional (default 'i') current index in array will be stored in this temp variable
 #trigger 1
 #trigger 2 ...
}
Supported scopes: ???

Supported targets: ???

has_fuel - check amount of fuel
example:
has_fuel > 500
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

any_of_scopes - Runs a loop on an array and check a trigger for each scope in it, if any true returns true. otherwise returns false
Example: any_of_scopes = {
	array = array_name
	tooltip = loc #if defined the trigger will output tooltip using this title. loc_NOT will be used if trigger is inside a NOT
 #trigger 1
 #trigger 2 ...
}
Supported scopes: ???

Supported targets: ???

all_of_scopes - Runs a loop on an array and check a trigger for each scope in it, if any false returns false. otherwise returns true
Example: all_of_scopes = {
	array = array_name
	tooltip = loc #if defined the trigger will output tooltip using this title. loc_NOT will be used if trigger is inside a NOT
 #trigger 1
 #trigger 2 ...
}
Supported scopes: ???

Supported targets: ???

has_country_leader_with_trait - check if current country leader has specified trait.
has_country_leader_with_trait = big_fat_idiot
Supported scopes: country

Supported targets:

has_legitimacy - Check scope country legitimacy 0-100: Example has_legitimacy < 60
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_rule - Checks if a rule set for a country.
Example: has_rule = can_puppet
Supported scopes: ???

Supported targets:

non_damaged_building_level - check if a state has enough non damaged buildings


Example:
non_damaged_building_level = {
	building = arms_factory
	level = 5
}
Supported scopes: state

Supported targets: none

state_population_k - check the population in the state in thousands (use to avoid variable overflows)
Supported scopes: state

Supported targets: none

casualties_k - Check the amount of casualties in thousands a country has suffered in all of it's wars
Supported scopes: country

Supported targets:

meta_trigger - meta triggers can be used for building triggers from strings and running them. following example will test if Germany has 42 pp:
meta_trigger = {
    text = {
        [COUNTRY] = {
            political_power > [POW]
        }
    }
    COUNTRY = "GER"
    POW = 42
    debug = no #set to yes if you want to see what game actually executes
}

Supported scopes: state country combatant character MIO

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_dynamic_modifier - Checks if scope has a dynamic modifier.
has_dynamic_modifier = {
    modifier = dynamic_modifier_name
    scope = GER #optional, if the original modifier has been targeted
}

Supported scopes: state country character

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

find_lowest_in_array - Runs a loop on for each element of an array, finds the lowest value and stores result in temp variables
Example: find_lowest_in_array = {
	array = array_name
	value = value_name #optional (default 'v') lowest value in array will be stored in this temp variable
	index = index_name #optional (default 'i') index of lowest value in array will be stored in this temp variable
}
Supported scopes: ???

Supported targets: ???

find_highest_in_array - Runs a loop on for each element of an array, finds the highest value and stores result in temp variables
Example: find_highest_in_array = {
	array = array_name
	value = value_name #optional (default 'v') highest value in array will be stored in this temp variable
	index = index_name #optional (default 'i') index of highest value in array will be stored in this temp variable
}
Supported scopes: ???

Supported targets: ???

has_mines - Checks if a region has amount of mines.
has_mines = {
    region = region_id
    amount = amount_of_mines
}

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

naval_strength_comparison - Compares navies of two sides.
naval_strength_comparison = {
	other = GER # by default compares to the from scope
  tooltip = 'key' #tooltip is 'navy strength' by default, the key can be overridden if wanted
	ratio > 1.5   # default is 1
	sub_unit_def_weights = { # if not specified, it will weigh all ships as 1. otherwise only specified sub unit types will be counted
		carrier = 1
		battleship = 2
	}
}

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

fuel_ratio - Compares the fuel ratio to a variable.
Example: fuel_ratio > 0.5
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

days_since_last_strategic_bombing - Checks the days since last strategic bombing.
days_since_last_strategic_bombing < 10

Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

days_since_capitulated - Checks the number of days since the country last capitulated, even if it is no longer capitulated.
	If it has not ever capitulated, the value is extremely large.
	It is recommended to combine this with has_capitulated = yes when you specifically want to ignore non-active capitulations.
Examples:
	HOL = { has_capitulated = yes days_since_capitulated > 60 } # The Netherlands has been capitulated for more than two months
	FRA = { has_capitulated = yes days_since_capitulated < 21 } # France has capitulated sometime within the past three weeks
	GER = { OR = { has_capitulated = no days_since_capitulated > 14 } } # Germany is not both actively and recently capitulated

Supported scopes: country

Supported targets:

is_power_balance_in_range - checks if current value power balance is within a certain range

Example:
is_power_balance_in_range = {
	id = power_balance_id
	range = power_balance_range_id
}
Supported scopes: ???

Supported targets:

has_power_balance - checks if power balance is active for country

Example:
has_power_balance = {
	id = power_balance_id
}
Supported scopes: country

Supported targets:

has_any_power_balance - checks if country has any active power balance

Example:
has_any_power_balance = yes/no
Supported scopes: country

Supported targets:

power_balance_value - compares current value of a power balance

Example:
power_balance_value = {
	id = power_balance_id
	value > 0.5 # supported operators are: >, < and =
}
Supported scopes: ???

Supported targets:

power_balance_daily_change - compares current total daily change of a power balance

Example:
power_balance_daily_change = {
	id = power_balance_id
	value > 0.5 # supported operators are: >, < and =
}
Supported scopes: ???

Supported targets:

is_power_balance_side_active - checks if specified side is currently active

Example:
is_power_balance_side_active = {
	id = power_balance_id
	side = side_id
}
Supported scopes: ???

Supported targets:

has_power_balance_modifier - checks if the power balance has a modifier added to it

Example:
has_power_balance_modifier = {
	id = power_balance_id
	modifier = static_modifier_id
}
Supported scopes: ???

Supported targets:

mine_threat - A trigger to check how dangerous enemy mines are for a country. Controlled by NAVAL_MINE_DANGER defines. Returns a value between 0 and 1. Example mine_threat > 0.5
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

convoy_threat - A trigger to check convoy threat for a country. Controlled by NAVAL_CONVOY_DANGER defines. Returns a value between 0 and 1. Example convoy_threat > 0.5
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

casualties_inflicted_by - Checks the casualties infliced by the speficied country to the scopped country.
E.g. true if Germany has been inflicted more than 200k casualties by Poland:
GER = {
  casualties_inflicted_by = {
    opponent = POL
    thousands > 200
  }
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_mined - Checks the mines planted by the country of the parent scope on the coastline of the target countryE.g. true if Germany has more than 1000 mines around Poland coast:
GER = {
  has_mined = {
    target = POL
    value > 1000
  }
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

received_expeditionary_forces - Checks that the country in scope has received the specified amount of expeditionary forces from the specified country
E.g. true if Germany is commaning more than 100 expeditionary forces from Poland:
GER = {
  received_expeditionary_forces = {
    sender = POL
    value > 100
  }
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_fighting_in_weather - Checks the weather on a combat
Example:
# true if weather is artic water
is_fighting_in_weather = artic_water
# true if weather is either artic_water or snow
is_fighting_in_weather = { artic_water snow }

Supported scopes: combatant

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

controls_province - check controller for province
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

compliance - Compares the current compliance level of a state to a value. Example: compliance > 50
Supported scopes: state

Supported targets: ??? none

compliance_speed - Compares the current compliance speed of a state to a value. Example: compliance_speed > 50
Supported scopes: state

Supported targets: ??? none

resistance_speed - Compares the current resistance speed of a state to a value. Example: resistance_speed > 50
Supported scopes: state

Supported targets: ??? none

occupied_country_tag - compares occupied country that creates resistance to a tag. Example: occupied_country_tag = ITA
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

resistance_target - Compares the target resistance level of a state to a value. Example: resistance_target > 50
Supported scopes: state

Supported targets: ??? none

has_resistance - returns true if state has a resistance
Supported scopes: state

Supported targets: ??? none

has_active_resistance - returns true if state has an active resistance (above zero)
Supported scopes: state

Supported targets: ??? none

has_occupation_modifier - compares occupied country that creates resistance to a tag. Example: has_occupation_modifier = modifier_name
Supported scopes: state

Supported targets: ??? none

has_core_occupation_modifier - has an occupation modifier that applies to average resistance/compliance
Example:
has_core_occupation_modifier = {
 occupied_country_tag = ITA
 modifier = token
}
Supported scopes: country

Supported targets: ???

is_debug - returns true if game is in debug mode (launched with -debug argument)
Supported scopes: ???

Supported targets: ???

core_compliance - Compares the core (average of all occupied states) compliance value of occupied_country_tag that is occuppied by the country in current scope.
Example:
core_compliance = {
 occupied_country_tag = ITA
 value > 35
}
Supported scopes: country

Supported targets: ???

core_resistance - Compares the core (average of all occupied states) resistance value of occupied_country_tag that is occuppied by the country in current scope.
Example:
core_resistance = {
 occupied_country_tag = ITA
 value > 35
}
Supported scopes: country

Supported targets: ???

pc_is_state_claimed_and_taken_by - Check if state is claimed with a take_states action in conference for TAG
Example:
pc_is_state_claimed_and_taken_by = SOV/ROOT/ROOT.FROM
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

power_balance_weekly_change - compares current total weekly change of a power balance

Example:
power_balance_weekly_change = {
	id = power_balance_id
	value > 0.5 # supported operators are: >, < and =
}
Supported scopes: ???

Supported targets:

career_profile_check_value - Compares a career profile value to a number
Supported scopes: ???

Supported targets: ???

career_profile_check_ratio - Compares the ratio (first/second) of two career profile values to a number
Supported scopes: ???

Supported targets: ???

career_profile_set_temp_variable - Sets a temporary variable to a value or another variable
Example: career_profile_set_temp_variable = {
var = num_dogs
	value = num_dogs_in_career_profile
}
Supported scopes: ???

Supported targets:

num_of_career_profile_points - check amount of gained career points
Supported scopes: ???

Supported targets: ???

career_profile_check_points - Compares a career points value to a number
Supported scopes: ???

Supported targets: ???

career_profile_check_medal - Checks if the required medal is achieved and collected
Supported scopes: ???

Supported targets: ???

career_profile_check_ribbon - Checks if the required ribbon is achieved and collected
Supported scopes: ???

Supported targets: ???

career_profile_has_player_flag - Checks if the flag is set for the local player
Supported scopes: ???

Supported targets: ???

get_supply_vehicles_temp - sets a temp variable to the number of supply vehicles in stockpile or that are needed. example
get_supply_vehicles_temp = {
	var = num_vehicles #variable to set
	type = truck #can be truck or train
	need = yes #default no. If yes, gets the number of needed vehicles
}

Supported scopes: country

Supported targets:

career_profile_set_temp_playthrough_variable - Sets a temporary variable to a value or another variable
Example: career_profile_set_temp_playthrough_variable = {
var = num_dogs
	value = num_dogs_in_career_profile
}
Supported scopes: ???

Supported targets:

career_profile_check_playthrough_value - Compares a playthrough value to a number
Supported scopes: ???

Supported targets: ???

career_profile_check_playthrough_ratio - Compares the ratio (first/second) of two playthrough values to a number
Supported scopes: ???

Supported targets: ???

has_mio_size - "Make comparaison on the size of the military industrial organization in the scope.
Can use < or > to compare the value with either a fixed value or with a variable.
ex:
var:my_mio_var = {
	has_mio_size > 5
	has_mio_size < 2
	has_mio_size > var:my_number_var
}"
Supported scopes: MIO

Supported targets:

has_mio_number_of_completed_traits - "Make comparaison on the number of unlocked traits of the military industrial organization in the scope.
Can use < or > to compare the value with either a fixed value or from a variable.
ex:
var:my_mio_var = {
	has_mio_number_of_completed_traits > 5
	has_mio_number_of_completed_traits < 2
	has_mio_number_of_completed_traits > var:my_number_var
}"
Supported scopes: MIO

Supported targets:

has_mio_flag - "Check if flag has been set within the military industrial organization in scope.
May checks on the value or date/days since last modified date.
Examples:
has_mio_flag = my_flag
has_mio_flag = {
	flag = my_flag (mandatory)
	value < 12 (optional)
	date > 1936.3.25 (optional, compare with the date where the flag was last modified )
	days > 365 (optional, compare with the number of days since the flag was last modified )
}"
Supported scopes: MIO

Supported targets: ???

pc_is_state_claimed_by - Check if state is claimed in conference by TAG
Example:
pc_is_state_claimed_by = SOV/ROOT/ROOT.FROM
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_military_industrial_organization - "Checks if the Military Industrial Organisation in scope matches the input token
ex:
var:my_mio_var = {
  is_military_industrial_organization = my_mio_token
}"
Supported scopes: MIO

Supported targets:

has_mio_trait - "Checks if the Military Industrial Organisation in scope has a trait matching the input token.
ex:
mio:my_mio = {
	has_mio_trait = my_trait_token
	has_mio_trait = {
		trait = my_trait_token
	}
}"
Supported scopes: MIO

Supported targets:

is_mio_trait_available - "Checks if the Military Industrial Organisation in scope has a trait matching the input token, which is also available.
ex:
mio:my_mio = {
	is_mio_trait_available = my_trait_token
	is_mio_trait_available = {
		trait = my_trait_token
		check_mio_parent_completed = no # Optional, yes by default
        check_mio_mutually_exclusive = no # Optional, yes by default
	}
}"
Supported scopes: MIO

Supported targets:

is_mio_trait_completed - "Checks if the Military Industrial Organisation in scope has a trait matching the input token, which is also completed.
ex:
mio:my_mio = {
	is_mio_trait_completed = my_trait_token
	is_mio_trait_completed = {
		trait = my_trait_token
	}
}"
Supported scopes: MIO

Supported targets:

is_mio_assigned_to_task - "Checks if the Military Industrial Organisation in scope is assigned to at least 1 task.
ex:
mio:my_mio = {
	is_mio_assigned_to_task = yes
	is_mio_assigned_to_task = no
}"
Supported scopes: MIO

Supported targets:

has_mio_policy_active - "Checks if the Military Industrial Organisation in scope has an allowed matching the input token, which is currently attached to the MIO.
ex:
mio:my_mio = {
	has_mio_policy_active = my_policy_token
}"
Supported scopes: MIO

Supported targets:

has_mio_research_category - "Checks if the Military Industrial Organisation in scope has the input research category.
ex:
mio:my_mio = {
	has_mio_research_category = my_research_category_token
}"
Supported scopes: MIO

Supported targets:

has_mio_equipment_type - "Checks if the Military Industrial Organisation in scope has the input equipment type.
(possible values can be found in script_enum_equipment_bonus_type and in common/equipment_groups)
ex:
mio:my_mio = {
	has_mio_equipment_type = my_equipment_type_token
}"
Supported scopes: MIO

Supported targets:

has_mio_policy - "Checks if the Military Industrial Organisation in scope has an allowed policy matching the input token.
ex:
mio:my_mio = {
	has_mio_policy = my_policy_token
}"
Supported scopes: MIO

Supported targets:

is_one_state_island - "return true if the state is a one-state-island.
More precisely, all provinces in the state have no land neighbor.
Or if they do they are connected by a strait or the neighbor is inside the state.
ex: 145 = {
	is_one_state_island = yes
	is_one_state_island = no
}"
Supported scopes: state

Supported targets: ??? none

any_purchase_contract - "Checks if at least one Purchase contract of the Country in scope matches the triggers.
tooltip=key can be defined to override title.
ex: GER = {
  any_purchase_contract = {
	tooltip = my_loc_key # Optional
    ... Purchase Contract scope triggers ...
  }
}"
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_purchase_contracts - "Checks if all purchase contracts of the Country in scope matches the triggers.
tooltip=key can be defined to override title.
ex: GER = {
  all_purchase_contracts = {
	tooltip = my_loc_key # Optional
     ... Purchase Contract scope triggers ...
  }
}"
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

contract_contains_equipment - "Check if contract contains equipment category, equipment archetype or equipment.
Example:
    contract_contains_equipment = infantry_equipment"
Supported scopes:

Supported targets:

deal_completion - Check value of purchase contract completion. Example: deal_completition < 0.6
Supported scopes:

Supported targets:

longest_war_length - Check number of months the country has been at war
Supported scopes: country

Supported targets:

war_length_with - Check number of months the country has been at war with X for Y months.
 war_length_with = { tag = X months > Y }
Supported scopes: country

Supported targets:

network_strength - checks network strength you have in a country. Examples:
# country has a network strength greater than 50% over germany
network_strength = {
 target = GER
 value > 50
}

# country has a network strength greater than 50% over germany in state 53
network_strength = {
 target = GER
 state = 53 value > 50
}

# country has a network strength greater than 50% in state 53, regardless of the target
network_strength = {
 state = 53
 value > 50
}


Supported scopes: country

Supported targets:

has_operation_token - Checks if a country has a specific token against another country
has_operation_token = {
	tag = GER
	token = some_token_id
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

occupation_law - "Checks the occupation law for an occupied country, occupied state, or the default occupation law of an occupying country.

- If THIS is a country and it's the same as the PREV country, then THIS's default law is checked.
- If THIS is a country and it's different from the PREV country, then PREV's country law for THIS is checked.
- If THIS is a state, then the occupier's state law is checked.

Example:
GER = { occupation_law = autonomous_occupation }
GER = { POL = { occupation_law = foreign_civilian_oversight } }
123 = { occupation_law = local_police_force_garrison }"
Supported scopes: state country

Supported targets: ??? none

is_ally_with - checks if a country is ally with another country. will check if two countries are same/in same faction/has subject master relation
Example: is_ally_with = ITA

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

get_highest_scored_country_temp - calculates the highest scored country that is defined in a country scorer and sets it to a variable. Example:
get_highest_scored_country_temp = {
  scorer = scorer_id
  var = var_name # variable name that the result will be stored. default is highest_scored_country
}
Supported scopes: country

Supported targets:

get_sorted_scored_countries_temp - calculates & sorts all countries in a country scorer and stores them and their scores in temp arrays. Example:
get_sorted_scored_countries_temp = {
  scorer = scorer_id # id that is used in country scorer  array = array_name # a name to store sorted countries as a temp array (default to sorted_country_list)
  scores = array_name # corresponding score temp array for countries stored in array (default to country_list_scores)
}
Supported scopes: country

Supported targets:

decryption_progress - checks decryption ratio against a country. Example:
decryption_progress = {
 target = GER
 value > 0.5
}
#or decryption_progress@GER as variable

Supported scopes: country

Supported targets:

any_occupied_country - check if any any occupied meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_occupied_country - check if all occupied countries meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

any_country_with_original_tag - check if any country with current scope's original tag meets the trigger. Example:
any_country_with_original_tag = {
  original_tag_to_check = ENG # the trigger check all countries that has this original tag
  # ... triggers to check
}
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_country_with_original_tag - check if all country with current scope's original tag meets the trigger. Example:
all_country_with_original_tag = {
  original_tag_to_check = ENG # the trigger check all countries that has this original tag
  # ... triggers to check
}
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_done_agency_upgrade - has country done this intelligence agency upgrade (to its highest level)
Supported scopes: country

Supported targets:

has_intelligence_agency - has country created an Intelligence Agency
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_spymaster - check if country is Spy Master
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

foreign_manpower - check the amount of foreign garrison manpower we have
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

garrison_manpower_need - check the amount of manpower needed by garrisons
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

agency_upgrade_number - Checks the number of upgrade done in the intelligence agency.
agency_upgrade_number > 4
Supported scopes: country

Supported targets:

is_dynamic_country - returns true if the country is a dynamic country (tag is D01-D50)
Supported scopes: country

Supported targets: ???

operative_leader_mission - Checks whether the operative is performing the given mission:
operative_leader_mission = build_intel_network
Supported scopes: character

Supported targets:

compare_intel_with - Compare the intel of the scoped country with the specified one:
GER = {
  # is true if all predicates are satisfied
  compare_intel_with = {
    target = POL
    civilian_intel > 0.5  # GER has at least 0.5 more civ. intel than POL
    army_intel = 0  # GER has as much army intel as POL
    navy_intel < 0  # POL has more navy intel than GER
    # airforce_intel is not specified and thus ignored in the comparison
  }
}

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_operative_leader - check if all operatives meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets:

any_operative_leader - check if any operatives meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets:

is_operative_captured - Checks whether the operative has the matching captured status

Supported scopes: character

Supported targets:

intel_level_over - Compare the absolute, percentage based, intel level the scoped country has over
the specified one:
GER = {
  # is true if all predicates are satisfied
  intel_level_over = {
    target = POL
    civilian_intel > 0.5  # GER has more than 50% civ. intel over POL
    army_intel = 0  # GER has no army intel over POL
    navy_intel > 0  # GER has at least some navy intel over POL
    # airforce_intel is not specified and thus ignored in the comparison

    # NOTE: since we are comparing the intel level of a country over another,
    # checking for values less than 0 does not make sense
    # NOTE: since we are comparing percentages, using values greater than 1
    # does not make sense.
  }
}

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

any_controlled_state - check if any of the states controlled by the scope country meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_controlled_state - check if all of the states controlled by the scope country meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_of_operatives - Checks the number of operatives the country controls
Supported scopes: country

Supported targets:

num_operative_slots - Checks the number of available operative slots a country has.
If this differs from the number of operative, this does not mean the country can recruit an operative, but that it will eventually be able to.
Supported scopes: country

Supported targets:

num_free_operative_slots - Checks the number of operative a country can recruit right now.
Note that this is not necessarily greater than zero if num_operative_slots returned a number greater than the number of operative.
Supported scopes: country

Supported targets:

is_cryptology_department_active - has country an active cryptology department
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_decrypting - checks if is currently decrypting a cipher. Example is_decrypting = GER
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_fully_decrypted - checks if fully decrypted a cipher. Example is_fully_decrypted = GER
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_active_decryption_bonuses_enabled - checks if the country activated their active cipher decryption bonuses. Example is_active_decryption_bonuses_enabled = GER
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_fake_intel_divisions - Will compare towards the amount of fake intel divisions a country has control over. .
Supported scopes: country

Supported targets:

modulo_temp_variable - modulos a temp variable with another. Example:
modulo_temp_variable = {
  var = variable_to_modulo
  value = divisior
}
Supported scopes: ???

Supported targets:

any_guaranteed_country - check if any country with current scoped country guarantees. Example:
any_guaranteed_country = {
  # ... triggers to check
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_guaranteed_country - check if every country with current scoped country guarantees. Example:
all_country_with_original_tag = {
  # ... triggers to check
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_finished_operations - Compares number of completed operations.
Example:
num_finished_operations = {
 target = ITA
 operation = operation_infiltrate_armed_forces_navy value > 35
}
Supported scopes: country

Supported targets: ???

has_collaboration - checks the collaboration in a target country with our currently scoped country. Example:
has_collaboration = {
 target = GER
 value > 0.5
}
#or has_collaboration@GER as variable

Supported scopes: country

Supported targets:

set_temp_variable_to_random - sets a temp variable to a random value. example
set_temp_variable_to_random = num_dogs #sets num_dogs a random value between [0, 1)
set_temp_variable_to_random = {
	var = num_dogs #variable to set
	min = 5 #default 0. value will be set in between [min, max)
	max = 10 #default 1. value will be set in between [min, max)
	integer = yes #default no. if yes the number value will be an integer
}

Supported scopes: ???

Supported targets:

is_running_operation - checks if running a specific operation. operation can be ommitted to check for any operation
Example:
is_running_operation = {
 target = ITA
 operation = operation_infiltrate_armed_forces_navy}
Supported scopes: country

Supported targets: ???

has_finished_collecting_for_operation - checks if finished collecting of resources for an operation.
Example:
has_finished_collecting_for_operation = {
 target = ITA
 operation = operation_infiltrate_armed_forces_navy}
Supported scopes: country

Supported targets: ???

conscription_ratio - Checks conscription ratio of the country compared to target conscription ratio.

Supported scopes: country

Supported targets:

target_conscription_amount - Checks the target conscription amount of the country.

Supported scopes: country

Supported targets:

current_conscription_amount - Checks the current conscription amount of the country.

Supported scopes: country

Supported targets:

is_operation_type - checks the type of operation
Supported scopes:

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_preparing_operation - checks if preparing a specific operation.
Example:
is_preparing_operation = {
 target = ITA
 operation = operation_infiltrate_armed_forces_navy}
Supported scopes: country

Supported targets: ???

num_researched_technologies - Number of researched technologies
Supported scopes: country

Supported targets:

operative_leader_operation - Checks whether the operative is performing the given operation:
operative_leader_operation = operation_rescue_operative
Supported scopes: character

Supported targets:

can_declare_war_on - checks if the country could potentially declare a war on the target ( according to game rules, relationship, etc... ). Example can_declare_war_on = GER
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_nationality - Checks whether the operative has the specified nationality.
NOTE: this is invalid on non-operatives.
Examples:
has_nationality = GER

Supported scopes: character

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

network_national_coverage - checks network national coverage you have over a country. Example:
network_national_coverage = {
 target = GER
 value > 0.5
}

Supported scopes: country

Supported targets:

any_character - check if any character meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets:

all_character - check if all characters meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets:

is_army_chief - is_army_chief = yes/no - Checks if the character in scope is hired as an army chief
Supported scopes: character

Supported targets:

is_advisor - is_advisor = yes/no - Checks if the current character is an advisor
Supported scopes: character

Supported targets:

is_country_leader - is_country_leader = yes/no - Checks if the current character is a country leader
Supported scopes: character

Supported targets:

is_unit_leader - is_unit_leader = yes/no - Checks if the current character is a unit leader
Supported scopes: character

Supported targets:

is_army_leader - is_army_leader = yes/no - Checks if the current character is a army leader
Supported scopes: character

Supported targets:

is_corps_commander - is_corps_commander = yes/no - Checks if the current character is a corps commander
Supported scopes: character

Supported targets:

is_character - Checks whether the character in scope matches the character in input
Supported scopes: character

Supported targets:

is_navy_leader - is_navy_leader = yes/no - Checks if the current character is a navy leader
Supported scopes: character

Supported targets:

is_operative - is_operative = yes/no - Checks if the current character is an operative
Supported scopes: character

Supported targets:

is_political_advisor - is_political_advisor = yes/no - Checks if the character in scope is hired as a political advisor
Supported scopes: character

Supported targets:

is_theorist - is_theorist = yes/no - Checks if the character in scope is hired as a theorist
Supported scopes: character

Supported targets:

is_navy_chief - _is_navy_chief_ = yes/no - Checks if the character in scope is hired as a navy chief
Supported scopes: character

Supported targets:

is_air_chief - _is_air_chief = yes/no - Checks if the character in scope is hired as an air chief
Supported scopes: character

Supported targets:

is_high_command - _is_high_command_ = yes/no - Checks if the character in scope is hired as high command
Supported scopes: character

Supported targets:

has_army_ledger - has_army_ledger = yes/no - Checks if the current character has an army ledger
Supported scopes: character

Supported targets:

has_navy_ledger - has_navy_ledger = yes/no - Checks if the current character has a navy ledger
Supported scopes: character

Supported targets:

has_air_ledger - has_air_ledger = yes/no - Checks if the current character has an air ledger
Supported scopes: character

Supported targets:

is_character_slot - alias of has_advisor_role
Supported scopes: character

Supported targets:

can_be_country_leader - Returns true if specified character has a least one country leader role.

Example:
can_be_country_leader = GER_erwin_rommelGER_erwin_rommel = { can_be_country_leader = yes }
Supported scopes: country character

Supported targets:

has_character - Returns true if scoped country has character.

Example:
has_character = GER_erwin_rommel
Supported scopes: country

Supported targets:

has_allowed_idea_with_traits - Checks if country has allowed ideas with specific traits more than limit. Example:
has_available_idea_with_traits = {
	idea = head_of_intelligence # trait names. can be a list of traits in { }
	limit = 1
	characters = yes/no - only runs this trigger on characters
	ignore = generic_head_of_intelligence # if specified, these ideas will be ignored. can be a list of ideas in { }
}

Supported scopes: country

Supported targets:

is_leading_volunteer_group_with_original_country - is_leading_volunteer_group_with_original_country = FRA
Supported scopes: combatant character

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

is_leading_volunteer_group - is_leading_volunteer_group = FRA
Supported scopes: combatant character

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

pc_is_forced_government_by - Checks if country has had their government force-changed by a certain country in the peace conference.
Example:
CZE = { pc_is_forced_government_by = GER }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

pc_is_on_same_side_as - Checks if country is on same side (winning or losing side) as another country in the peace conference.
Example:
POL = { pc_is_on_same_side_as = ENG }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

pc_is_puppeted_by - Checks if country is a puppet of a certain country, or has been released as a puppet by a certain country in the peace conference.
Example:
CZE = { pc_is_puppeted_by = GER }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

num_divisions_in_states - Checks number of divisions in states (optionally filtering on majority division types). Using a custom tooltip is highly recommended since the default tooltip leaves out some information for the sake of readability.
Example:
num_divisions_in_states = {
	count > 5 (or <, =)
	states = { 550 559 }
	types = { infantry cavalry } [optional - will count all except excluded if not specified]
	exclude = { light_armor } [optional - will count all (included) if not specified]
}
Supported scopes: country

Supported targets: ???

num_battalions_in_states - Checks number of battalions in states (optionally filtering on battalion types). Using a custom tooltip is highly recommended since the default tooltip leaves out some information for the sake of readability.
Example:
num_battalions_in_states = {
	count > 5 (or <, =)
	states = { 550 559 }
	types = { infantry cavalry } [optional - will count all except excluded if not specified]
	exclude = { light_armor } [optional - will count all (included) if not specified]
}
Supported scopes: country

Supported targets: ???

has_war_with_wargoal_against - Checks if country has a war started with a wargoal against the target.
Example 1:
has_war_with_wargoal_against = {
  target = GER
  type = take_state  # (optional: if not specified any wargoal will do)
}
Example 2:
has_war_with_wargoal_against = GER  # (any wargoal will do)
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

pc_is_forced_government - Checks if country has had their government force-changed in the peace conference.
Example:
CZE = { pc_is_forced_government = yes }
Supported scopes: country

Supported targets:

seller - Check the seller country. Example: seller = GER
Supported scopes:

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

buyer - Check the buyer country. Example: buyer = GER
Supported scopes:

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_design_based_on - check if country has a buildable non-obsolete design based on an archetype
Supported scopes: country

Supported targets:

has_terrain - Checks if a country has any province of the specified terrain type.
Example: has_terrain = mountain
Supported scopes: country

Supported targets:

pc_does_state_stack_dismantled - Checks if state got dismantled stacked on it in the peace conference.
Example:
FROM.FROM.FROM = { pc_does_state_stack_dismantled = yes }
Supported scopes: state

Supported targets: none

pc_does_state_stack_demilitarized - Checks if state got demilitarized stacked on it in the peace conference.
Example:
FROM.FROM.FROM = { pc_does_state_stack_demilitarized = yes }
Supported scopes: state

Supported targets: none

has_character_flag - has a character flag been setCheck flag val date set and days since set.
Example: has_unit_leader_flag = test_flag
has_character_flag = {
	flag = <name> (mandatory)
	value < <int> (optional)
	date > <date> (optional)
	days > <int> (optional)
}
Supported scopes: character

Supported targets: ???

any_core_state - Check if any of the country core states for scope meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

all_core_state - Check if all of the country core states for the scope meets the trigger. tooltip=key can be defined to override title
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

has_ideology - has_ideology = stalinism - Checks if the current character has a country leader role matching the sub-ideology
Supported scopes: character

Supported targets:

not_already_hired_except_as - not_already_hired_except_as = <slot> - For characters with several advisor roles, checks if the current character is already assigned in another advisor slot.
example: let's say a character can be a political advisor and a theorist. But they should only be hired in one role, never both at the same time.
then you may set in the advisor available trigger :
	advisor = {
		slot = political_advisor
		available = { not_already_hired_except_as = political_advisor }
		...
	}
	advisor = {
		slot = theorist
		available = { not_already_hired_except_as = theorist }
		...
	}

Supported scopes: character

Supported targets:

has_country_leader_ideology - Checks the Ideology of the active country leader
Supported scopes: country

Supported targets:

has_ideology_group - has_ideology_group = communism - Checks if the current character has a country leader role matching the ideology group
Supported scopes: character

Supported targets:


=================

== EFFECT DOCUMENTATION ==
add_legitimacy - add_legitimacy = 10. Adds legitimacy to Scope country. Value has to be 0-100.
Supported scopes: country

Supported targets:

add_stability - Adds the stability to the country in scope. Example: add_stability = 5
Supported scopes: country

Supported targets:

add_manpower - Adds manpower to the country in scope or locally on a state if in state scope
Supported scopes: state country

Supported targets: none

custom_effect_tooltip - Shows just a custom tooltip
Supported scopes: any

Supported targets:

set_capital - move capital to state
Example:
set_capital = {
	state = 1234
	remember_old_capital = no #default = yes
}
Supported scopes: country

Supported targets:

add_state_core - add core on state
Supported scopes: country

Supported targets:

remove_state_core - remove core on state
Supported scopes: country

Supported targets:

change_tag_from - Changes player to other country
Supported scopes: any

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_province_modifier - Adds static modifiers to specified province.
add_province_modifier = {
	static_modifiers = { mod_1 mod_2 }
Select 1 province:
	province = 500
Or use:
	province = {
		id = 500 id = 501 id = 502 (evaluate for specified provinces)
		all_provinces (includes all in current state)
		limit_to_coastal (only coastal provinces)
		limit_to_border (only provinces bordering different country)
		limit_to_naval_base (only provinces with a naval base)
		limit_to_victory_point (only provinces with a VP)
	}
}
Supported scopes: state

Supported targets: none

set_country_flag - set country flag
Supported scopes: country

Supported targets:

clr_country_flag - clear country flag
Supported scopes: country

Supported targets:

set_global_flag - set global flag
Supported scopes: any

Supported targets:

clr_global_flag - clear global flag
Supported scopes: any

Supported targets:

remove_building - Removes specified building in specified state or province
Supported scopes: state country

Supported targets: none

release - releases specified country as a puppet using your owned states
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

every_country - "Executes children effects on every Country (or \"random_select_amount\" of random country if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.
ex:
every_country = {
	tooltip = my_loc_key # Optional
	random_select_amount = 3 # Optional
	display_individual_scopes = yes # Optional - default = no
	... country scope effects ...
}"
Supported scopes: any

Supported targets:

random_country - Executes children effects on random country that fulfills the "limit" trigger.
Supported scopes: any

Supported targets:

every_neighbor_country - "Executes children effects on every neighbor Country of the country in scope (or \"random_select_amount\" of random country if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.
ex:
SOV = {
	every_neighbor_country = {
		tooltip = my_loc_key # Optional
		random_select_amount = 3 # Optional
		display_individual_scopes = yes # Optional - default = no
		... country scope effects ...
	}
}"
Supported scopes: country

Supported targets:

random_neighbor_country - Executes children effects on random neighbor country that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

add_relation_rule_override - Adds an override rule to the country's relation to other countries. If there are multiple applicable overrides for a rule, then they are combined using AND logic for positive rules (e.g. can_access_market) and OR logic for negative rules (e.g. can_not_declare_war).
The description of the effect is based on the trigger or the target country.The description when using the rule override is based: on the target country; the trigger at the time of effect evaluation; or the provided usage_desc.
The following rules are currently supported: can_send_volunteer, can_access_market
Alternative 1:
add_relation_rule_override = {
 target = GER # [Required] Target country usage_desc = REASON_DESCRIPTION # [Optional] usage description can_not_declare_war = yes # [Required]
}
Alternative 2:
add_relation_rule_override = {
 trigger = is_democratic_country # [Required] Named trigger usage_desc = DEMOCRATIC_COUNTRY # [Optional] usage description can_not_declare_war = yes # [Required]
}

Supported scopes: country

Supported targets: THIS

remove_relation_rule_override - Removes an override rule to the country's relation to other countries.The desc key can be used to supply a custom description for the effect when a named trigger is used as key
Alternative 1:
remove_relation_rule_override = {
 target = GER # [Required] Target country can_not_declare_war = yes
}
Alternative 2:
remove_relation_rule_override = {
 trigger = is_democratic_country # [Required] Named trigger can_not_declare_war = yes
}

Supported scopes: country

Supported targets: THIS

every_enemy_country - "Executes children effects on every enemy Country of the country in scope (or \"random_select_amount\" of random country if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.
ex:
SOV = {
	every_enemy_country = {
		tooltip = my_loc_key # Optional
		random_select_amount = 3 # Optional
		display_individual_scopes = yes # Optional - default = no
		... country scope effects ...
	}
}"
Supported scopes: country

Supported targets:

random_enemy_country - Executes children effects on random enemy country that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

country_event - Fires a country event.
Example:
country_event = {
	id = germany.75 # The event to fire.
	# Optional Fields:
	hours = 12 # The number of hours to wait before firing the event.
	days = 5 # The number of days to wait before firing the event.
	months = 1 # The number of months to wait before firing the event, where a month is treated as 30 days.
	# Note:  hours, days, and months can all be used and will simply be added together.
	random_hours = 18 # A random amount of hours to be added to the delay before firing, from 0 up to but not including random_hours.
	random_days = 2 # A random amount of days to be added to the delay before firing, from 0 up to but one hour less than random_days.
	# Note:  random_hours and random_days can both be used and will simply be added together.
	random = 6 # Equivalent to random_hours; preserverd for backwards compatibility.
	random = { chance = 50 ... } # Specify a set of child effects to execute as part of this effect, with a percentage chance of randomly happening or not (as a group, not individually).
	tooltip = germany.75.t # Manually specify which tooltip to use for this effect.
}

Supported scopes: country

Supported targets:

state_event - Fires a state event.
Example:
state_event = {
	id = usa.61 # The event to fire.
	# Optional Fields:
	hours = 12 # The number of hours to wait before firing the event.
	days = 5 # The number of days to wait before firing the event.
	months = 1 # The number of months to wait before firing the event, where a month is treated as 30 days.
		# Note:  hours, days, and months can all be used and will simply be added together.
	random_hours = 18 # A random amount of hours to be added to the delay before firing, from 0 up to but not including random_hours.
	random_days = 2 # A random amount of days to be added to the delay before firing, from 0 up to but one hour less than random_days.
		# Note:  random_hours and random_days can both be used and will simply be added together.
	random = 6 # Equivalent to random_hours; preserverd for backwards compatibility.
	random = { chance = 50 ... } # Specify a set of child effects to execute as part of this effect, with a percentage chance of randomly happening or not (as a group, not individually).
	tooltip = usa.61.t # Manually specify which tooltip to use for this effect.
	trigger_for = GER # Indicate which country this state effect applies to. Value can be any of the following:
		# controller - The country that currently controls the state.
		# owner - The country that currently owns the state.
		# occupied - The country that has been occupied in the state by the current controller.
		# from - The country of the from scope.
		# prev - The country of the prev scope.
		# root - The country of the root scope.
		# TAG - A hard-coded country tag such as GER or ENG.
}

Supported scopes: state country

Supported targets: none

remove_province_modifier - Removes a static modifiers to specified province
remove_province_modifier = {
	static_modifiers = { mod_1 mod_2 }
Select 1 province:
	province = 500
Or use:
	province = {
		id = 500 id = 501 id = 502 (evaluate for specified provinces)
		all_provinces (includes all in current state)
		limit_to_coastal (only coastal provinces)
		limit_to_border (only provinces bordering different country)
		limit_to_naval_base (only provinces with a naval base)
		limit_to_victory_point (only provinces with a VP)
	}
}
Supported scopes: state

Supported targets: none

set_variable - Sets a variable to a value or another variable
Example: set_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: any

Supported targets:

add_ai_strategy - Adds strategy entry to country AI
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

random - a random effect
Supported scopes: any

Supported targets:

random_list - Picks a random effect from the list based on the weight associated.
The weight can be a variable valid in the current scope.
Example:
random_list = {
	# enable logging the dice role in game.log
	log = yes
	seed = var_name/const/random #if specified, it will use this seed instead of scope seed for picking a random
	# some effect with an associated weight
	10 = { add_political_power=10 }
	10 = { add_political_power=100 }
	some_var = { add_political_power=1000 }
}
Supported scopes: any

Supported targets:

white_peace - Makes a white peace between the two countries if at war. ROOT is considered the winner while the target tag is considered the loser (which affects things like name of the PC as well as PC related on-actions).
Example:
SOV = {
  white_peace = {
    tag = FIN
    message = FIN_agree_peace
  }
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

hidden_effect - Effect not shown in tooltips
Supported scopes: any

Supported targets:

if - a conditional effect
Supported scopes: any

Supported targets:

add_state_claim - add claim on state
Supported scopes: country

Supported targets:

remove_state_claim - remove claim on state
Supported scopes: country

Supported targets:

add_opinion_modifier - Add opinion modifier(s) to target(s)
Supported scopes: country

Supported targets: ???

teleport_railway_guns_to_deploy_province - Teleport the target country's railway guns to the province to which railway guns are deployed.
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

remove_opinion_modifier - Remove opinion modifier from target
Supported scopes: country

Supported targets: ???

create_railway_gun - Create railway gun effect, just like in OOB, example:
create_railway_gun = {
	equipment = railway_gun_equipment_1
	name = "Created Railway Gun" #optional
	location = 12406 #optional, created in capital otherwise
}
Supported scopes: any

Supported targets:

clear_rule - Cleares rule added by set_rule. In the example it will clear can_not_declare_war = yes set by set_rule :
clear_rule = {
 can_not_declare_war = yes
}
Supported scopes: country

Supported targets:

create_country_leader - creates a leader and adds it to proper party in country
if a character with the same token, or the same name already exists, then just add the country leader role.

Example:
create_country_leader = {
	name = "Leader Name"
	name = XXX_leader_name # optional, faster to find an already existing character
	desc = "LEADER_DESC_LOCALIZATION_TAG"
	picture = "Portrait_leader_name.dds" # picture = "...." also supported for backwards compatibility
	expire = "1965.1.1"
	ideology = despotism
	traits = {
		the_director
	}
}
Supported scopes: country

Supported targets:

random_subject_country - Executes child effects on random subject country that fulfills the limit.
Supported scopes: country

Supported targets:

every_subject_country - "Executes children effects on every subject Country of the country in scope (or \"random_select_amount\" of random country if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.
ex:
SOV = {
	every_subject_country = {
		tooltip = my_loc_key # Optional
		random_select_amount = 3 # Optional
		display_individual_scopes = yes # Optional - default = no
		... country scope effects ...
	}
}"
Supported scopes: country

Supported targets:

log - Print message to game.log, console (if visible) and history logger (if running. you can use category|log to specify a category), Can be localized
Supported scopes: any

Supported targets:

create_unit - Create unit effect, just like in OOB, example:
create_unit = {
	# unit detauls
	division = "name = \"1. Northern Redemption Army\" division_template = \"Redemption Army\" start_experience_factor = 0.5"
	# country to spawn unit for
	owner = MAN


	# a prov id can be specified
	prioritize_location = 12406

	# can be set to yes to be able to spawn units on enemy provs.
	allow_spawning_on_enemy_provs = no
	# province controllers can be scored using this scorer. otherwise it will prio your owned provs first, friendly provs second.
	# it will also prio provs with scores and less units firstl
	country_score = {
		base = 100

		modifier = {
			tag = MAN
			add = 100
		}
	}
   count = 1 # can be specified to spawn more than one units
   id = 42 # an id can be given to delete units later on}
Supported scopes: any

Supported targets:

activate_advisor - Place an advisor in their respective role slot

Example:
activate_advisor = GER_character_token_air_chief

Supported scopes: country

Supported targets:

deactivate_advisor - Dismiss an advisor from their currently occupied role slot

Example:
deactivate_advisor = GER_character_token_air_chief

Supported scopes: country

Supported targets:

sound_effect - Plays sound effect
Supported scopes: any

Supported targets:

add_equipment_subsidy - "Adds an equipment subsidy to the country in scope.
Example:
GER = {
	add_equipment_subsidy =
	{
		cic = 100 # Amount of CIC for the subsidy.
		equipment_type = support_equipment # The target archetype of the subsidy
		seller_tags = {RAJ AST} # The possible sellers that this subsidy can apply to. [Mutually exclusive with seller_trigger]
		seller_trigger = scripted_trigger_name # The name of a scripted trigger to check whether to apply the subsidy or not. [Mutually exclusive with seller_tags]
	}
}"
Supported scopes: country

Supported targets:

remove_civil_war_target - Removes a country as a civil war target (removed from both sides)

Example:
remove_civil_war_target = TAG
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_trait - add trait from specified list to character.
add_trait = {
	character = GER_character_token # optional if inside character scope
	trait = brilliant_strategist
	slot = political_advisor #Only required for updating advisor
	ideology = fascism_ideology #Only required for updating country leader
}
Supported scopes: country character

Supported targets:

remove_trait - remove trait from specified list to character.
remove_trait = {
	character = GER_character_token # optional if inside character scope
	trait = brilliant_strategist
	slot = political_advisor #Only required for updating advisor
	ideology = fascism_ideology #Only required for updating country leader
}
Supported scopes: country character

Supported targets:

promote_leader - promotes general to field marshal
Supported scopes: character

Supported targets:

randomize_weather - Randomize weather effect
Supported scopes: any

Supported targets: ???

break_embargo - breaks an existing embargo from ROOT to the specified tag. Note this will only work if used on the sending country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

division_template - add a division template to country
Supported scopes: country

Supported targets:

destroy_unit - destroy currently scoped unit
Supported scopes:

Supported targets:

random_state_division - Executes children effects on a random division that fulfill the "limit" trigger on a state. tooltip=key can be added to override tooltip title
Supported scopes: state

Supported targets: none CAPITAL

every_state_division - "Executes children effects on every Division currently in the state in scope (or \"random_select_amount\" of random divisions if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching division with display_individual_scopes.
ex:
SOV = {
	every_state_division = {
		tooltip = my_loc_key # Optional
		random_select_amount = 3 # Optional
		display_individual_scopes = yes # Optional - default = no
		... division scope effects ...
	}
}"
Supported scopes: state

Supported targets: none CAPITAL

add_history_entry - add_history_entry = {
key = custom_localized_key
subject = "Custom String (not localized)"
allow = yes/no (allow medal award)
}
Supported scopes:

Supported targets:

set_air_oob - Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with key "air") on that country.
Only intended to be used within history files.

Example:
set_air_oob = "ENG_1936_Air"
Supported scopes: country

Supported targets:

send_embargo - embargos specified tag
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_occupation_law - "Sets the occupation law for an occupied country, occupied state, or the default occupation law of an occupying country.

- If THIS is a country and it's the same as the PREV country, then THIS's default law is set.
- If THIS is a country and it's different from the PREV country, then PREV's country law override for THIS is set.
- If THIS is a state, then PREV's state law override for THIS is set.

The token default_law is used to remove a country or state override, or to set a country's default law to the law defined with starting_law=yes.

Example:
GER = { set_occupation_law = foreign_civilian_oversight }
GER = { POL = { set_occupation_law = default_law } }
GER = { 123 = { set_occupation_law = military_governor_occupation } }"
Supported scopes: state country

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

change_division_template - change_division_template = "My Template Name"
Supported scopes:

Supported targets:

set_occupation_law_where_available - "See set_occupation_law for basic functionality. What differentiates this effect is that if the law is not available on the given level it will attempt to set it on a level below. I.e. if the law can't be set as the default law it will try to set it on each country, and if that fails it will try to set it on each state. Any existing law overrides below a level at which a law is successfully set will be cleared.

Example:
ITA = { set_occupation_law_where_available = colonial_police } # Set law in all countries/states where it's available.
ITA = { every_occupied_country = { set_occupation_law_where_available = default_law } } # Remove all country and state overrides."
Supported scopes: state country

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_country_leader_ideology - change the ideology of active leader
Supported scopes: country

Supported targets:

add_country_leader_trait - Add country leader trait to the scoped character or scoped country's leader.
In scoped character, will need to give the ideology if the character has several country leader roles.
Example 1: SOV_joseph_stalin = { add_country_leader_trait = underage_monarch }
Example 2: HUN_miklos_horthy = { add_country_leader_trait = { ideology = oligarchism trait = anti_communist } }
Example 3: SOV = { add_country_leader_trait = underage_monarch }
Supported scopes: country character

Supported targets:

remove_country_leader_trait - Remove country leader trait from the scoped character or scoped country's leader.
In scoped character, will need to give the ideology if the character has several country leader roles.
Example 1: SOV_joseph_stalin = { remove_country_leader_trait = underage_monarch }
Example 2: HUN_miklos_horthy = { remove_country_leader_trait = { ideology = oligarchism trait = anti_communist } }
Example 3: SOV = { remove_country_leader_trait = underage_monarch }
Supported scopes: country character

Supported targets:

set_political_party - set popularity of a political party

Example:
set_political_party = {
	ideology = neutrality
	popularity = 50
}
Supported scopes: country

Supported targets:

set_politics - set_politics:
ruling_party = key of new ruling ideology
elections_allowed = yes/no
optional (renames the ruling party and displays correct loc):
long_name = loc_key
name = loc_key
Supported scopes: country

Supported targets:

add_ideas - add idea(s) to country
Supported scopes: country

Supported targets:

remove_ideas - remove idea(s) from country
Supported scopes: country

Supported targets:

add_political_power - add political power to country
Supported scopes: country

Supported targets:

set_political_power - set political power for country
Supported scopes: country

Supported targets:

set_division_force_allow_recruiting - Force allows division recruiting for a division template
Example: set_division_force_allow_recruiting = { division_template = <name> force_allow_recruiting = <bool (default:yes)> }
Supported scopes: country

Supported targets:

set_technology - sets technology level(s) on country. example : set_technology = {
	infantry_weapons = 1
	infantry_weapons1 = 1
	infantry_weapons2 = 1
	improved_infantry_weapons = 1
	popup = no # default is yes. if set to no, no pop up will display for player
}
Supported scopes: country

Supported targets:

gain_xp - Grant experience to the scoped in unit leader. Cannot be used to remove experience.
The unit leader is promoted to the next skill level if applicable.
Example:
gain_xp = 5

Supported scopes: character

Supported targets: ???

create_navy_leader - create navy leader for country
Supported scopes: country

Supported targets:

remove_unit_leader_trait - Remove trait from unit leader
Example: SOV_konstantin_rokossovsky = { remove_unit_leader_trait = media_personality }
Supported scopes: character

Supported targets:

add_unit_leader_trait - Add trait to unit leader.
Example: SOV_konstantin_rokossovsky = { add_unit_leader_trait = media_personality }
Supported scopes: character

Supported targets:

set_state_owner - set owner for state
Supported scopes: country

Supported targets:

delete_unit - delete units of a country. no tooltip is generated. example:

Example:
delete_unit = {
	division_template = template_name # can be filtered a specific template
	id = 42 # can be filtered to a given id in create unit effect
	state = 64 # can be filtered by a given state
	disband = yes # default is no. if set to yes the game will refund equipment/manpower
}
Supported scopes: country

Supported targets:

puppet - Puppets specified country. By default, cancels the puppets existing war relations.
Example 1:
ENG = {
  puppet = ITA
}
Example 2:
ENG = {
  puppet = {
    target = ITA
    end_wars = yes  # Optional, default yes. Will not cancel non-civil wars if set to no.
    end_civil_wars = yes  # Optional, default yes. Will not cancel civil wars if set to no.
  }
}

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_state_controller - set controller for state
Supported scopes: country

Supported targets:

add_random_valid_trait_from_unit - for use ONLY with root scope unit, target scope: character add_random_valid_trait_from_unit = FROM
Supported scopes:

Supported targets:

add_unit_medal_to_latest_entry - add_unit_medal_to_latest_entry = { unit_medals = key }
Supported scopes:

Supported targets:

add_divisional_commander_xp - add divisional commander xp to unit: add_divisional_commander_xp = 10
Supported scopes:

Supported targets:

transfer_state - set owner and controller for state
Supported scopes: country

Supported targets:

set_state_flag - set state flag
Supported scopes: state

Supported targets: none

clr_state_flag - clear state flag
Supported scopes: state

Supported targets: none

set_party_rule - Adds rule to the country's party.
set_party_rule = {
 ideologly = communism # [Required] selection criteria for the party desc = desc_key # a description can be given to rule (you can get original tooltip using DESC key)
 can_not_declare_war = yes
}
Supported scopes: country

Supported targets:

create_faction - create faction of specified name
Supported scopes: country

Supported targets:

add_nuclear_bombs - add nukes to country
Supported scopes: country

Supported targets:

annex_country -
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_building_construction - Starts building construction for amount of levels in specified state or province
Supported scopes: state

Supported targets: none

dismantle_faction - dismantle faction led by the current country
Supported scopes: country

Supported targets:

add_to_faction - adds specified country to faction
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

remove_from_faction - removes specified country from faction
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

give_guarantee - guarantees specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

give_military_access - gives military access to the specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

random_state - Executes children effects on a random state that fulfills the "limit" trigger.
State ids can be specified with the "prioritize" attribute and they will be
picked first if they fulfill the trigger.

Supported scopes: any

Supported targets:

random_owned_state - Executes children effects on random owned state that fulfills the "limit" trigger.
prioritize = { <stateID> <stateID> } to pick those states first if they fulfull the limit
Supported scopes: country

Supported targets:

random_neighbor_state - Executes children effects on random neighbor state that fulfills the "limit" trigger.
Supported scopes: state

Supported targets: none

every_state - "Executes children effects on every State (or \"random_select_amount\" of random state if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching state with display_individual_scopes.
ex:
every_state = {
	tooltip = my_loc_key # Optional
	random_select_amount = 3 # Optional
	display_individual_scopes = yes # Optional - default = no
	... state scope effects ...
}"
Supported scopes: any

Supported targets:

every_owned_state - "Executes children effects on every State owned by the country in scope (or \"random_select_amount\" of random state if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching state with display_individual_scopes.
ex:
SOV = {
	every_owned_state = {
		tooltip = my_loc_key # Optional
		random_select_amount = 3 # Optional
		display_individual_scopes = yes # Optional - default = no
		... state scope effects ...
	}
}"
Supported scopes: country

Supported targets:

every_neighbor_state - "Executes children effects on every State neighboring the state in scope (or \"random_select_amount\" of random state if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching state with display_individual_scopes.
ex:
42 = {
	every_neighbor_state = {
		tooltip = my_loc_key # Optional
		random_select_amount = 3 # Optional
		display_individual_scopes = yes # Optional - default = no
		... state scope effects ...
	}
}"
Supported scopes: state

Supported targets: none

news_event - Fires a news event.
Example:
news_event = {
	id = news.251 # The event to fire.
	# Optional Fields:
	hours = 12 # The number of hours to wait before firing the event.
	days = 5 # The number of days to wait before firing the event.
	months = 1 # The number of months to wait before firing the event, where a month is treated as 30 days.
		# Note:  hours, days, and months can all be used and will simply be added together.
	random_hours = 18 # A random amount of hours to be added to the delay before firing, from 0 up to but not including random_hours.
	random_days = 2 # A random amount of days to be added to the delay before firing, from 0 up to but one hour less than random_days.
		# Note:  random_hours and random_days can both be used and will simply be added together.
	random = 6 # Equivalent to random_hours; preserverd for backwards compatibility.
	random = { chance = 50 ... } # Specify a set of child effects to execute as part of this effect, with a percentage chance of randomly happening or not (as a group, not individually).
	tooltip = news.251.t # Manually specify which tooltip to use for this effect.
}

Supported scopes: country

Supported targets:

declare_war_on - declares war on specified country
Supported scopes: country

Supported targets:

set_relation_rule - DEPRECATED: See add_relation_rule_override
Supported scopes: country

Supported targets: THIS

add_scaled_political_power - add political power to country scaled by the difference in IC between the receiver and another country
Supported scopes: country

Supported targets:

hold_election - Immediately holds an election in the target country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_popularity - add popularity to an ideology in a country

Example:
add_popularity = {
	ideology = neutrality
	popularity = 0.05
}
Supported scopes: country

Supported targets:

remove_ideas_with_trait - Remove all ideas with specified trait from country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

start_civil_war - "Given ideology starts a civil war in the country.
start_civil_war = {
	ideology = revolting ideology
	ruling_party = ruling party for country
	size = 0-1 Size modifier of the revolt. Affects stockpile, army, air and navy as well
	army_ratio = 0-1 Overrides size modifier for army
	navy_ratio = 0-1 Overrides size modifier for navy
	air_ratio = 0-1 Overrides size modifier for air
	states = {...} States that go to the revolter. Use \"all\" to include all states.
	states_filter = {...} States that go to the revolter. Filtering trigger on the states scripted to go to the revolter.
	keep_all_characters = yes - keep all characters on target country side - will ignore all following keep_ parameters - default value = no
	keep_unit_leaders = {...} specify ID of unit leaders that remain with the original country
	keep_unit_leaders_trigger = {...} Trigger for unit leaders to remain with the original country
	keep_political_leader = yes/no # optional, default is no; If yes, the party leader of the revolting ideology will not join the revolter as its leader.
	keep_political_party_members = yes/no # optional, default is no; If yes, it will keep the non main leaders of the party leaders in original country
	 ... effect list ... # you can list effects that will run on civil war country
}"
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_unit_organization - set unit organization to current * value: set_unit_organization = 0.5, values between 0 and 1
Supported scopes:

Supported targets:

retire_country_leader - retires a country leader and removes him as leader of his party, making the next in line the new party and country leader
Supported scopes: country

Supported targets:

kill_country_leader - kills a country leader and removes him completely, making the next in line the new party and country leader
Supported scopes: country

Supported targets:

release_puppet - releases specified country as puppet using states you own
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

create_wargoal - creates wargoal for country in scope
Supported scopes: country

Supported targets:

add_claim_by - Add state claim by country.
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

remove_claim_by - Removes state claim by country.
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_core_of - Add state as core of country
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

remove_core_of - Removes state as core of country
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

army_experience - add army experience for country
Supported scopes: country

Supported targets:

navy_experience - add naval experience for country
Supported scopes: country

Supported targets:

air_experience - add air experience for country
Supported scopes: country

Supported targets:

save_event_target_as - save an event target
Supported scopes: any

Supported targets:

save_global_event_target_as - save a global event target
Supported scopes: any

Supported targets:

clear_global_event_target - clear a global event target
Supported scopes: any

Supported targets:

clear_global_event_targets - clear all global event targets
Supported scopes: any

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

unlock_national_focus - unlocks a focus for a country
Supported scopes: country

Supported targets:

add_tech_bonus - adds a limited use tech bonus
Supported scopes: country

Supported targets:

set_demilitarized_zone - sets the demilitarized status for currently scoped state
Supported scopes: state

Supported targets: none

add_research_slot - Adds a research slot (negative values subtracts)
Supported scopes: country

Supported targets:

set_research_slots - Sets the number of research slots
Supported scopes: country

Supported targets:

set_border_war - starts a border war in a state with neighbouring state that also has border war
Supported scopes: state

Supported targets: none

set_equipment_fraction - Modify all equipments by factor
Supported scopes: country

Supported targets:

add_threat - Adds country threat
Supported scopes: country

Supported targets:

send_equipment - Sends to target scope specified amount of equipment.
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_rule - Adds rule to country. This one overrides all other rules on country
set_rule = {
 desc = desc_key # A description of why the rule is set (you can get original tooltip using DESC key)
 can_not_declare_war = yes
}
Supported scopes: country

Supported targets:

diplomatic_relation - Set up a diplomatic relation between two nations. Example:
diplomatic_relation = {
	country = POR #target country
	relation = military_access #type of relation
	active = yes #yes to add relation, no to cancel existing one
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

effect_tooltip - Shows just tooltip of effects
Supported scopes: any

Supported targets: ???

add_resource - Adds/removes resource production to state

Example:
add_resource = {
  type = steel #resource type to add/destroy  amount = 5 #amount to add
  state = 42 #can be also read from scope
  days = 60 #a resource can be added/removed temporarily
  show_state_in_tooltip = no #Should we show in which state we add the resource(default = yes)?
}

Supported scopes: state country

Supported targets: none

remove_unit_leader - remove a unit leader ( remove_unit_leader=ID )
Supported scopes: country character

Supported targets:

add_timed_idea - "Add a time-limited idea to country in scope
ex:
SOV = {
	add_timed_idea = {
		idea = my_idea_id
		days = 5
	}
	add_timed_idea = {
		idea = my_idea_id
		years = 1
		months = 2
		days = 5
		# NB: at least 1 of year/month/days is mandatory
		# NB: accept positive integer or variables
		# NB: tooltip will use the same year/month/day format as input
	}
}"
Supported scopes: country

Supported targets:

end_puppet - Stops specefied country being a puppet of current country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

load_oob - Immediately loads an Order of Battle (OOB) file.

Example:
load_oob = "ENG_1936"
Supported scopes: country

Supported targets:

create_import - Creates trade between two countries
Supported scopes: country

Supported targets:

add_named_threat - Adds country threat
Supported scopes: country

Supported targets:

set_province_controller - set controller for province
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_major - Sets mandatory major country flag. A country can still become a major if their industry is strong enough and they are not a subject.
Example:
DEN = { set_major = yes }
Supported scopes: country

Supported targets:

create_field_marshal - create field marshal for country
Supported scopes: country

Supported targets:

create_corps_commander - create corps commander for country
Supported scopes: country

Supported targets:

goto_province - Goes to stated province.
Supported scopes: country

Supported targets:

goto_state - Goes to stated state.
Supported scopes: any

Supported targets:

leave_faction - Country leaves the faction
Supported scopes: country

Supported targets:

complete_national_focus - completes a focus for a country
Supported scopes: country

Supported targets:

set_party_name - change partyname for an ideology in a country
Supported scopes: country

Supported targets:

add_extra_state_shared_building_slots - add extra shared building slot to state
Supported scopes: state

Supported targets: none

reverse_add_opinion_modifier - Add opinion modifier(s) to target(s)
Supported scopes: country

Supported targets: ???

add_to_war - adds country to the specified war:
ENG = {
	add_to_war = {
	  targeted_alliance = SOV # Country to which side we want to join
	  enemy = PER # Which country we want to declare war on
	  hostility_reason = asked_to_join # The reason for joining the war
	  single_target_only = yes # yes if we want to target only the given country and not all enemies of targeted_alliance
  }
}
Supported scopes: country

Supported targets:

show_ideas_tooltip - show what idea does
Supported scopes: country

Supported targets:

create_equipment_variant - Creates a new equipment variant.
Example:
create_equipment_variant = {
	name = "Yorktown Class" # Optional.
	name_group = USA_CV_HISTORICAL # Optional. If not set, parent's name group will be inherited.
	type = ship_hull_carrier_1 # Must be a type and not an archetype.
	allow_without_tech = yes # Optional. Default no. If yes, create the variant even if the type hasn't been unlocked yet. Otherwise created the variant once the type research completes.
	parent_version = 3 # Default 0. If not found the default variant will be used (or created).
	obsolete = yes # Optional. Default no.
	mark_older_equipment_obsolete = yes # Optional. Default no. Marks all older (non-chassis) equipment variants as obsolete as long as the following matches: Archetype, niche, mission set (for planes).
	role_icon_index = 3 # Optional. Default 'auto', leverage AI design logic.
	upgrades = { # Optional. The level on each upgrade is inherited from the parent.
		ship_deckspace_upgrade = 1
		carrier_armor_upgrade = 2
	}
	modules = { # Optional. The module installed in each slot is inherit from the parent.
		fixed_ship_engine_slot = carrier_ship_engine_2
		fixed_ship_secondaries_slot = empty # Clears the slot if the parent has any module installed.
	}
	model = "GER_light_armor_2_entity" # Optional.
	icon = "gfx/interface/technologies/ger_basic_light_tank.dds" # Optional. GFX names are also supported e.g. "GFX_GER_basic_light_tank_medium".
    design_team = mio:my_mio_token # Optional. accepts mio:token, variable or keyword
}
Supported scopes: country

Supported targets:

add_equipment_production - "Creates a new production line for the input equipment.
ex:
GER = {
	add_equipment_production = {
			equipment = {
					type = ship_hull_cruiser_submarine
					creator = "ITA"
					version_name = "Cagni Class"
			}
			name = "Ammiraglio Millo"
			requested_factories = 1 #Optional
			progress = 0.35 # Optional
			efficiency = 0.1 # Optional
			amount = 2 # Optional, accepts value or variable
			industrial_manufacturer = mio:generic_mio_organization_ship_submarine # Optional, accepts mio:token, variable or keyword
	}
}
}"
Supported scopes: country

Supported targets:

add_ace - adds an air ace
Supported scopes: country

Supported targets:

random_owned_controlled_state - Executes children effects on random owned and controlled state that fulfills the "limit" trigger.
prioritize = { <stateID> <stateID> } to pick those states first if they fulfull the limit
Supported scopes: country

Supported targets:

ai_message - ai message... ?
Supported scopes: country

Supported targets:

every_other_country - "Executes children effects on every Country different from the one in scope (or \"random_select_amount\" of random country if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.
ex:
SOV = {
	every_other_country = {
		tooltip = my_loc_key # Optional
		random_select_amount = 3 # Optional
		display_individual_scopes = yes # Optional - default = no
		... country scope effects ...
	}
}"
Supported scopes: country

Supported targets:

random_other_country - Executes children effects on random country that fulfills the "limit" trigger. Excludes current country
Supported scopes: any

Supported targets:

add_equipment_to_stockpile - Add or remove equipment from country stockpiles.
Example:
add_equipment_to_stockpile = {
	type = strat_bomber_equipment_2
	amount = 100 # May be a variable. Equipment will be removed if the value is negative.
	producer = USA # Optional. If not specified the effect will be applied to all creators.
}
Supported scopes: country

Supported targets: ???

swap_ideas - swap 2 ideas.
 Syntax: swap_idea = {
  remove_idea = <idea>
  add_idea = <idea>
  add_days = 10 #optional, will add/subtract duration for new idea that replaces the old one with duration
  days = 25 #optional, will set the duration for the new idea
}
Supported scopes: country

Supported targets:

damage_building - Damages buildings in the current state.
Example: damage_building = { type = industrial_complex damage = 2.4 }
Also has the variable province = x when targeting provincial buildings.
Supported scopes: state

Supported targets: ??? none

release_autonomy - releases specified country with specified level of autonomy.
Example:
ENG = {
 release_autonomy = {
  target = RAJ
  autonomy_state = autonomy_puppet
  freedom_level = 0.5
  release_non_owned_controlled = yes # default no. if yes you will release states you only control as well  force_change_controller_for_non_ally_controlled = yes # default = no. if yes it will change the controller of the states you or your allies don't control (ie if an enemy occupying it, the ownership will change but not controller) }
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_autonomy - makes autonomy of specified level and country.
Example:
set_autonomy = {
  target=ENG
  autonomy_state = autonomy_puppet
  freedom_level=0.5
  end_wars  = yes # default yes. will not cancel non-civil wars if set to no
  end_civil_wars = yes # default yes. will not cancel civil wars if set to no
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_to_tech_sharing_group - Adds country to technology sharing group of specified name.
Example: add_to_tech_sharing_group = commonwealth_research
Supported scopes: country

Supported targets:

remove_from_tech_sharing_group - Removes country from technology sharing group of specified name.
Example: remove_from_tech_sharing_group = commonwealth_research
Supported scopes: country

Supported targets:

add_autonomy_score - Adds exact freedom score to the autonomy.
Example:
add_autonomy_score={
value=50
localization="LOC_KEY"
}
Supported scopes: country

Supported targets:

modify_tech_sharing_bonus - Modify country bonus for specified technology sharing group.
Example: modify_tech_sharing_bonus  = { id = commonwealth_research bonus = 0.2 }
Supported scopes: country

Supported targets:

add_autonomy_ratio - Adds % freedom score to the autonomy.
Example:
add_autonomy_ratio={
value=0.005
localization="LOC_KEY"
}
Supported scopes: country

Supported targets:

set_cosmetic_tag - Sets country cosmetic tag.
Example: INS = { set_cosmetic_tag = IN1 }
Supported scopes: country

Supported targets:

drop_cosmetic_tag - Drops country cosmetic tag.
Example: INS = { drop_cosmetic_tag }
Supported scopes: country

Supported targets:

transfer_ship - Transfers ship from scope country to target country.
Example:
ENG={
  transfer_ship={
    prefer_name = "HMS Achilles"
    type = light_cruiser
    target = NZL
    exclude_refitting = yes #optional, default is no; Exclude ships currently being refitted from the search.
  }
}
Supported scopes: country

Supported targets:

set_state_category - Sets the category of a state
Example: set_state_category = large_town
Supported scopes: state

Supported targets: none

modify_global_flag - modify global flag. Only modifies if flag already exists.
Example: modify_global_flag = { flag = <name> value = <number> }
Supported scopes: any

Supported targets:

modify_country_flag - modify country flag. Only modifies if flag already exists.
Example: modify_country_flag = { flag = <name> value = <number> }
Supported scopes: country

Supported targets:

modify_state_flag - modify state flag. Only modifies if flag already exists.
Example: modify_state_flag = { flag = <name> value = <number> }
Supported scopes: state

Supported targets: none

add_state_modifier - Adds a modifier to the state
Example: add_state_modifier = { modifier = { local_non_core_manpower = 0.2 } }
Supported scopes: state

Supported targets: none

set_province_name - set_province_name = { id = <province id> name = <string> } - Set name for a province
Supported scopes: any

Supported targets:

set_state_name - set_state_name = <string> - Set the current states name
Supported scopes: state

Supported targets: none

reset_province_name - reset name of a province back to localization one.
Supported scopes: any

Supported targets:

reset_state_name - reset_state_name = yes - Resets the current states name to the original one
Supported scopes: state

Supported targets: none

create_production_license - Creates an equipment production license. If the selection criteria fails to match a variant no license will be created.
Example:
create_production_license = {
	target = TAG # Receiver of the license.
	cost_factor = 1.0 # Optional. Cost factor for production of the equipment.
	new_prioritised = no # Optional. Default yes. Ignore 'version' (but not 'version_name') below and instead select the latest variant.
	equipment = {
		type = small_plane_naval_bomber_airframe # The type of the variant to select. Must be specified.
		version = 1 # Optional. Default 0. Select the variant with the given version.
		version_name = "Do 22" # Optional. Select the variant with the given name.
	}
}
Supported scopes: country

Supported targets:

add_relation_modifier - Adds a static modifier between current scope and target
Example: add_relation_modifier = {
	target = TAG # target of the relation
	modifier = static_modifier_name_here #Name of the modifier added
	}
}
Supported scopes: country

Supported targets: THIS

remove_relation_modifier - Removes a static modifier between current scope and target
Example: add_relation_modifier = {
	target = TAG # target of the relation
	modifier = static_modifier_name_here #Name of the modifier added
	}
}
Supported scopes: country

Supported targets: THIS

set_building_level - Sets specific level of a building construction for amount of levels in specified state or province
Supported scopes: state

Supported targets: none

set_stability - Sets the stability to the country in scope. Example: set_stability = 80
Supported scopes: country

Supported targets:

add_war_support - Adds the war support to the country in scope. Example: add_war_support = 5
Supported scopes: country

Supported targets:

set_war_support - Sets the war support to the country in scope. Example: set_war_support = 80
Supported scopes: country

Supported targets:

random_unit_leader - "Executes children effects on a random Unit Leader of the country in scope, that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
ex: GER = {
  random_unit_leader = {
	tooltip = my_loc_key # Optional
	include_invisible = yes # Optional - default = no
    ... character scope effects ...
  }
}"
Supported scopes: country

Supported targets:

every_unit_leader - "Executes children effects on every Unit Leader (or \"random_select_amount\" of random leader if specified) of the country in scope, that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching unit leader with display_individual_scopes.
ex: GER = {
  every_unit_leader = {
	tooltip = my_loc_key # Optional
	random_select_amount = 3 # Optional
	include_invisible = yes # Optional - default = no
	display_individual_scopes = yes # Optional - default = no
    ... character scope effects ...
  }
}"
Supported scopes: country

Supported targets:

random_army_leader - "Executes children effects on a random Army Leader of the country in scope, that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
ex: GER = {
  random_army_leader = {
	tooltip = my_loc_key # Optional
	include_invisible = yes # Optional - default = no
    ... character scope effects ...
  }
}"
Supported scopes: country

Supported targets:

every_army_leader - "Executes children effects on every Army Leader (or \"random_select_amount\" of random leader if specified) of the country in scope, that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
ex: GER = {
  every_army_leader = {
	tooltip = my_loc_key # Optional
	random_select_amount = 3 # Optional
	include_invisible = yes # Optional - default = no
    ... character scope effects ...
  }
}"
Supported scopes: country

Supported targets:

random_navy_leader - "Executes children effects on a random Navy Leader of the country in scope, that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
ex: GER = {
  random_navy_leader = {
	tooltip = my_loc_key # Optional
	include_invisible = yes # Optional - default = no
    ... character scope effects ...
  }
}"
Supported scopes: country

Supported targets:

every_navy_leader - "Executes children effects on every Navy Leader (or \"random_select_amount\" of random leader if specified) of the country in scope, that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching unit leader with display_individual_scopes.
ex: GER = {
  every_navy_leader = {
	tooltip = my_loc_key # Optional
	random_select_amount = 3 # Optional
	include_invisible = yes # Optional - default = no
	display_individual_scopes = yes # Optional - default = no
    ... character scope effects ...
  }
}"
Supported scopes: country

Supported targets:

transfer_navy - Transfers the entire navy from scope country to target country. Does not support carriers!
Example:
ENG={
	target = NZL
	is_government_in_exile = yes #optional, default is no; the navy will be tagged as exile if this is yes so that it will return to owner if they return from exile.
}
Supported scopes: country

Supported targets:

destroy_ships - Destroys ships of specified country and amount
Example:
ENG={
	destroy_ships = {
		type=light_cruiser
		count=all #or number
	}
}
Supported scopes: country

Supported targets:

set_unit_leader_flag - set unit leader flag
This effect is deprecated in favor of set_character_flag.
Supported scopes: character

Supported targets:

modify_unit_leader_flag - modify unit leader flag. Only modifies if flag already exists.
Example: _modify_unit_leader_flag_ = { flag = <name> value = <number> }
This effect is deprecated in favor of modify_character_flag.
Supported scopes: character

Supported targets:

clr_unit_leader_flag - clear unit leader flag
This effect is deprecated in favor of clr_character_flag.
Supported scopes: character

Supported targets:

set_nationality - Transfer from one country to another for the character in scope.
Note that this is not related to operative nationalities added via add_nationality.
Note that for operative, this will temporarily lock their slot on the country of origin.

Examples:
SOV = { # origin country
	my_character = {
	set_nationality = POL # target country
}
SOV = { # origin country
	set_nationality = {
		target_country = POL
		character = my_character
	}
}

Supported scopes: country character

Supported targets:

demote_leader - Demotes field marshal to general
Supported scopes: character

Supported targets:

retire - Retires character, use in character scope
Supported scopes: character

Supported targets:

add_command_power - add command power to country
Supported scopes: country

Supported targets:

unlock_decision_tooltip - show what decision does
Example: unlock_decision_tooltip = some_decision_here
Example:
unlock_decision_tooltip = {
    decision = <some_decision>
    show_effect_tooltip = yes # default is no
    show_modifiers = yes # default is no
}

Supported scopes: country

Supported targets:

set_can_be_fired_in_advisor_role - "Set the value (yes/no) to the "can be fired" flag in Advisor Role. When set to No, the advisor cannot be fired once hired.

Example:
some_country_scope = {
  set_can_be_fired_in_advisor_role = {
    character = my_character_token # or keyword, variable...
    slot = political_advisor # mandatory if the character has several advisor role
    value = no
  }
}

some_character_scope = {
  set_can_be_fired_in_advisor_role = {
    slot = political_advisor # mandatory if the character has several advisor role
    value = no
  }
}"
Supported scopes: country character

Supported targets:

random_military_industrial_organization - "Executes children effects on a random Military Industrial Organisation of the country in scope, that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
ex: GER = {
  random_military_industrial_organization = {
	tooltip = my_loc_key # Optional
	include_invisible = yes # Optional - default = no
    ... MIO scope effects ...
  }
}"
Supported scopes: country

Supported targets:

add_temporary_buff_to_units - Add buffs to units that are belongs to the army group/navy of this unit leader
Supported scopes: character

Supported targets:

boost_planning - Boost planning of units that are belongs to the army group/navy of this unit leader
Supported scopes: character

Supported targets:

add_region_efficiency - add efficiency factor to strategic region for from country
Supported scopes:

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

modify_building_resources - Modifies resource output of specific building for this country only
Example: modify_building_resources = {
	building = radar_station
	resource = oil
	amount = 2
}
Supported scopes: country

Supported targets:

global_every_army_leader - "Executes children effects on every Army Leader (or \"random_select_amount\" of random leader if specified) for EVERY COUNTRY, that fulfills the \"limit\" trigger.
Better to use every_army_leader if you know the country to search in.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching unit leader with display_individual_scopes.
global_every_army_leader = {
	tooltip = my_loc_key # Optional
	random_select_amount = 3 # Optional
	include_invisible = yes # Optional - default = no
	display_individual_scopes = yes # Optional - default = no
	... character scope effects ...
}"
Supported scopes: country

Supported targets:

add_to_variable - Adds a value or a variable to another one
Example: add_to_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: any

Supported targets:

subtract_from_variable - Subtracts a value or a variable to another one
Example: subtract_from_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: any

Supported targets:

multiply_variable - Multiplies a variable to a value or another variable
Example: set_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: any

Supported targets:

divide_variable - Divies a variable to a value or another variable
Example: divide_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: any

Supported targets:

clear_variable - Clears a variable
Example: clear_variable = num_dogs
Supported scopes: any

Supported targets:

add_attack - Adds attack skill to a character
Example: add_attack = 1
Supported scopes: character

Supported targets:

add_defense - Adds defense skill to a unit leader
Example: add_defense = 1
Supported scopes: character

Supported targets:

add_planning - Adds planning skill to a unit leader
Example: add_planning = 1
Supported scopes: character

Supported targets:

unlock_decision_category_tooltip - localizes name of category and displays tooltip that shows it will be unlocked
Supported scopes: country

Supported targets:

activate_mission_tooltip - shows mission will activate and name. Activation needs to be handled manually, effect is just an easier way to display name of mission.
Example: unlock_mission_tooltip = some_mission_here
Supported scopes: country

Supported targets:

load_focus_tree - Sets what focus tree a country uses, retains finished shared focuses.
Supported scopes: country

Supported targets:

add_logistics - Adds logistics skill to a unit leader
Example: add_logistics = 1
Supported scopes: character

Supported targets:

add_offsite_building - Add an offsite building to a country
Supported scopes: country

Supported targets:

replace_unit_leader_trait - add trait to unit leader
Supported scopes: character

Supported targets:

free_operative - Free an operative
Can be used from a scope and a target that is either a country or a unit leader.
GER = { free_operative = PREV } # where PREV is an operative (unit leader)
free_operative = { captured_by = GER } # where the scope is an unit leader

Supported scopes: country character

Supported targets: THIS ROOT PREV FROM

free_random_operative - Free a random captured operative of a certain tag by a certain tag
Can be used from a country scope of the operative in question.
`all` is optional, default value is no - if set to yes it will free all operatives captured by the target country
GER = { free_random_operative = { all = yes captured_by = ENG } }

Supported scopes: country

Supported targets: ???

add_max_trait - Adds a max assignable trait slot for a general
Example: add_max_trait = 1
Supported scopes: character

Supported targets:

add_skill_level - Adds a skill level to a unit leader
Example: add_skill_level = 1
Supported scopes: character

Supported targets:

add_to_temp_variable - Adds a value or a variable to a temp variable
Example: add_to_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: any

Supported targets:

subtract_from_temp_variable - Subtracts a value or a variable to a temp variable
Example: subtract_from_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: any

Supported targets:

multiply_temp_variable - Multiplies a temp variable to a value or another variable
Example: set_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: any

Supported targets:

divide_temp_variable - Divies a temp variable to a value or another variable
Example: divide_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
	if_zero = 0 # the value to assign if the divisor is zero (default is zero)
}
Supported scopes: any

Supported targets:

set_temp_variable - Sets a temp variable to a value or another variable
Example: set_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: any

Supported targets:

add_timed_unit_leader_trait - add a timed trait to unit leader
Supported scopes: character

Supported targets:

clamp_variable - Clamps a variable between two values or variables.
Note that either min or max can be omitted.
The order in which the operations are applied is Max( Min( var, max ), min ).
An error will be logged if max < min as the result will be more often than not undesired (requires the game to run in debug mode).
Example: clamp_variable = {
    var = num_dogs
    min = 0
    max = num_cats
}

Supported scopes: any

Supported targets:

clamp_temp_variable - Clamps a temp variable a variable bet ween two a values or another variables
Example: clamp_temp_variable = {
var = num_dogs
min = 0
max = num_cats
}
Supported scopes: any

Supported targets:

start_border_war - start a border war between two states. Example:
start_border_war = {
	change_state_after_war = no #overrides the transfer of state at the end of war
	combat_width = 80 #combat width for border war
	minimum_duration_in_days = 14 #minimum duration for combat
	attacker = {
		state = 527 # state to start border war
		num_provinces = 4 #number of provinces we want border war to be
		on_win = japan_border_conflict.2 #effect to call if wins
		on_lose = japan_border_conflict.3 #effect to call if loses
		on_cancel = japan_border_conflict.4 #effect to call if cancels
		leader_score = { #score for selecting a leader
			base = 1
			modifier = {
				check_variable = { likes_border_wars = 1 }
				add = 2
			}
		}
		modifier = 0.5 #combat modifier (default value: 0.0)
		dig_in_factor = 0.5 #dig in modifier factor (default value: 1.0)
		terrain_factor = 0.5 #terrain modifier factor(default value: 1.0)
	}

	defender = {
		state = 408 # state to start border war
		num_provinces = 4 #number of provinces we want border war to be
		on_win = japan_border_conflict.2 #effect to call if wins
		on_lose = japan_border_conflict.3 #effect to call if loses
		on_cancel = japan_border_conflict.4 #effect to call if cancels
	}
}

Supported scopes: any

Supported targets:

set_border_war_data - update border war properties
Supported scopes: any

Supported targets:

cancel_border_war - cancel border war between two states
Supported scopes: any

Supported targets:

set_division_template_lock - Set lock status for a division template
Example: set_division_template_lock = { division_template = <name> is_locked = <bool (default:true)> }
Supported scopes: country

Supported targets:

delete_unit_template_and_units - Delete a template and its units
Example: delete_unit_template_and_units = {
division_template = <name>
disband = no #if yes, will refund equipment/manpower. default is no
}
Supported scopes: country

Supported targets:

print_variables - prints all variables in scope and temp variables to a file
Example: print_variables = {
file = log_file
text = header_text
append = yes
print_global = yes
var_list = { a b c } #optional
}
Supported scopes: state country character

Supported targets: none

activate_mission - Activates mission, ignoring its normal trigger conditions. Cannot activate a mission that is already active.
Example: activate_mission = some_mission_here
Supported scopes: country

Supported targets:

remove_mission - Removes mission without running complete or timeout effects.
Example: remove_mission = some_mission_here
Supported scopes: country

Supported targets:

recall_attache - Scope country recalls attache from target country. Example: GER = { recall_attache = CHI } means Germany recalls attache from China.
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

activate_targeted_decision - Activates targeted decisions or mission, ignoring its normal trigger conditions, cooldown and fire only once. Cannot activate if active in interface.
Example: activate_targeted_decision = { target = TAG/STATE decision = decision_id_here
Supported scopes: state country

Supported targets: none

remove_targeted_decision - Removes targeted decisions or mission.
Example: remove_targeted_decision = { target = TAG decision = decision_id_here
Supported scopes: state country

Supported targets: none

modify_timed_idea - "Modify amount of days of a timed idea for the country in scope
ex:
SOV = {
	modify_timed_idea = {
		idea = my_idea_id
		days = 5
		# Add 5 days to the my_idea_id time-limit
	}
	modify_timed_idea = {
		idea = my_idea_id
		days = -5
		# Subtract 5 days to the my_idea_id time-limit
	}
	modify_timed_idea = {
		idea = my_idea_id
		years = 1
		months = 2
		days = variable_name
		# NB: at least 1 of year/month/days is mandatory
		# NB: accept integer or variables
		# NB: tooltip will use the same year/month/day format as input
	}
}"
Supported scopes: country

Supported targets:

activate_decision - Activates specified decision for scope country
Supported scopes: country

Supported targets:

set_truce - Sets a truce between scope country and target for days duration.
Example set_truce = { target = GER days = 90 }
Supported scopes: country

Supported targets:

round_variable - Rounds a variable
Example: round_variable = num_dogs
Supported scopes: any

Supported targets:

unit_leader_event - Fires a unit leader event for owner country.
Example:
unit_leader_event = {
	id = generic.17 # The event to fire.
	# Optional Fields:
	hours = 12 # The number of hours to wait before firing the event.
	days = 5 # The number of days to wait before firing the event.
	months = 1 # The number of months to wait before firing the event, where a month is treated as 30 days.
		# Note:  hours, days, and months can all be used and will simply be added together.
	random_hours = 18 # A random amount of hours to be added to the delay before firing, from 0 up to but not including random_hours.
	random_days = 2 # A random amount of days to be added to the delay before firing, from 0 up to but one hour less than random_days.
		# Note:  random_hours and random_days can both be used and will simply be added together.
	random = 6 # Equivalent to random_hours; preserverd for backwards compatibility.
	random = { chance = 50 ... } # Specify a set of child effects to execute as part of this effect, with a percentage chance of randomly happening or not (as a group, not individually).
	tooltip = generic.17.t # Manually specify which tooltip to use for this effect.
}

Supported scopes: character

Supported targets:

set_popularities - set popularities for all ideologies in a country. If an ideology is not specified its popularity will be set to zero. The popularities specified must add up to exactly 100

Example:
set_popularities = {
	neutrality = 54.5
	fascism = 45.5
}
Supported scopes: country

Supported targets:

create_operative_leader - create operative for country
create_operative_leader = {
	bypass_recruitment = no # whether the operative is directly added to the list of available operatives
	available_to_spy_master = yes # whether the operative can be recruited by the spy master. Only makes sense if bypass_recruitment is 'no'.
	portrait_tag_override = TAG # when selectiong the portrait for the operative, consider that tag instead of the country the operative will operate for gfx = GFX_portrait_alexander_rado # specify the GFX entry that the portrait will be based on, otherwise a random one will be generated.
	# Additionally supports the common token to other create_x_leader effects
 gender = male # or female. If not defined in script a random gender will be applied.}

Supported scopes: country

Supported targets:

capture_operative - Capture an operative
Can be used from a scope and a target that is either a country or a unit leader.
Examples:
GER = {
    capture_operative = PREV  # where PREV is an operative (unit leader)
    # or    capture_operative = {
        operative = PREV
        ignore_death_chance = yes  # optional: whether the death chance on capture should be ignored
    }
}

capture_operative = { captured_by = GER } # where the scope is an unit leader

Supported scopes: country character

Supported targets: THIS ROOT PREV FROM

random_operative - Executes children effects on a random operatives that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

every_operative - "Executes children effects on every operative (or \"random_select_amount\" of random operatives if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching operative with display_individual_scopes.
ex: GER = {
  every_operative = {
	tooltip = my_loc_key # Optional
	random_select_amount = 3 # Optional
    display_individual_scopes = yes # Optional - default = no
    ... character scope effects ...
  }
}"
Supported scopes: country

Supported targets:

send_equipment_fraction - Sends to target scope specified fraction of equipment.
Example:
send_equipment_fraction = {
	target = FROM
	value = 0.3 # Clamped in code to the range [0,1].
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

transfer_units_fraction - Transfer units (air, army, navy) to another country.
Also transfer the stockiled equipment (you can set it to zero if it is undesired) as well as unit leaders.
transfer_units_fraction = {
	target = ROOT          # the recipient
	size = 0.4             # [0,1] Default value for the ratio below if they are not specified
	stockpile_ratio = 0.3  # [0,1] Overrides size modifier for the stockpiled equipment and fuel
	army_ratio = 0.1       # [0,1] Overrides size modifier for army
	navy_ratio = 0.2       # [0,1] Overrides size modifier for navy
	air_ratio = 0.4        # [0,1] Overrides size modifier for air
	keep_unit_leaders = {  # specify IDs of unit leaders that remain with the original country
		700 701
	}
	keep_unit_leaders_trigger = { # Trigger for unit leaders to remain with the original country
		...                         # the scope is the unit leader being evaluated
		...                         # ROOT is the recipient
		...                         # FROM is the sender
		...                         # PREV is unset
	}
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

finalize_border_war - finalizes border war between two states, wins or cancels it
Supported scopes: any

Supported targets:

remove_decision - Remove specified active decision for scope country - Does not run the remove_effect or put the decision on cooldown. Ignores fire_only_once
Supported scopes: country

Supported targets:

swap_ruler_traits - swap 2 traits on current ruler.
 Syntax: swap_ruler_traits = { remove = <trait> add = <trait> }
Supported scopes: country

Supported targets:

add_random_trait - add random trait from specified list to unit leader. add_random_trait = { old_guard brilliant_strategist inflexible_strategist }
Supported scopes: character

Supported targets:

remove_exile_tag - remove exile tag from scope unit leader. remove_exile_tag = yes
Supported scopes: character

Supported targets:

set_legitimacy - set_legitimacy = 10. Sets legitimacy on scope country to specified value. Value has to be 0-100.
Supported scopes: country

Supported targets:

become_exiled_in - Become exile in target nation. become_exiled_in = { target = TAG legitimacy = 0-100 (optional) }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_faction_name - set_faction_name = NEW_LOC_KEY. Sets the faction name to whatever the new key localises to.
Supported scopes: state country

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_maneuver - Adds maneuver skill to a unit leader
Example: add_maneuver = 1
Supported scopes: character

Supported targets:

add_coordination - Adds maneuver skill to a unit leader
Example: add_coordination = 1
Supported scopes: character

Supported targets:

give_resource_rights - "Gives rights to take resources from specified state.
	give_resource_rights = {
		receiver = <TAG> # accepts keyword or variable
		state = <id> # accepts keyword or variable
		resources = {<Resource Name>} # [optional] If provided, only gives rights to the prodived resources.
													If not provided gives rights to all resources in the states.
	}"
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

remove_resource_rights - Remove resource right to state for scope country. remove_resource_rights = ID
Supported scopes: country

Supported targets:

inherit_technology - Copies over technology state from target
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

round_temp_variable - Rounds a temporary variable
Example: round_temp_variable = num_dogs
Supported scopes: any

Supported targets:

supply_units - Give [hours] of supply to units being controlled by this leader.
Example supply_units = 24
Supported scopes: character

Supported targets:

set_faction_leader - set current country as leader of its faction
Supported scopes: country

Supported targets:

set_keyed_oob - Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with the given key) on that country.
Only intended to be used within history files.

Example:
set_keyed_oob = {
	key = naval
	name = "ENG_1936_Naval"
}
Supported scopes: country

Supported targets:

set_oob - Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with no key) on that country.
Only intended to be used within history files.

Example:
set_oob = "ENG_1936"
Supported scopes: country

Supported targets:

set_naval_oob - Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with key "naval") on that country.
Only intended to be used within history files.

Example:
set_naval_oob = "ENG_1936_Naval"
Supported scopes: country

Supported targets:

add_to_array - Adds an element to an array
Example: add_to_array = {
	array = array_name
	value = 42 #optional, if not defined adds scope
	index = 3 #optional, default is end. otherwise elements are shifted
}
#shorter usage: add_to_array = { array_name = 42 }
Supported scopes: any

Supported targets:

remove_from_array - Removes an element from an array using value or index
Example: remove_from_array = {
	array = array_name
	value = 42 #optional, use index or this. if neither it removes last element
	index = 3 #optional, use value or this. if neither it removes last element
}
#shorter usage: remove_from_array = { array_name = 42 }
Supported scopes: any

Supported targets:

clear_array - Clears the contents of array
Example: clear_array = array_name
Supported scopes: any

Supported targets:

resize_array - Resizes array
Example: resize_array = {
	array = array_name
	value = 42 #optional, if not specified and array grows the new elements are set to this (default 0)
	size = 3 #if higher than old size, new elements are added to end. otherwise last elements are removed to match to new size
}
#shorter usage: resize_array = { array_name = 3 }
Supported scopes: any

Supported targets:

add_to_temp_array - Adds an element to a temporary array
Example: add_to_temp_array = {
	array = array_name
	value = 42 #optional, if not defined adds scope
	index = 3 #optional, default is end. otherwise elements are shifted
}
#shorter usage: add_to_temp_array = { array_name = 42 }
Supported scopes: any

Supported targets:

remove_from_temp_array - Removes an element from a temporary array using value or index
Example: remove_from_temp_array = {
	array = array_name
	value = 42 #optional, use index or this. if neither it removes last element
	index = 3 #optional, use value or this. if neither it removes last element
}
#shorter usage: remove_from_temp_array = { array_name = 42 }
Supported scopes: any

Supported targets:

clear_temp_array - Clears the contents of a temporary array
Example: clear_temp_array = array_name
Supported scopes: any

Supported targets:

resize_temp_array - Resizes a temp array
Example: resize_temp_array = {
	array = array_name
	value = 42 #optional, if not specified and array grows the new elements are set to this (default 0)
	size = 3 #if higher than old size, new elements are added to end. otherwise last elements are removed to match to new size
}
#shorter usage: resize_temp_array = { array_name = 3 }
Supported scopes: any

Supported targets:

for_each_loop - Runs a loop on for each element of an array
Example: for_each_loop = {
	array = array_name
	value = value_name #optional (default 'v') current value in array will be stored in this temp variable
	index = index_name #optional (default 'i') current index in array will be stored in this temp variable
	break = break_name #optional (default 'break') set this temp variable to non zero to break the loop
 #effect 1
 #effect 2 ...
}
Supported scopes: any

Supported targets: ???

add_fuel - add fuel to the country
Supported scopes: country

Supported targets:

set_fuel - set fuel for country
Supported scopes: country

Supported targets:

for_each_scope_loop - Runs a loop on for each element of an array and changes scope to current element in each iteration
Example: for_each_scope_loop = {
	array = array_name
	break = break_name #optional (default 'break') set this temp variable to non zero to break the loop
	tooltip = loc #if defined, the effect will output a tooltip for sub effects using this localization as title
 #effect 1
 #effect 2 ...
}
Supported scopes: any

Supported targets: ???

random_scope_in_array - Runs the effect for a random element in array
Example: random_scope_in_array = {
	array = array_name
	limit = { ... trigger ... } a trigger to limit scopes
	break = break_name #optional (default 'break') set this temp variable to non zero to break the loop
 #effect 1
 #effect 2 ...
}
Supported scopes: any

Supported targets: ???

force_update_dynamic_modifier - updates the modifiers in current scope (use if you don't want to wait for daily update to update them):
force_update_dynamic_modifier = yes

Supported scopes: state country character

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

remove_dynamic_modifier - removes a dynamic modifier from country/state/unit leader:
remove_dynamic_modifier = {
    modifier = dynamic_modifier_name
    scope = GER #optional, specify if it is specified while adding the modifier
}

Supported scopes: state country character

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_dynamic_modifier - adds a dynamic modifier to country/state/unit leader. Updates the cooldown if exists:
add_dynamic_modifier = {
    modifier = dynamic_modifier_name
    days = 42 #will be temporary if specified    scope = GER #optional, state or country tag or a variable contains that. if specified the dynamic variable will target that scope
}

Supported scopes: state country character

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

for_loop_effect - Runs a same effects through a loop. example will run the effects for value_name = -3, 0, 3, 6, 9 and then terminate
Example: for_loop_effect = {
	start = -3 (default 0) start value of loop
	end = 10 (default 0) end value of loop
	compare = less_than_or_equals (default less_than) comparison type between start and end val
	add = 3 (default 1) value to add to current value after each iteration
	value = value_name #optional (default 'v') current value of iteration will be stored in this temp variable
	break = break_name #optional (default 'break') set this temp variable to non zero to break the loop
 #effect 1
 #effect 2 ...
}
Supported scopes: any

Supported targets: ???

while_loop_effect - Runs the effect as long as a trigger is true
Example: while_loop_effect = {
	limit = { ... trigger ... } a trigger to test before each iteration
	break = break_name #optional (default 'break') set this temp variable to non zero to break the loop
 #effect 1
 #effect 2 ...
}
Supported scopes: any

Supported targets: ???

meta_effect - meta effects can be used for building effects from strings and running them. following example will give Germany 42 pp:
meta_effect = {
    text = {
        [COUNTRY] = {
            add_political_power = [POW]
        }
    }
    COUNTRY = "GER"
    POW = 42
    debug = no #set to yes if you want to see what game actually executes
}

Supported scopes: any

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_victory_points - adds victory point to province
add_victory_points = {
  province = 42
  value = 5
}
Supported scopes: any

Supported targets: ???

set_victory_points - sets victory points for a province
set_victory_points = {
  province = 42
  value = 5
}
Supported scopes: any

Supported targets: ???

launch_nuke - launch nuke at a state. usage :
launch_nuke = {
   provinve = 42 #will nuke this province if specified
   state = 42 #use either province or state. if state is used it will prefer enemies first while picking a province to nuke. otherwise it will pick one of the neutrals
   controller = GER #if state and controller is specified, the effect will pick a province that is controlled by this tag
   use_nuke = yes #will consume nuke if specified
}

Supported scopes: country

Supported targets:

scoped_sound_effect - Plays sound effect only on in current scope's player
Supported scopes: country

Supported targets:

find_lowest_in_array - Runs a loop on for each element of an array, finds the lowest value and stores result in temp variables
Example: find_lowest_in_array = {
	array = array_name
	value = value_name #optional (default 'v') lowest value in array will be stored in this temp variable
	index = index_name #optional (default 'i') index of lowest value in array will be stored in this temp variable
}
Supported scopes: any

Supported targets: ???

find_highest_in_array - Runs a loop on for each element of an array, finds the highest value and stores result in temp variables
Example: find_highest_in_array = {
	array = array_name
	value = value_name #optional (default 'v') highest value in array will be stored in this temp variable
	index = index_name #optional (default 'i') index of highest value in array will be stored in this temp variable
}
Supported scopes: any

Supported targets: ???

add_mines - Add mines to a strategic region for scoped country.
 add_mines = { region = 42 amount = 100 }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_fuel_ratio - Set country's current fuel ratio relative to its capacity
Supported scopes: country

Supported targets:

end_exile - Ends the exile of of the current scope's country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

remove_advisor_role - remove advisor role to character

Example:
remove_advisor_role = {
	character = "GER_Character_Token" # optional if inside character scope
	slot = air_chief}

Supported scopes: country character

Supported targets:

add_power_balance_modifier - adds static modifier to power balance

Example:
add_power_balance_modifier = {
	id = power_balance_id
	modifier = static_modifier_id # this must be defined in the static modifier database
}
Supported scopes: any

Supported targets:

remove_power_balance_modifier - removes static modifier from power balance

Example:
remove_power_balance_modifier = {
	id = power_balance_id
	modifier = static_modifier_id # this must be defined in the static modifier database
}
Supported scopes: any

Supported targets:

set_power_balance_gfx - sets gfx for power balance side

Example:
set_power_balance_gfx = {
	id = power_balance_id
	side = power_balance_side_id
	gfx = gfx_name
}
Supported scopes: any

Supported targets:

kill_ideology_leader - removes a ideology leader as leader of his party, making the next in line the new party leader
Supported scopes: country

Supported targets:

retire_ideology_leader - kills a ideology leader and removes him completely, making the next in line the new party leader
Supported scopes: country

Supported targets:

add_days_remove - adds/removes days to 'days_remove' value of a decision
Example:
add_days_remove  = {
    decision = <some_decision>
    days = 30
}

Supported scopes: country

Supported targets:

add_days_mission_timeout - add days to 'mission_timeout' value of a mission
Example:
add_days_mission_timeout  = {
    mission = <some_mission>
    days = 30
}

Supported scopes: country

Supported targets:

add_resistance - add resistance to a state. Example: add_resistance = 30
Supported scopes: state

Supported targets: ??? none

add_compliance - add compliance to a state. Example: add_compliance = 30
Supported scopes: state

Supported targets: ??? none

start_resistance - starts resistance activity for a core country.
Use along with force_enable_resistance if you are enabling resistance
in a state that is not possible (ie core).
Example : start_resistance = POL or start_resistance = yes
Supported scopes: state

Supported targets: ??? none

cancel_resistance - cancels resistance activity for a core country.
use along with force_disable_resistance to disable resistance forever
Example : cancel_resistance = yes
Supported scopes: state

Supported targets: ??? none

set_resistance - set resistance of a state. Example: set_resistance = 30
Supported scopes: state

Supported targets: ??? none

set_compliance - set compliance of a state. Example: set_compliance = 30
Supported scopes: state

Supported targets: ??? none

career_profile_step_missiolini - Step completed Mussolini missions by one for the career profile
Supported scopes: country

Supported targets:

get_supply_vehicles - sets a variable to the number of supply vehicles in stockpile or that are needed. example
get_supply_vehicles = {
	var = num_vehicles #variable to set
	type = truck #can be truck or train
	need = yes #default no. If yes, gets the number of needed vehicles
}

Supported scopes: country

Supported targets:

get_supply_vehicles_temp - sets a temp variable to the number of supply vehicles in stockpile or that are needed. example
get_supply_vehicles_temp = {
	var = num_vehicles #variable to set
	type = truck #can be truck or train
	need = yes #default no. If yes, gets the number of needed vehicles
}

Supported scopes: country

Supported targets:

every_military_industrial_organization - "Executes children effects on every Military Industrial Organisation (or \"random_select_amount\" of random MIOs if specified) of the country in scope, that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching MIO with display_individual_scopes.
ex: GER = {
  every_military_industrial_organization = {
	tooltip = my_loc_key # Optional
	random_select_amount = 3 # Optional
	include_invisible = yes # Optional - default = no
	display_individual_scopes = yes # Optional - default = no
    ... MIO scope effects ...
  }
}"
Supported scopes: country

Supported targets:

add_mio_funds - "Add funds to the military industrial organization in scope.
Value can be negative to substract funds.
If the new total funds go over the Size Up limit, the MIO will gain size(s).
If the new total funds is negative, it will be capped at 0 without retracting size.
ex:
var:my_mio_var = {
  add_mio_funds = 200
  add_mio_funds = -100
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_mio_funds - "Set the amount of funds for the military industrial organization in scope.
Input value cannot be negative.
If the new total funds go over the Size Up limit, the MIO will gain size(s).
ex:
var:my_mio_var = {
  set_mio_funds = 100
  set_mio_funds = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_mio_size - "Add size levels to the military industrial organization in scope.
Input value cannot be negative.
The MIO will keep the same amount of funds it had before the effect.
ex:
var:my_mio_var = {
  add_mio_size = 2
  add_mio_size = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

complete_mio_trait - "Complete a trait in the military industrial organization in scope.
This effect will not take into account the current state of the trait tree and will allow you to unlock a trait even if the one before is not unlocked.
Will also add 1 size to the MIO so that size and numbers of unlocked traits are always aligned.
ex:
var:my_mio_var = {
  complete_mio_trait = my_trait_token
  complete_mio_trait = {
	trait = my_trait_token
	show_modifiers = no # Optional, default = yes
  }
}"
Supported scopes: MIO

Supported targets:

set_mio_flag - "Set flag in the military industrial organization in scope.
ex:
var:my_mio_var = {
  set_mio_flag = my_flag
  set_mio_flag = {
    flag = my_flag (mandatory)
	value = 3 (optional, default = 1)
    days = 12 (optional, default = 0. if > 0, the flag will be deleted after this number of days)
  }
}"
Supported scopes: MIO

Supported targets:

clr_mio_flag - "Clear the matching flag in the military industrial organization in scope.
ex:
var:my_mio_var = {
  clr_mio_flag = my_flag
}"
Supported scopes: MIO

Supported targets:

modify_mio_flag - "Modify the matching flag in the military industrial organization in scope. Happens only if the flag already exists.
ex:
var:my_mio_var = {
  modify_mio_flag = {
    flag = my_flag
    value = 5 (optional, default = 0. Will be added to the current value)
    days = 13 (optional, default = 0. if > 0, the flag will be deleted after this number of days)
  }
}"
Supported scopes: MIO

Supported targets:

set_mio_task_capacity - "Set the maximum task capacity in the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Input value cannot be negative.
If the capacity is reduced and the MIO becomes over-assigned, the current tasks will be allowed.
It's only later that the player will feel the new restrictions.
ex:
mio:my_mio = {
  set_mio_task_capacity = 3
  set_mio_task_capacity = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_mio_task_capacity - "Add to the maximum task capacity in the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Value can be negative to reduce capacity, but final capacity cannot be negative (capped at 0, no error raised)
If the capacity is reduced and the MIO becomes over-assigned, the current tasks will be allowed.
It's only later that the player will feel the new restrictions.
ex:
mio:my_mio = {
  add_mio_task_capacity = 1
  add_mio_task_capacity = -1
  add_mio_task_capacity = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_mio_research_bonus - "Add to the research bonus in the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Value can be negative to reduce research bonus but final research bonus cannot be negative (capped at 0, no error raised)
ex:
mio:my_mio = {
  add_mio_research_bonus = 0.2
  add_mio_research_bonus = -0.1
  add_mio_research_bonus = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_mio_research_bonus - "Set the research bonus in the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Input value cannot be negative.
ex:
mio:my_mio = {
  set_mio_research_bonus = 0.3
  set_research_bonus = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_mio_name_key - "Set the localisation key used to generate the name of the military industrial organization in scope.
The localisation key may be a scripted localisation (triggers evaluated in MIO scope).
ex:
mio:my_mio = {
  set_mio_name_key = MY_NEW_MIO_NAME_KEY
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_mio_design_team_assign_cost - "Add percentage to the daily PP cost to assign to research in the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Value can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised)
ex:
mio:my_mio = {
  add_mio_design_team_assign_cost = 0.2 # increase by 20%
  add_mio_design_team_assign_cost = -0.1 # reduce by 10%
  add_mio_design_team_assign_cost = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_mio_design_team_assign_cost - "Set the daily PP cost to assign to research in the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Input value cannot be negative.
ex:
mio:my_mio = {
  set_mio_design_team_assign_cost = 0.3
  set_mio_design_team_assign_cost = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_mio_industrial_manufacturer_assign_cost - "Add percentage to the daily PP cost to assign to production line in the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Value can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised)
ex:
mio:my_mio = {
  add_mio_industrial_manufacturer_assign_cost = 0.2 # increase by 20%
  add_mio_industrial_manufacturer_assign_cost = -0.1 # reduce by 10%
  add_mio_industrial_manufacturer_assign_cost = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_mio_industrial_manufacturer_assign_cost - "Set the daily PP cost to assign to production line in the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Input value cannot be negative.
ex:
mio:my_mio = {
  set_mio_industrial_manufacturer_assign_cost = 0.3
  set_mio_industrial_manufacturer_assign_cost = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_mio_design_team_change_cost - "Add percentage to the XP cost to change MIO in equipment designer for the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Value can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised).
!!! NOTE that the result is rounded down so that i.e. 5 + 10% is still 5 = 5.5 rounded down !!!
ex:
mio:my_mio = {
  add_mio_design_team_change_cost = 0.2 # increase by 20%
  add_mio_design_team_change_cost = -0.1 # reduce by 10%
  add_mio_design_team_change_cost = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_mio_design_team_change_cost - "Set the XP cost to change MIO in equipment designer for the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Input value cannot be negative.
ex:
mio:my_mio = {
  set_mio_design_team_change_cost = 3
  set_mio_design_team_change_cost = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

unlock_mio_trait_tooltip - "Display a tooltip saying the trait is made available (aka unlocked).
ex:
mio:my_mio = {
  unlock_mio_trait_tooltip = trait
  unlock_mio_trait_tooltip = {
	trait = my_trait_token
	show_modifiers = no # Optional, default = yes
  }
}"
Supported scopes: MIO

Supported targets:

add_mio_funds_gain_factor - "Add to the factor applied when gaining funds in the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Value can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised)
ex:
mio:my_mio = {
  add_mio_funds_gain_factor = 0.2
  add_mio_funds_gain_factor = -0.1
  add_mio_funds_gain_factor = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_mio_funds_gain_factor - "Set the factor applied when gaining funds in the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Input value cannot be negative.
ex:
mio:my_mio = {
  set_mio_funds_gain_factor = 0.9
  set_mio_funds_gain_factor = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_mio_size_up_requirement_factor - "Add to the factor applied to funds required to size up in the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Value can be negative to reduce assign cost but final value cannot be negative (capped at 0, no error raised)
ex:
mio:my_mio = {
  add_mio_size_up_requirement_factor = 0.2
  add_mio_size_up_requirement_factor = -0.1
  add_mio_size_up_requirement_factor = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_mio_size_up_requirement_factor - "Set to the factor applied to funds required to size up in the military industrial organization in scope.
This changes the base value. Modifiers will still apply over it.
Input value cannot be negative.
ex:
mio:my_mio = {
  set_mio_size_up_requirement_factor = 0.9
  set_mio_size_up_requirement_factor = var:my_number_var
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

unlock_military_industrial_organization_tooltip - "Display a tooltip saying the MIO is made available (aka unlocked).
Accepts MIO token, variables or keywords
ex:
FIN = {
	unlock_military_industrial_organization_tooltip = mio:my_mio_token
	unlock_military_industrial_organization_tooltip = var:my_mio_var
}
"
Supported scopes: country

Supported targets:

unlock_mio_policy_tooltip - "Display a tooltip saying the MIO policy is made available (aka unlocked).
ex:
unlock_mio_policy_tooltip = my_policy_token
unlock_mio_policy_tooltip = {
	policy = my_policy_token
	show_modifiers = no # show bonuses in tooltip - optional, default = yes
}
"
Supported scopes: any

Supported targets:

add_mio_policy_cost - "Add to the base cost (in PP) for attaching a policy in the MIO policy, found in country in scope with input policy token.
This changes the base value. Modifiers will still apply over it.
Value can be negative to reduce cost, but final cost cannot be negative (capped at 0, no error raised)
ex:
SOV = {
  add_mio_policy_cost = {
	policy = my_policy_token
	value = 1
  }
  add_mio_policy_cost = {
	policy = my_policy_token
	value = -1
  }
  add_mio_policy_cost = {
	policy = my_policy_token
	value = var:my_number_var
  }
}"
Supported scopes: country

Supported targets:

set_mio_policy_cost - "Set the base cost (in PP) for attaching a policy in the MIO policy, found in country in scope with input policy
token. This changes the base value. Modifiers will still apply over it.
Input value cannot be negative.
ex:
SOV = {
  set_mio_policy_cost = {
	policy = my_policy_token
	value = 3
  }
  set_mio_policy_cost = {
	policy = my_policy_token
	value = var:my_number_var
  }
}"
Supported scopes: country

Supported targets:

add_mio_policy_cooldown - "Add to the base cooldown (in days) after attaching a policy in the MIO policy, found in country in scope with input policy token.
This changes the base value. Modifiers will still apply over it.
Value can be negative to reduce cost, but final cooldown cannot be negative (capped at 0, no error raised)
ex:
SOV = {
  add_mio_policy_cooldown = {
	policy = my_policy_token
	value = 1
  }
  add_mio_policy_cooldown = {
	policy = my_policy_token
	value = -1
  }
  add_mio_policy_cooldown = {
	policy = my_policy_token
	value = var:my_number_var
  }
}"
Supported scopes: country

Supported targets:

set_mio_policy_cooldown - "Set the base cooldown (in days) after attaching a policy in the MIO policy, found in country in scope with input policy
token. This changes the base value. Modifiers will still apply over it.
Input value cannot be negative.
ex:
SOV = {
  set_mio_policy_cooldown = {
	policy = my_policy_token
	value = 3
  }
  set_mio_policy_cooldown = {
	policy = my_policy_token
	value = var:my_number_var
  }
}"
Supported scopes: country

Supported targets:

add_cic - "Add founds to the CIC bank of the country in scope.
Value can be negative to substract funds.
If the new total funds is negative, it will be set to 0.
ex:
var:my_country_var = {
  add_cic = 200
  add_cic = -100
}"
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

event_option_tooltip - Shows the tooltip text of an event option in other tooltips(root and from scopes are swapped).Example:
random_list = mtg_usa_civil_war_fascists.1.a

Supported scopes: any

Supported targets:

show_mio_tooltip - "Show the name of the input MIO with the name of the initial trait (if any)
ex:
SOV = {
	show_mio_tooltip = my_mio_token
	show_mio_tooltip = var:my_mio_var
}"
Supported scopes: country

Supported targets:

set_mio_icon - "Set the icon GFX for the military industrial organization in scope.
ex:
mio:my_mio = {
  set_mio_icon = MY_NEW_MIO_ICON_GFX
}"
Supported scopes: MIO

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

create_purchase_contract - "Creates a purchase contract between the countries.
Example:
create_purchase_contract =
{
	seller = ENG
	buyer = RAJ
	civilian_factories = 2
	equipment = {
		type = infantry_equipment
		amount = 600
	}
	equipment = {
		type = armored_car1
		amount = 100
	}
}"
Supported scopes: any

Supported targets:

random_purchase_contract - "Executes children effects on a random purchase contract of the country in scope, that fulfills the \"limit\" trigger.
tooltip = key need to be added to override the tooltip title.
ex: GER = {
  random_purchase_contract = {
	limit = { ... contract scope triggers ... }
	tooltip = my_loc_key # Optional
    ... Purchase Contract scope effects ...
  }
}"
Supported scopes: country

Supported targets:

every_purchase_contract - "Executes children effects on every purchase contract (or \"random_select_amount\" of random purchase contracts if specified) of the country in scope, that fulfills the \"limit\" trigger.
tooltip = key need to be added to override the tooltip title.
By default the effects are only displayed once, you may display them for each matching purchase contract with display_individual_scopes.
ex: GER = {
  every_military_industrial_organization = {
	limit = { ... contract scope triggers ... }
	tooltip = my_loc_key # Optional
	random_select_amount = 3 # Optional
	display_individual_scopes = yes # Optional - default = no
    ... Purchase Contract scope effects ...
  }
}"
Supported scopes: any

Supported targets:

cancel_purchase_contract - "Cancels the scoped purchase contract.
Example:
contract =  {cancel_purchase_contract = yes}"
Supported scopes:

Supported targets:

add_operation_token - Adds a specific token against against another country
add_operation_token = {
	tag = GER
	token = some_token_id
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

remove_operation_token - Remove a specific token against against another country
remove_operation_token = {
	tag = GER
	token = some_token_id
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

steal_random_tech_bonus - adds a random limited use tech bonus from country of categories that is it ahead in compared to you.
it must have atleast one category or folder. But it can contain any number of them in any combination
Note: if a country does not have a tech to be stolen a random tech bonus will be applied based on base_bonus
Example: steal_random_tech_bonus = {
	category = air_equipment
	folder = naval_folder
	ahead_reduction = ???
	bonus = ???
	base_bonus = 0.05
	instant = yes # instant unlock instead of bonus
	dynamic = yes # swaps bonus types from instant to category dependig on type as well as uses weights on tech progress
	name = ???
	target = ???
	uses = 1
}

Supported scopes: country

Supported targets:

teleport_armies - teleport armies in state to another state or province. example :
teleport_armies = {
  #only define one. if neither is defined will teleport to unit to their capital  to_state = 123 #id of the state to teleport
  to_state_array = array_name #an array of states to teleport (will be randomly picked)
  to_province = 123 #id of the province to teleport

  limit = {
     # trigger will be checked for owner of armies and will only teleport if true. scope if the owner of the army and prev is the scope that calls teleport_armies
  }
}
Supported scopes: state

Supported targets: ??? none

every_controlled_state - "Executes children effects on every State controlled by the country in scope (or \"random_select_amount\" of random state if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching state with display_individual_scopes.
ex:
SOV = {
	every_controlled_state = {
		tooltip = my_loc_key # Optional
		random_select_amount = 3 # Optional
		display_individual_scopes = yes # Optional - default = no
		... state scope effects ...
	}
}"
Supported scopes: country

Supported targets:

set_state_province_controller - sets the controller of provinces belong to a state and fullfils a condition. no tooltip is built
set_state_province_controller = {
 controller = ITA
  limit = {
     # will be checked old controller of each province. will only update controller if true
  }
}
Supported scopes: state

Supported targets: ??? none

reserve_dynamic_country - reserves a dynamic country so it won't be recycled for civil wars. A dynamic country with no owned states must be reserved after it is created and unreserved once it is no longer going to be used. example :
reserve_dynamic_country = yes
reserve_dynamic_country = no

Supported scopes: country

Supported targets: ???

get_highest_scored_country_temp - calculates the highest scored country that is defined in a country scorer and sets it to a variable. Example:
get_highest_scored_country_temp = {
  scorer = scorer_id
  var = var_name # variable name that the result will be stored. default is highest_scored_country
}
Supported scopes: country

Supported targets:

create_dynamic_country - creates a dynamic country and runs child effects on it. example :
create_dynamic_country = {
  original_tag = ITA #original tag of new country
  copy_tag = ITA # if set, it will copy stuff from copy tag instead of original_tag
 #...effects to run on new country}
Supported scopes: any

Supported targets: ???

get_sorted_scored_countries_temp - calculates & sorts all countries in a country scorer and stores them and their scores in temp arrays. Example:
get_sorted_scored_countries_temp = {
  scorer = scorer_id # id that is used in country scorer  array = array_name # a name to store sorted countries as a temp array (default to sorted_country_list)
  scores = array_name # corresponding score temp array for countries stored in array (default to country_list_scores)
}
Supported scopes: country

Supported targets:

random_occupied_country - Executes children effects on random occupied country that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

every_occupied_country - "Executes children effects on every occupied Country by the country in scope (or \"random_select_amount\" of random country if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.
ex:
SOV = {
	every_occupied_country = {
		tooltip = my_loc_key # Optional
		random_select_amount = 3 # Optional
		display_individual_scopes = yes # Optional - default = no
		... country scope effects ...
	}
}"
Supported scopes: country

Supported targets:

add_resistance_target - adds resistance target to the scoped state :
add_resistance_target = 10
add_resistance_target = {
  id = 123 #if set, id can be used for removing an added resistance target using remove_resistance_target effect  amount = 10 #original tag of new country
  occupied = GER #if set, the resistance target will only apply if the occupied country is GER
  occupier = ENG #if set, the resistance target will only apply if the occupier country is ENG
  days = 42 #if set the newly added resistance target will be only active for this many days
  tooltip = "BLABLA" #tooltip loc key to display in resistance target tooltips
}
Supported scopes: state

Supported targets: ??? none

remove_resistance_target - removes a previously added resistance target using its id. No tooltips are generated.:
remove_resistance_target = 42

Supported scopes: state

Supported targets: ??? none

get_highest_scored_country - calculates the highest scored country that is defined in a country scorer and sets it to a temp variable. Example:
get_highest_scored_country = {
  scorer = scorer_id
  var = var_name # temp variable name that the result will be stored. default is highest_scored_country
}
Supported scopes: country

Supported targets:

get_sorted_scored_countries - calculates & sorts all countries in a country scorer and stores them and their scores in arrays. Example:
get_sorted_scored_countries = {
  scorer = scorer_id # id that is used in country scorer  array = array_name # a name to store sorted countries as an array (default to sorted_country_list)
  scores = array_name # corresponding score array for countries stored in array (default to country_list_scores)
}
Supported scopes: country

Supported targets:

random_country_with_original_tag - Executes children effects on a random country with original tag. Example:
random_country_with_original_tag = {
  original_tag_to_check = ENG # the effect will only run on countries that has this original tag
  limit = { always = yes } # a limit can be defined to limit scopes
  # ... effects to execute
}
Supported scopes: any

Supported targets:

every_country_with_original_tag - "Executes children effects on a all countries with original tag (or \"random_select_amount\" of random country if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.
ex:
every_country_with_original_tag = {
	original_tag_to_check = ENG # the effect will only run on countries that has this original tag
	tooltip = my_loc_key # Optional
	random_select_amount = 3 # Optional
	display_individual_scopes = yes # Optional - default = no
	... country scope effects ...
}"
Supported scopes: country

Supported targets:

add_decryption - add decryption against a target country. Example:
add_decryption = {
 target = GER
 # pick one amount = 1000 # a flat amount to be added
 ratio = 0.3 # a ratio of crypto defense of target to be added

Supported scopes: country

Supported targets:

delete_units - deletes units that uses a specific template :
delete_units = {
  division_template = "Template Name"
  disband = no # if yes, equipment will be returned to country equipment. default is no
}
Supported scopes: country

Supported targets: ???

force_enable_resistance - force enables resistance for scoped state. the resistance will be active even if other conditions doesn't satisfy (even if it is core or resistance check trigger is false)  :
force_enable_resistance = GER # same as occupier = GER
force_enable_resistance = {
  clear = no #if yes, will clear previously set resistance
  occupier = GER #if set, the resistance will be enabled when the occupier is GER
  occupied = ENG #if set, the resistance will be enabled if the occupier country is target
}
Supported scopes: state

Supported targets: ??? none

force_disable_resistance - force disables resistance for scoped state.  :
force_disable_resistance = GER # same as occupier = GER
force_disable_resistance = {
  clear = no #if yes, will clear previously disabled resistance
  occupier = GER #if set, the resistance will be disabled when the occupier is GER
  occupied = ENG #if set, the resistance will be disabled if the occupier country is target
}
Supported scopes: state

Supported targets: ??? none

create_intelligence_agency - create an Intelligence Agency for the country, if it is not already done. Example:
create_intelligence_agency = yes # creates with historical ones, if exists.
create_intelligence_agency = {
  name = "M.I.B."
  icon = "GFX_intelligence_agency_logo_ita"
}
Supported scopes: country

Supported targets:

upgrade_intelligence_agency - add an upgrade to the Intelligence Agency (must be created):
upgrade_intelligence_agency = upgrade_army_department
Supported scopes: country

Supported targets:

create_ship - create a ship from another country and assign it to the reserve fleet.
'creator' is optional. If not set, it will be the scoped country.
'name' is optional.
FRA = {
  create_ship = {
    type = ship_hull_submarine_1
    equipment_variant = "S Class"
    creator = ENG
    name = "My ship name"
    amount = 5 #amount to add
  }
}

Supported scopes: country

Supported targets:

set_faction_spymaster - set current country as spy master of its faction
Supported scopes: country

Supported targets:

country_lock_all_division_template - Lock all the division template at the country level. Note that you need to unlock them in the same way (You can't use 'set_division_template_lock' individually, because the lock at the country level will not be removed)
Supported scopes: country

Supported targets:

remove_all_power_balance_modifiers - removes all static modifiers from power balance

Example:
remove_all_power_balance_modifiers = {
	id = power_balance_id
}
Supported scopes: any

Supported targets:

randomize_temp_variable - Randomize a temporary variable
randomize_temp_variable = num_dogs
# which is equivalient to
randomize_temp_variable = {
  var = num_dogs
  distribution = uniform
}
# which is equivalent to
randomize_temp_variable = {
  var = num_dogs
  distribution = uniform
  min = 0
  max = 1
}
# also allow for binomial distribution (with N=2)randomize_temp_variable = {
  var = num_dogs
  distribution = binomial
  min = 0               # optional
  max = 10              # required if min is specified
}
# also allow for the poisson distributionrandomize_temp_variable = {
  var = num_dogs
  distribution = poisson
  lambda = 10           # required
  min = 10              # optional
}

Supported scopes: any

Supported targets:

randomize_variable - refer to randomize_temp_variable
Supported scopes: any

Supported targets:

harm_operative_leader - Harm an operative. The specified value is subject to modifiers.
harm_operative_leader = 12

Supported scopes: character

Supported targets:

force_operative_leader_into_hiding - Force an operative into hiding, preventing him from performing mission. The specified values is subject to modifiers
force_operative_leader_into_hiding = 12

Supported scopes: character

Supported targets:

add_intel - Add the specified amount of intel over a specified country
GER = {
  add_intel = {
    target = POL
    civilian_intel = 3
    army_intel = 1
    # zero field can be omitted
    # navy_intel = 0
    # airforce_intel = 0
  }
}

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

operative_leader_event - Fires a operative leader event for owner country.
Example:
operative_leader_event = {
	id = generic.17 # The event to fire.
	# Optional Fields:
	originator = TAG # The originator of the event (default to the owner of the operative)
	recipient = TAG # The recipient of the event (default to the owner of the operative)
	hours = 12 # The number of hours to wait before firing the event.
	days = 5 # The number of days to wait before firing the event.
	months = 1 # The number of months to wait before firing the event, where a month is treated as 30 days.
		# Note:  hours, days, and months can all be used and will simply be added together.
	random_hours = 18 # A random amount of hours to be added to the delay before firing, from 0 up to but not including random_hours.
	random_days = 2 # A random amount of days to be added to the delay before firing, from 0 up to but one hour less than random_days.
		# Note:  random_hours and random_days can both be used and will simply be added together.
	random = 6 # Equivalent to random_hours; preserverd for backwards compatibility.
	random = { chance = 50 ... } # Specify a set of child effects to execute as part of this effect, with a percentage chance of randomly happening or not (as a group, not individually).
	tooltip = generic.17.t # Manually specify which tooltip to use for this effect.
	set_from = TAG # Set the scope of the From in the scripted localization
	set_from_from = TAG # Set the scope of the From.From in the scripted localization
	set_root = TAG # Set the scope of the Root in the scripted localization
}

Supported scopes: character

Supported targets:

kill_operative - Kills an operative. This will temporarily lock the slot they occupy
Examples:
GER = {
    kill_operative = PREV  # where PREV is an operative (unit leader)
    # or
    kill_operative = {
        operative = PREV
    }
}

kill_operative = { killed_by = GER } # where the scope is an unit leader

Supported scopes: country character

Supported targets: THIS ROOT PREV FROM

random_controlled_state - Executes children effects on random controlled state that fulfills the "limit" trigger.
prioritize = { <stateID> <stateID> } to pick those states first if they fulfull the limit
Supported scopes: country

Supported targets:

mark_focus_tree_layout_dirty - Forces the refresh of the tree layout for the scoped country
mark_focus_tree_layout_dirty = yes

Supported scopes: country

Supported targets: ???

add_civil_war_target - Adds a country as a civil war target (added to both sides)

Example:
add_civil_war_target = TAG
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

modulo_temp_variable - modulos a temp variable with another. Example:
modulo_temp_variable = {
  var = variable_to_modulo
  value = divisior
}
Supported scopes: any

Supported targets:

modulo_variable - modulos a variable with another. Example:
modulo_variable = {
  var = variable_to_modulo
  value = divisior
}
Supported scopes: any

Supported targets:

set_country_leader_name - changes the name of country leader. no tooltip is generated
set_country_leader_name = {
  ideology = neutrality # can be ommitted. if so it will change the name of current ruler
  name = "James Boned"
}
Supported scopes: country

Supported targets: ???

set_country_leader_portrait - changes the portrait of country leader. no tooltip is generated
set_country_leader_name = {
  ideology = neutrality # can be ommitted. if so it will change the portrait of current ruler
  portrait = "GFX_portrait_italy_emperor_mussolini"
}
Supported scopes: country

Supported targets: ???

add_collaboration - Adds the collaboration in a target country with our currently scoped country
GER = {
  add_collaboration = {
    target = POL
    value = 0.3
  }
}

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_collaboration - Sets the collaboration in a target country with our currently scoped country
GER = {
  set_collaboration = {
    target = POL
    value = 0.3
  }
}

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_temp_variable_to_random - sets a temp variable to a random value. example
set_temp_variable_to_random = num_dogs #sets num_dogs a random value between [0, 1)
set_temp_variable_to_random = {
	var = num_dogs #variable to set
	min = 5 #default 0. value will be set in between [min, max)
	max = 10 #default 1. value will be set in between [min, max)
	integer = yes #default no. if yes the number value will be an integer
}

Supported scopes: any

Supported targets:

set_variable_to_random - sets a variable to a random value. example
set_variable_to_random = num_dogs #sets num_dogs a random value between [0, 1)
set_variable_to_random = {
	var = num_dogs #variable to set
	min = 5 #default 0. value will be set in between [min, max)
	max = 10 #default 1. value will be set in between [min, max)
	integer = yes #default no. if yes the number value will be an integer
}

Supported scopes: any

Supported targets:

set_leader_name - changes the name of unit leader. no tooltip is generated
set_leader_name = "James Boned"

Supported scopes: character

Supported targets: ???

set_leader_portrait - changes the portrait of unit leader. no tooltip is generated
set_leader_portrait = "GFX_portrait_italy_emperor_mussolini"

Supported scopes: character

Supported targets: ???

set_country_leader_description - changes the description of country leader. no tooltip is generated
set_country_leader_name = {
  ideology = neutrality # can be ommitted. if so it will change the portrait of current ruler
  desc = "DESC_KEY"
}
Supported scopes: country

Supported targets: ???

set_leader_description - changes the description of unit leader. no tooltip is generated
set_leader_description = "DESC_KEY"

Supported scopes: character

Supported targets: ???

execute_operation_coordinated_strike - Special effect for executing the Coordinated Strike Operation. amount determines how often the simulation is run
Supported scopes:

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_nationality - Add the specified nationalty to the scoped-in operative. Examples:
add_nationality = ROOT
add_nationality = FRA

Supported scopes: character

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

recall_volunteers_from - The scoped in country recall the volunteers sent to the target country.
Example:
# FRA recalls the volunteers it sent to SPR
FRA = { recall_volunteers_from = SPR }

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

turn_operative - An operative is turned by the specified country.
This transfers the operative to the target country and make it appear as killed to the country of origin (increases the death counter and lock the slot).
This fires the on_action on_operative_death with as killer the target country.
If the target country is the owner of the operative, this has no effect and an error is logged.

WARN: the on_action might execute immediatly, before any effect listed after the occurence of turn_operative.

Examples:
GER = {
    turn_operative = PREV  # where PREV is an operative (unit leader)
    # or
    turn_operative = {
        operative = PREV
    }
}

turn_operative = { turned_by = GER } # where the scope is an unit leader

Supported scopes: country character

Supported targets: THIS ROOT PREV FROM

every_character - "Executes children effects on every Character (or \"random_select_amount\" of random character if specified) of the country in scope, that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching character with display_individual_scopes.
ex: GER = {
  every_unit_leader = {
	tooltip = my_loc_key # Optional
	random_select_amount = 3 # Optional
	include_invisible = yes # Optional - default = no
    display_individual_scopes = yes # Optional - default = no
    ... character scope effects ...
  }
}"
Supported scopes: country

Supported targets:

random_character - Executes children effects on random characters that fulfills the "limit" trigger. tooltip=key can be added to override tooltip title
Supported scopes: country

Supported targets:

add_doctrine_cost_reduction - adds a limited use cost reduction for doctrines
Supported scopes: country

Supported targets:

set_garrison_strength - set initial garrison strength. Example: set_garrison_strength = 0.5
Supported scopes: state

Supported targets: ??? none

add_corps_commander_role - add corps commander role to character

Example:
add_corps_commander_role = {
	character = GER_Character_token # optional if inside character scope
	traits = {  }
	skill = 4
	attack_skill = 2
	defense_skill = 3
	planning_skill = 3
	logistics_skill = 5
	}
}
Supported scopes: country character

Supported targets:

add_field_marshal_role - add field marshall role to character

Example:
add_field_marshal_role = {
	character = GER_Character_token # optional if inside character scope
	traits = {  }
	skill = 4
	attack_skill = 2
	defense_skill = 3
	planning_skill = 3
	logistics_skill = 5
	}
}
Supported scopes: country character

Supported targets:

add_naval_commander_role - Add naval commander to character

Example:
add_naval_commander_role = {
	character = GER_Character_token # optional if inside character scope
	traits = { spotter }
	skill = 4
	attack_skill = 3
	defense_skill = 3
	maneuvering_skill = 3
	coordination_skill = 4
	}
}
Supported scopes: country character

Supported targets:

add_country_leader_role - add country leader role to character

Example:
add_country_leader_role = {
	character = "GER_Character_Token" # optional if inside character scope
	promote_leader = yes
	country_leader = {
		ideology = socialism
		expire = "1965.1.1.1"
		traits = {
			war_industrialist
		}
	}
}

Supported scopes: country character

Supported targets:

add_advisor_role - add advisor role to character
May directly activate (aka hire) using activate = yes

Example:
add_advisor_role = {
	character = "GER_Character_Token" # optional if inside character scope
	advisor = {
		slot = air_chief
		cost = 50
		idea_token = GER_character_token_air_chief
		traits = {
			air_chief_ground_support_2
		}
		allowed = {...}
	}
	activate = yes
}

Supported scopes: country character

Supported targets:

retire_character - Un-assigns a character from a nation and all its corresponding jobs, advisor, unit leader, country leader

Example:
retire_character = GER_Character_Token

Supported scopes: country

Supported targets:

recruit_character - Attach a character to a country. Must be in country scope.

Example:
GER = { recruit_character = GER_Character_token }

Supported scopes: country

Supported targets:

promote_character - promotes character to the head of their political party.If this is the ruling party, the character becomes country leader.if the character has several country leader role (i.e. several ideologies), then it is mandatory to provide the ideology to promote.

Example in country scope or scripted effects:
promote_character = GER_erwin_rommel
promote_character = {
  character = GER_erwin_rommel
  ideology = nazism
}


Example in character scope:
promote_character = yes
promote_character = nazism
promote_character = {
  ideology = nazism
}
Supported scopes: country character

Supported targets:

play_song - Plays song from database
Supported scopes: any

Supported targets:

scoped_play_song - Plays song from database only on in current scope's player
Supported scopes: country

Supported targets:

release_on_controlled - releases specified country as a puppet using your owned or controlled states
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

release_puppet_on_controlled - releases specified country as puppet using states you own or control
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

create_entity - creates an entity on map
create_entity = {
  entity = entity_name #gfx entry
  id = 123 # can be ommitted. if given you can use this id to access entity in later times. will replace existing entity if it exists
  var = var_name # can be ommitted. if given the id will be stored in this value so the entity can be accessed in later times
  # position can be set using following. you can specify a province/state or can enter a manual coordinate. you can do both and the coordinate will shift the state/province coordinate
  x = 42
  y = 21
  province = 123
  state = 42
  z = 3 #if wanted you can specify a z to shift height of the entity
  rotation = 1.2 # angle in radians
  scale = 10.0 # scale of entity
  min_zoom = 100.0 # min zoom needed to show entity
  visible = scripted_trigger_name # a scripted trigger name to show or hide an entity. scope is player country}
Supported scopes: any

Supported targets: ???

destroy_entity - destroys an existing entity
destroy_entity = 123 #id

Supported scopes: any

Supported targets: ???

set_entity_movement - sets the position & rotation of an existing entity using two coordinates
set_entity_movement = {
  id = 123 # id of entity
  start = {
    # position can be set using following
    x = 42
    y = 21
    province = 123
    state = 42
    z = 3 #if wanted you can specify a z to shift height of the entity
  }
  target = {
    # position can be set using following
    x = 42
    y = 21
    province = 123
    state = 42
    z = 3 #if wanted you can specify a z to shift height of the entity
  }
  ratio = 0.5 # a ratio in between 0 - 1. the entity is positioned in between start & target position using this ratio
  rotation = 1.2 # angle in radio, entity is rotated using the direction and this angle is added after that
}
Supported scopes: any

Supported targets: ???

set_entity_position - sets the position of existing entity
set_entity_position = {
  id = 123 # id of entity
  # position can be set using following
  x = 42
  y = 21
  province = 123
  state = 42
  z = 3 #if wanted you can specify a z to shift height of the entity
}
Supported scopes: any

Supported targets: ???

set_entity_rotation - sets the rotation of existing entity
set_entity_rotation = {
  id = 123 # id of entity
  rotation = 0.23 # angle in radians
}
Supported scopes: any

Supported targets: ???

set_entity_scale - sets the scale of existing entity
set_entity_scale = {
  id = 123 # id of entity
  scale = 5.0
}
Supported scopes: any

Supported targets: ???

remove_decision_on_cooldown - Removes decision on cooldown to reactivate or remove.
Example: remove_decision_on_cooldown = some_decision_here
Supported scopes: country

Supported targets:

force_update_map_mode - force rebuilds map mode. no tooltip generated.
force_update_map_mode = {
  limit = { always = yes } # limit to check against player
  mapmode = scripted_map_mode_name

Supported scopes: any

Supported targets: ???

damage_units - damages units for given conditions. no tooltip generated
damage_units = {
  #specify a location
  province = 42
  state = 5
  region = 5
  limit = { always = yes } #you can add a trigger for country check
  damage = 0.5 #if defined will damage both org & str damage with this amount
  org_damage = 0.5
  str_damage = 0.5
  ratio = yes #will damage a ratio damage to total org/str of unit if set
  template = "template_name" #you can limit army templates to damage  army = yes #will damage armies
  navy = yes #will damage navies
}
Supported scopes: any

Supported targets: ???

uncomplete_national_focus - uncompletes a focus for a country. If specified, the 'on_uncomplete' effect will be executed on each uncompleted focus.
Example: uncomplete_national_focus = {
	focus = GER_oppose_hitler
	uncomplete_children = yes # Optional. Default is no. If yes, all proceeding focuses will also be uncompleted if their prerequisite aren't met after the preceeding focuses are uncompleted.
	refund_political_power = no # Optional. Default is no. If yes, the country is refunded the political power invested in the current focus if it's canceled as a result of its prerequisites being uncompleted.
}

Supported scopes: country

Supported targets:

build_railway - Builds/adds railway level between two provinces or along a path. Example:
build_railway = {
  level = 1 # Defaults to 1
  build_only_on_allied = yes # No by default. If yes and the effect scope is country, it will only build on allied territories for the country

  # You can specify a weight function that will be used in pathing. The scope will be the controller of the province it is trying to path to.
  # A negative value will make it not to path to that controller.
  # Non-negative values will be used as a path cost for that province.
  controller_priority = {
    base = 1

    modifier = {
      tag = MAN
      add = 2
    }
  }

  # The following options are used for picking a path. You can specify multiple options and it will pick in following order:
  fallback = yes # Default no. If yes, each option will try to fallback to next one.
  # option 1: List of provinces to draw railways. If fallback = yes uses start and end provinces of the path as fallback in option 2.
  path = { 10 20 30 40 }
  # option 2: Specify start & end province IDs. It will pick the shortest path. If provinces are not valid and if fallback = yes it will use states of those provs and use in option 3.
  start_province = 42
  target_province = 84
  # option 3: Specify start & end state IDs. It will pick provinces with the best node (capital > nodes > naval )
  start_state = 50
  target_state = 100
}

Supported scopes: any

Supported targets: ???

remove_wargoal - removes war goal type targetting nation targetExample:
remove_wargoal = {
	type = take_state
	target = FRA
}
Supported scopes: country

Supported targets:

set_entity_animation - sets the rotation of existing entity
set_entity_animation = {
  id = 123 # id of entity
  animation = "shoot_lasers"
}
Supported scopes: any

Supported targets: ???

start_peace_conference - Starts a limited peace conference between the two countries if at war. Only the specified loser country and their potential subjects are included as losers in the conference. ROOT is the winner while the target tag is the loser.
Example:
SOV = {
  start_peace_conference = {
    tag = FIN  # main loser
    score_factor = 0.2  # 0-1, the fraction of conference score allocated to winners. Can use a variable like eg PREV.surrender_progress. 0.0 implies a white peace.

    # winner_scope and loser_scope can be ALL (all relevant countries), FACTION (members of main country's faction and overlordship), LIMITED_FACTION (faction members if main country is faction leader, and subjects if main country is overlord), and LIMITED (main country and their subjects)
    winner_scope = FACTION  # optional, default is LIMITED_FACTION
    loser_scope = FACTION  # optional, default is LIMITED_FACTION
    message = FIN_agree_peace  # optional, custom message to display in post-conference popup
  }
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

add_units_to_division_template - Add units to division template for a country. Example:
add_units_to_division_template = {
  template_name = "Name of template" # not needed on done on specific division
  regiments = {
    infantry = 0 # (Adds infantry to first available slot on first column (x=0))
    cavalry = 2 # (Adds cavalry to first available slot on third column (x=2))
  }
  support = {
     military_police = 0 # (Adds military_police to first available slot on first (and likely only) column of supports (x=0))
  }
}
Supported scopes: country

Supported targets:

swap_country_leader_traits - swap 2 traits on a country leader.
 Syntax: swap_country_leader_traits = { remove = <trait> add = <trait> [ideology = <ideology>] }
Supported scopes: character

Supported targets:

random_country_division - Executes children effects on a random division that fulfill the "limit" trigger. tooltip=key can be added to override tooltip title
Supported scopes: country

Supported targets:

every_country_division - "Executes children effects on every Division of the country in scope (or \"random_select_amount\" of random divisions if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching division with display_individual_scopes.
ex:
SOV = {
	every_country_division = {
		tooltip = my_loc_key # Optional
		random_select_amount = 3 # Optional
		display_individual_scopes = yes # Optional - default = no
		... division scope effects ...
	}
}"
Supported scopes: country

Supported targets:

reseed_division_commander - reseed_division_commander = 9999 [Debug & Testing Effect]
Supported scopes:

Supported targets:

give_market_access - "Gives market access to the specified country.
Example:
FRA =  {
  give_market_access = BRA  # France and Brazil will now have market access to each other
}"
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER OCCUPIED CAPITAL

set_power_balance - sets active power balance for country or sets parameters of the already active power balance

Example:
set_power_balance = {
	id = power_balance_id
	left_side = left_side_id
	right_side = right_side_id
	set_default = yes/no # default = no
	set_value = 0.5 # if used, will set the new value of the power balance
}
Supported scopes: country

Supported targets:

remove_power_balance - removes power balance from country

Example:
remove_power_balance = {
	id = power_balance_id
}
Supported scopes: country

Supported targets:

add_power_balance_value - adds current value of a power balance

Example:
add_power_balance_value = {
	id = power_balance_id
	value = 0.42 # this value is added to the current value of the power balance
	tooltip_side = side_id # optional - add this to tell the game to show the name of the specific side in the tooltip
}
Supported scopes: any

Supported targets:

set_division_template_cap - Set division cap for a division template
Example: set_division_template_cap = { division_template = <name> division_cap = <int (default:1)> }
Supported scopes: country

Supported targets:

clear_division_template_cap - Clears division cap for a division template
Example: clear_division_template_cap = { division_template = <name>  }
Supported scopes: country

Supported targets:

set_character_flag - set character flag
Supported scopes: character

Supported targets:

modify_character_flag - modify character flag. Only modifies if flag already exists.
Example: _modify_character_flag_ = { flag = <name> value = <number> }
Supported scopes: character

Supported targets:

clr_character_flag - clear character flag
Supported scopes: character

Supported targets:

every_core_state - "Executes children effects on every core State of the country in scope (or \"random_select_amount\" of random state if specified) that fulfills the \"limit\" trigger.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching state with display_individual_scopes.
ex:
SOV = {
	every_core_state = {
		tooltip = my_loc_key # Optional
		random_select_amount = 3 # Optional
		display_individual_scopes = yes # Optional - default = no
		... state scope effects ...
	}
}"
Supported scopes: country

Supported targets:

random_core_state - Executes children effects on random core state that fulfills the "limit" trigger.
prioritize = { <stateID> <stateID> } to pick those states first if they fulfull the limit
Supported scopes: country

Supported targets:

transfer_state_to - Set owner and controller of a state to a given country
Example:\n"
USA {
	every_core_state = {
		transfer_state_to = JAM
	}
}

Supported scopes: state

Supported targets: none THIS

set_state_owner_to - Set owner of a state to a given country
Example:\n"
USA {
	random_core_state = {
		set_state_owner_to = JAM
	}
}

Supported scopes: state

Supported targets: none THIS

set_state_controller_to - Set controller of a state to a given country
Example:\n"
USA {
	random_core_state = {
		set_state_controller_to = JAM
	}
}

Supported scopes: state

Supported targets: none THIS

remove_country_leader_role - Remove country leader role from character.
Example:
remove_country_leader_role = {
	character = "GER_Character_Token" # optional if inside character scope
	ideology = socialism
}

Supported scopes: country character

Supported targets:

party_leader - Executes children effects on random characters that fulfills the "limit" trigger.
Has to use has_ideology in limit to determine the party (with ideology group)
tooltip=key can be added to override tooltip title

party_leader = {
	limit = { has_ideology = communism }
	set_character_flag = whatever_flag
}
Supported scopes: country

Supported targets:

generate_character - Generates a character. Use in every_country in order to generates one copy of the character per country satisfying the limit conditions.
every_country = {
	limit = { OR = { original_tag = KOR original_tag = SER original_tag = ICE } }
	generate_character = { #create + recruit
		token_base = army_chief_defensive_1 # mandatory, character token will be token_base
		name = "Character's Name" # optional, no name provided means random name for each generated character
		# then whatever you would put when writing character
		advisor = {
			idea_token = ac # full idea token will be token_base_idea_token (to ensure unicity). optional, slot will be used if missing.
			slot = army_chief
			allowed = { original_tag = PREV }
			traits = { army_chief_defensive_1 }
		}
	}
}
Supported scopes: country

Supported targets: ???

every_possible_country - "Executes children effects on every Country (or \"random_select_amount\" of random country if specified) that fulfills the \"limit\" trigger.
Difference with every_country is that it includes countries not yet present on the map.
tooltip=key can be added to override tooltip title.
By default the effects are only displayed once, you may display them for each matching country with display_individual_scopes.
ex:
every_possible_country = {
	tooltip = my_loc_key # Optional
	random_select_amount = 3 # Optional
	display_individual_scopes = yes # Optional - default = no
	... country scope effects ...
}"
Supported scopes: any

Supported targets:

show_unit_leaders_tooltip - show unit leader's name
Supported scopes: country

Supported targets:

character_list_tooltip - Display in tooltip every character  (or "random_select_amount" of random characters if specified) that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

remove_unit_leader_role - Remove unit leader role to character

Example:
remove_corps_commander_role = {
	character = GER_Character_token
}
remove_corps_commander_role = yes # inside a character scope

Supported scopes: country character

Supported targets:

set_portraits - set portraits for the target character. Syntax is similar to character files.

example:
set_portraits = {
		character = my_character # optional, use if not in a character scope		army = { small ="MySmallCharacterGFX"}
		civilian = { large ="MyLargeCharacterGFX" }
}

Supported scopes: country character

Supported targets:

set_character_name - "set name for the target character. Either localization key or direct name.
example:
set_character_name = {
	character = my_character # optional, use if not in a character scope
	name = my_name # either loc key or direct name
}
my_character = {
	set_character_name = my_name # only possible in character scope
}
Supported scopes: country character

Supported targets:


=================

== DYNAMIC VARIABLE DOCUMENTATION ==

== Global Dynamic Variables ==
countries : get array of all countries (including non existing

date : get date value that can be comparable to other date values and localized using GetDateString/GetDateStringShortMonth/GetDateStringNoHour/GetDateStringNoHourLong scripted locs

ideology_groups : array of objects in ideology_groups database

majors : get array of all majors (including non existing

num_days : current total days

operations : array of objects in operations database

province_controllers : get array of all province controllers. Example: province_controllers^4135

states : get array of all states

technology : array of objects in technology database

year : current year

(Trigger) difficulty : check if the difficulty is above or below specified value 0-2 (difficulty enum). Example: difficulty > 0 (above easy)

(Trigger) num_of_career_profile_points : check amount of gained career points

(Trigger) pc_turn : Checks turn number in PC.
Example:
pc_turn > 20

(Trigger) power_balance_daily_change : compares current total daily change of a power balance

Example:
power_balance_daily_change = {
	id = power_balance_id
	value > 0.5 # supported operators are: >, < and =
}

(Trigger) power_balance_value : compares current value of a power balance

Example:
power_balance_value = {
	id = power_balance_id
	value > 0.5 # supported operators are: >, < and =
}

(Trigger) power_balance_weekly_change : compares current total weekly change of a power balance

Example:
power_balance_weekly_change = {
	id = power_balance_id
	value > 0.5 # supported operators are: >, < and =
}

(Trigger) threat : check the global threat value (world tension). 0-1 value


=================

== Country Dynamic Variables ==
ai_attitude_allied_weight : weight for an ai attitude attitude_alliedagainst country. Example: GER.ai_attitude_allied_weight@ENG

ai_attitude_friendly_weight : weight for an ai attitude attitude_friendlyagainst country. Example: GER.ai_attitude_friendly_weight@ENG

ai_attitude_hostile_weight : weight for an ai attitude attitude_hostileagainst country. Example: GER.ai_attitude_hostile_weight@ENG

ai_attitude_is_threatened : returns 1 if ai is threatened

ai_attitude_neutral_weight : weight for an ai attitude attitude_neutralagainst country. Example: GER.ai_attitude_neutral_weight@ENG

ai_attitude_outraged_weight : weight for an ai attitude attitude_outragedagainst country. Example: GER.ai_attitude_outraged_weight@ENG

ai_attitude_protective_weight : weight for an ai attitude attitude_protectiveagainst country. Example: GER.ai_attitude_protective_weight@ENG

ai_attitude_threatened_weight : weight for an ai attitude attitude_threatenedagainst country. Example: GER.ai_attitude_threatened_weight@ENG

ai_attitude_wants_ally : returns 1 if ai wants ally

ai_attitude_wants_antagonize : returns 1 if ai wants antagonize

ai_attitude_wants_ignore : returns 1 if ai wants ignore

ai_attitude_wants_protect : returns 1 if ai wants protect

ai_attitude_wants_weaken : returns 1 if ai wants weaken

ai_strategy_activate_crypto : ai strategy value activate_crypto against country. Example: GER.ai_strategy_activate_crypto@ENG

ai_strategy_alliance : ai strategy value alliance against country. Example: GER.ai_strategy_alliance@ENG

ai_strategy_antagonize : ai strategy value antagonize against country. Example: GER.ai_strategy_antagonize@ENG

ai_strategy_befriend : ai strategy value befriend against country. Example: GER.ai_strategy_befriend@ENG

ai_strategy_conquer : ai strategy value conquer against country. Example: GER.ai_strategy_conquer@ENG

ai_strategy_consider_weak : ai strategy value consider_weak against country. Example: GER.ai_strategy_consider_weak@ENG

ai_strategy_contain : ai strategy value contain against country. Example: GER.ai_strategy_contain@ENG

ai_strategy_declare_war : ai strategy value declare_war against country. Example: GER.ai_strategy_declare_war@ENG

ai_strategy_decrypt_target : ai strategy value decrypt_target against country. Example: GER.ai_strategy_decrypt_target@ENG

ai_strategy_dont_defend_ally_borders : ai strategy value dont_defend_ally_borders against country. Example: GER.ai_strategy_dont_defend_ally_borders@ENG

ai_strategy_force_defend_ally_borders : ai strategy value force_defend_ally_borders against country. Example: GER.ai_strategy_force_defend_ally_borders@ENG

ai_strategy_ignore : ai strategy value ignore against country. Example: GER.ai_strategy_ignore@ENG

ai_strategy_ignore_claim : ai strategy value ignore_claim against country. Example: GER.ai_strategy_ignore_claim@ENG

ai_strategy_influence : ai strategy value influence against country. Example: GER.ai_strategy_influence@ENG

ai_strategy_invade : ai strategy value invade against country. Example: GER.ai_strategy_invade@ENG

ai_strategy_occupation_policy : ai strategy value occupation_policy against country. Example: GER.ai_strategy_occupation_policy@ENG

ai_strategy_prepare_for_war : ai strategy value prepare_for_war against country. Example: GER.ai_strategy_prepare_for_war@ENG

ai_strategy_protect : ai strategy value protect against country. Example: GER.ai_strategy_protect@ENG

ai_strategy_send_volunteers_desire : ai strategy value send_volunteers_desire against country. Example: GER.ai_strategy_send_volunteers_desire@ENG

ai_strategy_support : ai strategy value support against country. Example: GER.ai_strategy_support@ENG

air_chief : returns the currently hired air chief of the country

air_experience : air experience of a country

air_intel : air intel against a target country. example GER.air_intel@ENG

allies : array of allies (faction members). prefer using faction_members instead

army_chief : returns the currently hired army chief of the country

army_experience : army experience of a country

army_intel : army intel against a target country. example GER.army_intel@ENG

army_leaders : all army leaders of a country

autonomy_ratio : autonomy of scope country. -1 if not a subject

capital : capital state of the country

civilian_intel : civilian intel against a target country. example GER.civilian_intel@ENG

command_power : total command power of country

controlled_states : array of controlled states

core_compliance : returns core compliance of target country

core_resistance : returns core resistance of target country

core_states : array of core states

country_leader : returns the current country leader of the country

cryptology_defense_level : cryptology defense level of a country

current_party_ideology_group : returns the token for current party ideology group

days_decision_timeout : timeout in days for a specific timed decision, decision type token is defined in target. example: days_decision_timeout@SOV_propaganda_knowledge

days_mission_timeout : timeout in days for a specific timed mission, mission type token is defined in target. example: days_mission_timeout@GER_mefo_bills_mission

decryption_speed : total encryption strength of a country that is needed

deployed_airforce_manpower_k : total deployed air manpower of country in thousands. Does not include exile manpower

deployed_army_manpower_k : total deployed army manpower of country in thousands.

deployed_navy_manpower_k : total deployed navy manpower of country in thousands.

deployed_total_manpower_k : total deployed manpower of country in thousands.

encryption_strength : total encryption strength of a country that is needed

enemies : array of enemies at war with

enemies_of_allies : array of enemies of allies

exiles : exile host of this country

faction_leader : faction leader of this country's faction

faction_members : array of faction members

fuel_k : total fuel of country in thousands

high_command : returns an array with the currently hired high command of the country

highest_party_ideology : ideology of the most popular party. Can exclude the ruling party by using @exclude_ruling_party. Example: highest_party_ideology OR highest_party_ideology@exclude_ruling_party

highest_party_popularity : popularity size of the most popular party [0.00, 1.00]. Can exclude the ruling party by using @exclude_ruling_party. Example: highest_party_popularity OR highest_party_popularity@exclude_ruling_party

host : exile host of this country

legitimacy : legitimacy of scope country. -1 if not an exile

manpower : DEPRECATED, MAY OVERFLOW. total manpower of country

manpower_k : total manpower of country in thousands

max_available_manpower : DEPRECATED, MAY OVERFLOW. total available manpower of country

max_available_manpower_k : total available manpower of country in thousands

max_fuel_k : max fuel of country in thousands

max_manpower : DEPRECATED, MAY OVERFLOW. maximum manpower of country

max_manpower_k : maximum manpower of country in thousands

modifier : a modifier stored in country scope

navy_chief : returns the currently hired navy chief of the country

navy_experience : navy experience of a country

navy_intel : navy intel against a target country. example GER.navy_intel@ENG

navy_leaders : all navy leaders of a country

neighbors : array of neighbors

neighbors_owned : array of neighbors to owned states

num_armies : number of armies

num_armies_in_state : number of armies in state, state is in target. example num_armies_in_state@123

num_armies_with_type : number of armies with dominant type, dominant type is defined in target. example: num_armies_with_type@light_armor

num_battalions : number of battalions

num_battalions_with_type : number of battalions with sub unit type, sub unit type is defined in target. example: num_battalions_with_type@light_armor

num_controlled_states : number of controlled states

num_core_states : number of core states

num_deployed_planes : number of deployed planes

num_deployed_planes_with_type : number of deployed planes with equipment type. example num_deployed_planes_with_type@fighter

num_equipment : number of equipment in country. example num_equipment@infantry_equipment

num_equipment_in_armies : number of equipment in armies of the country, equipment type token is defined in target. example num_equipment_in_armies@infantry_equipment

num_equipment_in_armies_k : number of equipment in armies of the country in thousands, equipment type token is defined in target. example num_equipment_in_armies_k@infantry_equipment

num_orders_groups : number of orders groups

num_owned_controlled_states : number of owned and core states

num_owned_states : number of owned states

num_ships : number of ships

num_ships_with_type : number of ships controlled in country, ship type is defined in target. example num_ships_with_type@carrier. can be a sub unit def type or one of carrier,capital,screen, submarine

num_target_equipment_in_armies : number of equipment required in armies of the country, equipment type token is defined in target. example num_target_equipment_in_armies@infantry_equipment

num_target_equipment_in_armies_k : number of equipment required in armies of the country in thousands, equipment type token is defined in target. example num_target_equipment_in_armies_k@infantry_equipment

occupied_countries : array of occupied countries

operatives : all operatives of a country

opinion : opinion of a country targeted on another one. example GER.opinion@ENG

original_tag : returns the original tag of a country

overlord : master of this subject

owned_controlled_states : array owned and core states

owned_states : array of owned states

party_popularity : popularity of targeted party [0.00, 1.00]. example party_popularity@democratic. May also target ruling_party. This also supports country variables, so you can party_popularity@my_var_name for variables that store ideologies

party_popularity_100 : popularity of targeted party [0.00, 100.00]. example party_popularity_100@democratic. May also target ruling_party. This also supports country variables, so you can party_popularity_100@my_var_name for variables that store ideologies

political_advisor : returns an array with the currently hired political advisors of the country

political_power : total political power of country

potential_and_current_enemies : array of potential and actual enemies

power_balance_daily : current total power balance daily change

power_balance_value : current power balance value

power_balance_weekly : current total power balance weekly change

researched_techs : returns the array of researched technologies

resource : number of surplus resources in country, resource type is defined in target resource@steel

resource_consumed : number of resources consumed by country, resource type is defined in target resource_consumed@steel

resource_exported : number of resources exported by country, resource type is defined in target resource_exported@steel

resource_imported : number of resources imported by country, resource type is defined in target resource_imported@steel

resource_produced : number of resources produced by country, resource type is defined in target. example resource_produced@steel

stability : stability of a country

subjects : array of subjects

theorist : returns the currently hired theorist of the country

total_constructed_air_base : Total constructions of air_base

total_constructed_anti_air : Total constructions of anti_air

total_constructed_civilian_factory : Total constructions of civilian_factory

total_constructed_dockyard : Total constructions of dockyard

total_constructed_fuel_silo : Total constructions of fuel_silo

total_constructed_infrastructure : Total constructions of infrastructure

total_constructed_land_fort : Total constructions of land_fort

total_constructed_military_factory : Total constructions of military_factory

total_constructed_naval_fort : Total constructions of naval_fort

total_constructed_nuclear_reactor : Total constructions of nuclear_reactor

total_constructed_other : Total constructions of other

total_constructed_port : Total constructions of port

total_constructed_radar : Total constructions of radar

total_constructed_refinery : Total constructions of refinery

total_constructed_rocket_site : Total constructions of rocket_site

total_constructed_supply_node : Total constructions of supply_node

total_equipment_produced_ : Total produced equipment of type

total_equipment_produced_air_transport : Total produced equipment of typeair_transport

total_equipment_produced_amphibious : Total produced equipment of typeamphibious

total_equipment_produced_anti_air : Total produced equipment of typeanti_air

total_equipment_produced_anti_tank : Total produced equipment of typeanti_tank

total_equipment_produced_armor : Total produced equipment of typearmor

total_equipment_produced_artillery : Total produced equipment of typeartillery

total_equipment_produced_capital_ship : Total produced equipment of typecapital_ship

total_equipment_produced_carrier : Total produced equipment of typecarrier

total_equipment_produced_cas : Total produced equipment of typecas

total_equipment_produced_convoy : Total produced equipment of typeconvoy

total_equipment_produced_fighter : Total produced equipment of typefighter

total_equipment_produced_flame : Total produced equipment of typeflame

total_equipment_produced_floating_harbor : Total produced equipment of typefloating_harbor

total_equipment_produced_heavy_fighter : Total produced equipment of typeheavy_fighter

total_equipment_produced_infantry : Total produced equipment of typeinfantry

total_equipment_produced_interceptor : Total produced equipment of typeinterceptor

total_equipment_produced_maritime_patrol_plane : Total produced equipment of typemaritime_patrol_plane

total_equipment_produced_mechanized : Total produced equipment of typemechanized

total_equipment_produced_missile : Total produced equipment of typemissile

total_equipment_produced_motorized : Total produced equipment of typemotorized

total_equipment_produced_naval_bomber : Total produced equipment of typenaval_bomber

total_equipment_produced_railway_gun : Total produced equipment of typerailway_gun

total_equipment_produced_rocket : Total produced equipment of typerocket

total_equipment_produced_scout_plane : Total produced equipment of typescout_plane

total_equipment_produced_screen_ship : Total produced equipment of typescreen_ship

total_equipment_produced_strategic_bomber : Total produced equipment of typestrategic_bomber

total_equipment_produced_submarine : Total produced equipment of typesubmarine

total_equipment_produced_suicide : Total produced equipment of typesuicide

total_equipment_produced_support : Total produced equipment of typesupport

total_equipment_produced_tactical_bomber : Total produced equipment of typetactical_bomber

total_equipment_produced_train : Total produced equipment of typetrain

(Trigger) agency_upgrade_number : Checks the number of upgrade done in the intelligence agency.
agency_upgrade_number > 4

(Trigger) ai_irrationality : check the ai irrationality value

(Trigger) ai_wants_divisions : Will compare towards the amount of divisions an ai wants to have.

(Trigger) alliance_naval_strength_ratio : Compares the estimated naval strength between the scope country, his allies and his enemies.

(Trigger) alliance_strength_ratio : Compares the estimated army strength between the scope country, his allies and his enemies.

(Trigger) amount_manpower_in_deployment_queue : Checks for amount manpower currently in deploymentview. amount_manpower_in_training > 10

(Trigger) amount_research_slots : check number of research current research slots
 amount_research_slots > 2

(Trigger) any_war_score : compares the warscore of all wars in a country to see if any fullfills the comparison condition 0-100 - Example: any_war_score > 40

(Trigger) casualties : Check the amount of casualties a country has suffered in all of it's wars

(Trigger) casualties_k : Check the amount of casualties in thousands a country has suffered in all of it's wars

(Trigger) command_power_daily : Checks if daily command power increase is more or less that specified value
 command_power_daily > 1.5

(Trigger) compare_autonomy_progress_ratio : check if autonomy progress ratio is higher than value, example:
compare_autonomy_progress_ratio > 0.5

(Trigger) convoy_threat : A trigger to check convoy threat for a country. Controlled by NAVAL_CONVOY_DANGER defines. Returns a value between 0 and 1. Example convoy_threat > 0.5

(Trigger) days_since_capitulated : Checks the number of days since the country last capitulated, even if it is no longer capitulated.
	If it has not ever capitulated, the value is extremely large.
	It is recommended to combine this with has_capitulated = yes when you specifically want to ignore non-active capitulations.
Examples:
	HOL = { has_capitulated = yes days_since_capitulated > 60 } # The Netherlands has been capitulated for more than two months
	FRA = { has_capitulated = yes days_since_capitulated < 21 } # France has capitulated sometime within the past three weeks
	GER = { OR = { has_capitulated = no days_since_capitulated > 14 } } # Germany is not both actively and recently capitulated


(Trigger) decryption_progress : checks decryption ratio against a country. Example:
decryption_progress = {
 target = GER
 value > 0.5
}
#or decryption_progress@GER as variable


(Trigger) enemies_naval_strength_ratio : Compares the estimated navy strength between the scope country and all its enemies

(Trigger) enemies_strength_ratio : Compares the estimated army strength between the scope country and all its enemies

(Trigger) foreign_manpower : check the amount of foreign garrison manpower we have

(Trigger) fuel_ratio : Compares the fuel ratio to a variable.
Example: fuel_ratio > 0.5

(Trigger) garrison_manpower_need : check the amount of manpower needed by garrisons

(Trigger) has_added_tension_amount : Compare if the country has added above or below the specified ammount of tension

(Trigger) has_bombing_war_support : check value of bombing malus to war support 0-1: Example has_bombing_war_support < 0.1

(Trigger) has_casualties_war_support : check value of casualties malus to war support 0-1: Example has_casualties_war_support < 0.1

(Trigger) has_collaboration : checks the collaboration in a target country with our currently scoped country. Example:
has_collaboration = {
 target = GER
 value > 0.5
}
#or has_collaboration@GER as variable


(Trigger) has_convoys_war_support : check value of convoys sunk malus to war support 0-1: Example has_convoys_war_support < 0.1

(Trigger) has_legitimacy : Check scope country legitimacy 0-100: Example has_legitimacy < 60

(Trigger) has_manpower : check amount of manpower

(Trigger) has_political_power : check amount of political power

(Trigger) has_stability : check value of stability 0-1: Example has_stability < 0.6

(Trigger) has_war_support : check value of war_support 0-1: Example has_war_support < 0.6

(Trigger) land_doctrine_level : checks researched land doctrine level

(Trigger) longest_war_length : Check number of months the country has been at war

(Trigger) manpower_per_military_factory : Number of available manpower per factory the country has. Excluding dockyards.
manpower_per_military_factory < 1000

(Trigger) mine_threat : A trigger to check how dangerous enemy mines are for a country. Controlled by NAVAL_MINE_DANGER defines. Returns a value between 0 and 1. Example mine_threat > 0.5

(Trigger) network_national_coverage : checks network national coverage you have over a country. Example:
network_national_coverage = {
 target = GER
 value > 0.5
}


(Trigger) num_divisions : Will compare towards the amount of divisions a country has control over, if strength matters use has_army_size.

(Trigger) num_faction_members : Compares the number of members in the faction for the current country.
 Example: num_faction_members > 10

(Trigger) num_fake_intel_divisions : Will compare towards the amount of fake intel divisions a country has control over. .

(Trigger) num_free_operative_slots : Checks the number of operative a country can recruit right now.
Note that this is not necessarily greater than zero if num_operative_slots returned a number greater than the number of operative.

(Trigger) num_occupied_states : check the number of states occupied by nation

(Trigger) num_of_available_civilian_factories : check amount of available civilian factories

(Trigger) num_of_available_military_factories : check amount of available military factories

(Trigger) num_of_available_naval_factories : check amount of available naval factories

(Trigger) num_of_civilian_factories : check amount of civilian factories

(Trigger) num_of_civilian_factories_available_for_projects : check amount of civilian factories available for a new project to use

(Trigger) num_of_controlled_factories : check the number of factories in controlled states excluding any gained or lost through trade, relations, modifiers etc.

(Trigger) num_of_controlled_states : check amount of controlled stats

(Trigger) num_of_factories : Check amount of available factories (excluding temporary sources like trade and lend-lease)
Example:
GER = { num_of_factories < 50 }

(Trigger) num_of_military_factories : check amount of military factories

(Trigger) num_of_naval_factories : check amount of naval factories

(Trigger) num_of_nukes : check amount of nukes

(Trigger) num_of_operatives : Checks the number of operatives the country controls

(Trigger) num_of_owned_factories : check the number of factories in owned states excluding any gained or lost through trade, relations, modifiers etc.

(Trigger) num_of_supply_nodes : check amount of supply nodes

(Trigger) num_operative_slots : Checks the number of available operative slots a country has.
If this differs from the number of operative, this does not mean the country can recruit an operative, but that it will eventually be able to.

(Trigger) num_researched_technologies : Number of researched technologies

(Trigger) num_subjects : check the number of subjects of nation

(Trigger) num_tech_sharing_groups : checks how many groups a nation is a member of

(Trigger) original_research_slots : check number of research slots at start of game

(Trigger) pc_current_score : Checks country's total peace conference score. Only usable if the country is on the winning side.
Example:
CZE = { pc_current_score > 400 }

(Trigger) pc_total_score : Checks country's total peace conference score. Only usable if the country is on the winning side.
Example:
CZE = { pc_total_score > 400 }

(Trigger) political_power_daily : Checks if daily political power increase is more or less that specified value
 political_power_daily > 1.5

(Trigger) political_power_growth : Check the value of political power daily growth.Exacmple: political_power_growth > 0

(Trigger) surrender_progress : check if a country is close to surrendering


=================

== State Dynamic Variables ==
arms_factory_level : military factory level in the state

building_level : building level of a building with type, uses target as building type. example building_level@arms_factory

controller : controller of the state

core_countries : countries that cores the state

damaged_building_level : damaged building level of a building with type, uses target as building type. example damaged_building_level@arms_factory

distance_to : distance to another state, uses target as another state. example: 123.distance_to@124

industrial_complex_level : civilian factor level in the state

infrastructure_level : infrastructure level in the state

modifier : value of modifier stored in this state, uses target as modifier token, example: 123.modifier@local_manpower

non_damaged_building_level : non damaged building level of a building with type, uses target as building type. example non_damaged_building_level@arms_factory

owner : owner of the state

resource : resources produced in state. example resource@steel

(Trigger) compliance : Compares the current compliance level of a state to a value. Example: compliance > 50

(Trigger) compliance_speed : Compares the current compliance speed of a state to a value. Example: compliance_speed > 50

(Trigger) days_since_last_strategic_bombing : Checks the days since last strategic bombing.
days_since_last_strategic_bombing < 10


(Trigger) resistance : Compares the current resistance level of a state to a value. Example: resistance > 50

(Trigger) resistance_speed : Compares the current resistance speed of a state to a value. Example: resistance_speed > 50

(Trigger) resistance_target : Compares the target resistance level of a state to a value. Example: resistance_target > 50

(Trigger) state_and_terrain_strategic_value : Checks for state strategic value

(Trigger) state_population : check the population in the state

(Trigger) state_population_k : check the population in the state in thousands (use to avoid variable overflows)

(Trigger) state_strategic_value : Checks for state strategic value


=================

== Unit Leader Dynamic Variables ==
army_attack_level : attack level of the leader

army_defense_level : defense level of the leader

attack_level : attack level of the leader

average_stats : average stats of unit leader

avg_combat_status : average progress of all combats

avg_defensive_combat_status : average progress of defensive combats

avg_offensive_combat_status : average progress of offensive combats

avg_unit_planning_ratio : average planning ratio of all units

avg_units_acclimation : average unit acclimatization for a specific climate, acclimatization type is defined in target. example avg_units_acclimation@cold_climate

coordination_level : coordination level of the leader

defense_level : defense level of the leader

has_orders_group : 1 if leader has orders group, zero otherwise

intel_yield_factor_on_capture : Rate at which intel is extracted from this operative by an enemy country.

leader_modifier : value of a modifier stored in leader modifier, modifier token is defined in target. example leader_modifier@navy_max_range

logistics_level : logistics level of the leader

maneuvering_level : maneuvering level of the leader

num_armored : number of units with armored dominant type

num_artillery : number of units with artillery dominant type

num_assigned_traits : number of assigned traits the leader has

num_basic_traits : number of basic traits a leader has

num_battalions : number of battalions

num_battalions_with_type : number of battalions with sub unit type, sub unit type is defined in target. example: num_battalions_with_type@light_armor

num_battle_plans : number of battle plans of unit leader

num_cavalry : number of units with cavalry dominant type

num_equipment : number of equipment in army of a leader, equipment type token is defined in target. example num_equipment@infantry_equipment

num_infantry : number of units with infantry dominant type

num_max_traits : number of maximum assignable traits a leader can have

num_mechanized : number of units with mechanized dominant type

num_motorized : number of units with motorized dominant type

num_personality_traits : number of personality traits a leader has

num_rocket : number of units with rocket dominant type

num_ships : number of ships controlled by leader

num_ships_with_type : number of ships controlled by leader, ship type is defined in target. example num_ships_with_type@carrier

num_special : number of units with special dominant type

num_status_traits : number of status traits a leader has

num_target_equipment : number of equipment required in army of a leader, equipment type token is defined in target. example num_target_equipment@infantry_equipment

num_terrain_traits : number of terrain traits a leader has

num_traits : number of traits a leader has

num_units : number of units controlled by leader

num_units_crossing_river : number of units currently passing through a river

num_units_defensive_combats : number of units in defensive combats

num_units_defensive_combats_on : number of units that are defensively fighting on a terrain, terrain type is defined as target. example: num_units_defensive_combats_on@plains

num_units_in_combat : number of units current fighting

num_units_in_state : number of units controlled by leader in state, state is in target. example num_units_in_state@123

num_units_offensive_combats : number of units in offensive combats

num_units_offensive_combats_against : number of units that are offensively fighting against a terrain, terrain type is defined as target. example: num_units_offensive_combats_against@plains

num_units_on_climate : number of units that are on an acclimatization required location, acclimatization type is defined in target. example num_units_on_climate@hot_climate

num_units_with_type : number of units with dominant type controlled by leader, dominant type is defined in target. example: num_units_with_type@light_armor

operation_country : the country location the operative is assigned. 0 if it is not assigned to a country

operation_state : the state location the operative is assigned. 0 if it is not assigned to a state

operation_type : returns the operation token the operative is assigned

operative_captor : returns the country tag that captured the operative

own_capture_chance_factor : The chance this operative has to be captured, taking into account the country it is operating for and the country it is operating against.

own_forced_into_hiding_time_factor : The time factor applied to the status "forced into hiding". Takes into account the country it is operating for and the country it is operating against.

own_harmed_time_factor : The time factor applied to the status "harmed". Takes int accountthe country it is operating for and the country it is operating against.

planning_level : planning level of the leader

skill_level : skill level of the leader

sum_unit_terrain_modifier : sum of terrain modifiers of each army's location, terrain type is defined in target. example: sum_unit_terrain_modifier@sickness_chance

unit_modifier : value of a modifier stored in unit modifier, modifier token is defined in target. example unit_modifier@army_attack_factor

unit_ratio_ready_for_plan : ratio of units that are ready for plan

(Trigger) attack_skill_level : Compares attack skill level of a unit leader.
Example: attack_skill_level > 5

(Trigger) defense_skill_level : Compares defense skill level of a unit leader.
Example: defense_skill_level > 5

(Trigger) logistics_skill_level : Compares logistics skill level of a unit leader.
Example: logistics_skill_level > 5

(Trigger) planning_skill_level : Compares planning skill level of a unit leader.
Example: planning_skill_level > 5

(Trigger) skill : compare leader skill levels


=================

== Military Industrial Organization Dynamic Variables ==
funds : Funds of the military industrial organization

max_task_capacity : Maximum task capacity of the military industrial organization.

modifier : Value of the modifier stored in the military industrial organization.
ex: modifier@military_industrial_organization_research_bonus

number_of_currently_assigned_tasks : Number of tasks the military industrial organization is currently assigned to

number_of_unlocked_traits : Number of unlocked traits of the military industrial organization.

number_of_unused_trait_points : Number of unused trait points of the military industrial organization

research_bonus : Research bonus of the military industrial organization when assigned to a research slot

size : Size of the military industrial organization


=================

=================
