# Original Written by Killerrabbit
# Reworked by Gearz, and Angriest Bird

# GDP Calculation
# Calculating things for the money system
#Interest rates are set in GDP/C - need modifier based on debt_ratio, to avoid rich countries getting infinite rich by taking huge loans and reinvesting abroad
#Variable explanations
#####treasury_rate - How much money your country is making daily#####
#tax_gain - money your gaining from taxes
#int_investments_rate - money your gaining from international investments
#resource_sale_rate - money your gaining from exports
#size_modifier - total size of the targeted country

#####expense_gain - total amount of money your spending#####
#debt_rate - How much money your country owes in debt
#interest_rate - the interest  rate you pay DAILY on debt.
#econ_cycle_upg_cost - cost to upgrade economic cycle
#bureaucracy_gain cost for bureaucracy law
#education_gain cost of education law
#health_gain cost of health care law
#welfare_gain cost of welfare law
#military_rate cost of military law
#personnel_cost - how much you pay soldiers and maintenance on equipment

#corporation_tax - Value of the Corporate taxes
#population_tax - value of the population tax
#corporation_tax_rate - Tax rate
#population_tax_rate - pop tax rate

###Treasury reset### -- Legacy commands. Moved this functionality to a update_display command
#In a couple places I've left a comment saying referring to treasury reset explanation. This is the explanation
#It took me a while to figure out why you add debt_rate to treasury_rate so ill try to explain (Gearz)
#When your debt_rate changes you need to "reset the treasury_rate" so you return
#how much you were taking from the treasury before and then take the new amount you need
#e.g treasury_rate $10B, you take $2B for your current debt_rate. Treasury rate = $8B
#Your new debt_rate is $4B. So you need to "reset the treasury" you give the treasury_rate back the $2B
#So treasury_rate is now back to $10B, now subtract the $4B and now treasury rate is $6B
###

#Startup for building the money system. This is to be used whenever setting up a nation for the the first time.
startup_extra_setup = {
	firsttime_calculate_size_modifier = yes
	update_state_variables = yes
	calculate_interest_rate = yes
	calculate_debt_rate = yes
	calculate_int_investments_rate = yes
	calculate_resource_sale_rate = yes
	calculate_tax_gain = yes
	init_expenses = yes
	set_variable = { econ_cycle_upg_cost = 6 }
	multiply_variable = { var = econ_cycle_upg_cost value = size_modifier }
	if = { limit = { has_idea = the_euro }	multiply_variable = { econ_cycle_upg_cost = 1.5 } }
}

ingame_update_setup = {
	ingame_calculate_size_modifier = yes
	update_state_variables = yes
	update_military_rate = yes
	calculate_interest_rate = yes
	calculate_debt_rate = yes
	calculate_int_investments_rate = yes
	calculate_resource_sale_rate = yes
	calculate_tax_gain = yes
	init_expenses = yes
	set_variable = { econ_cycle_upg_cost = 6 }
	multiply_variable = { var = econ_cycle_upg_cost value = size_modifier }
	if = { limit = { has_idea = the_euro }	multiply_variable = { econ_cycle_upg_cost = 1.5 } }
}

#Calculates the "Size" of industry. It uses the resource exports and civilian factories to judge the size of the countries economy. - Bird
#Updating this to include more than just Civilian industries as now dockyards, military industries and offices give tax revenues
firsttime_calculate_size_modifier = {
	set_variable = { resource_exports = resource_exported@steel }
	add_to_variable = { resource_exports = resource_exported@oil }
	add_to_variable = { resource_exports = resource_exported@aluminium }
	add_to_variable = { resource_exports = resource_exported@tungsten }
	add_to_variable = { resource_exports = resource_exported@rubber }
	add_to_variable = { resource_exports = resource_exported@chromium }
	multiply_variable = { resource_exports = 0.125 }
	round_variable = resource_exports

	set_variable = { size_modifier = num_of_civilian_factories }
	add_to_variable = { size_modifier = ROOT.office_park_total }
	add_to_variable = { size_modifier = num_of_naval_factories }
	add_to_variable = { size_modifier = num_of_military_factories }

	#Note from Bird: Removed import calculations. No nation in MD starts with imports therefore its useless calculations
	if = {
		limit = { check_variable = { size_modifier = 0 } }
		add_to_variable = { var = size_modifier value = 0.03 }
		else = {
			multiply_variable = { var = size_modifier value = 0.22 }
			if = {
				limit = { check_variable = { size_modifier > 1.1 } }
				subtract_from_variable = { var = size_modifier value = 0.58 }
			}
			else_if = {
				limit = { check_variable = { size_modifier = 0.22 } }
				subtract_from_variable = { var = size_modifier value = 0.14 }
			}
			else_if = {
				limit = { check_variable = { size_modifier = 0.44 } }
				subtract_from_variable = { var = size_modifier value = 0.30 }
			}
			else_if = {
				limit = { check_variable = { size_modifier = 0.66 } }
				subtract_from_variable = { var = size_modifier value = 0.43 }
			}
			else_if = {
				limit = { check_variable = { size_modifier = 0.88 } }
				subtract_from_variable = { var = size_modifier value = 0.50 }
			}
			else_if = {
				limit = { check_variable = { size_modifier = 1.1 } }
				subtract_from_variable = { var = size_modifier value = 0.56 }
			}
		}
	}
}

#Rewrote Size Modifier
ingame_calculate_size_modifier = {
	#Both use the entire economy now
	set_temp_variable = { size_mod_check = num_of_civilian_factories }
	add_to_temp_variable = { size_mod_check = ROOT.office_park_total }
	add_to_temp_variable = { size_mod_check = num_of_naval_factories }
	add_to_temp_variable = { size_mod_check = num_of_military_factories }

	##Used to prevent instant bankruptcy
	#Further this is used to readd the civvies you lose due to export.
	set_temp_variable = { temp_resource_import = resource_imported@oil }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { size_mod_check = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@aluminium }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { size_mod_check = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@tungsten }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { size_mod_check = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@steel }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { size_mod_check = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@rubber }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { size_mod_check = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@chromium }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { size_mod_check = temp_resource_import }

	if = {
		limit = { check_variable = { size_mod_check = 0 } }
		add_to_temp_variable = { size_mod_check = 0.03 }
		else = {
			multiply_temp_variable = { size_mod_check = 0.22 }
		}
		if = {
			limit = { check_variable = { size_mod_check > 1.1 } }
			subtract_from_temp_variable = { size_mod_check = 0.58 }

			else_if = {
				limit = { check_variable = { size_mod_check = 0.22 } }
				subtract_from_temp_variable = { size_mod_check = 0.14 }
			}
			else_if = {
				limit = { check_variable = { size_mod_check = 0.44 } }
				subtract_from_temp_variable = { size_mod_check = 0.30 }
			}
			else_if = {
				limit = { check_variable = { size_mod_check = 0.66 } }
				subtract_from_temp_variable = { size_mod_check = 0.43 }
			}
			else_if = {
				limit = { check_variable = { size_mod_check = 0.88 } }
				subtract_from_temp_variable = { size_mod_check = 0.50 }
			}
			else_if = {
				limit = { check_variable = { size_mod_check = 1.1 } }
				subtract_from_temp_variable = { size_mod_check = 0.56 }
			}
		}
	}

	### Does it if new civilian factories has been added
	if = {
		limit = { check_variable = { var = size_modifier value = size_mod_check compare = not_equals } }

		### Temp multiply to avoid rounding errors ###
		multiply_variable = { bureaucracy_gain = 1000 }
		multiply_variable = { security_gain = 1000 }
		multiply_variable = { education_gain = 1000 }
		multiply_variable = { health_gain = 1000 }
		multiply_variable = { welfare_gain = 1000 }
		multiply_variable = { expense_gain = 1000 }
		multiply_variable = { tax_gain = 1000 }
		multiply_variable = { econ_cycle_upg_cost = 1000 }

		divide_variable = { var = bureaucracy_gain value = size_modifier }
		divide_variable = { var = security_gain value = size_modifier }
		divide_variable = { var = education_gain value = size_modifier }
		divide_variable = { var = health_gain value = size_modifier }
		divide_variable = { var = welfare_gain value = size_modifier }
		divide_variable = { var = expense_gain value = size_modifier }
		divide_variable = { var = tax_gain value = size_modifier }
		divide_variable = { var = econ_cycle_upg_cost value = size_modifier }

		set_variable = { resource_exports = resource_exported@steel }
		add_to_variable = { resource_exports = resource_exported@oil }
		add_to_variable = { resource_exports = resource_exported@aluminium }
		add_to_variable = { resource_exports = resource_exported@tungsten }
		add_to_variable = { resource_exports = resource_exported@rubber }
		add_to_variable = { resource_exports = resource_exported@chromium }
		multiply_variable = { resource_exports = 0.125 }
		round_variable = resource_exports

		set_variable = { size_modifier = num_of_civilian_factories }

		#add back cic lost to trade
		set_temp_variable = { temp_resource_import = resource_imported@oil }
		divide_temp_variable = { var = temp_resource_import value = 8 }
		add_to_variable = { size_modifier = temp_resource_import }

		set_temp_variable = { temp_resource_import = resource_imported@aluminium }
		divide_temp_variable = { var = temp_resource_import value = 8 }
		add_to_variable = { size_modifier = temp_resource_import }

		set_temp_variable = { temp_resource_import = resource_imported@tungsten }
		divide_temp_variable = { var = temp_resource_import value = 8 }
		add_to_variable = { size_modifier = temp_resource_import }

		set_temp_variable = { temp_resource_import = resource_imported@steel }
		divide_temp_variable = { var = temp_resource_import value = 8 }
		add_to_variable = { size_modifier = temp_resource_import }

		set_temp_variable = { temp_resource_import = resource_imported@rubber }
		divide_temp_variable = { var = temp_resource_import value = 8 }
		add_to_variable = { size_modifier = temp_resource_import }

		set_temp_variable = { temp_resource_import = resource_imported@chromium }
		divide_temp_variable = { var = temp_resource_import value = 8 }
		add_to_variable = { size_modifier = temp_resource_import }


		#subtract_from_variable = { size_modifier = resource_exports }

		if = {
			limit = { check_variable = { size_modifier = 0 } }
			add_to_variable = { var = size_modifier value = 0.03 }
			else = {
				multiply_variable = { var = size_modifier value = 0.22 }
				if = {
					limit = { check_variable = { size_modifier > 1.1 } }
					subtract_from_variable = { var = size_modifier value = 0.58 }
				}
				else_if = {
					limit = { check_variable = { size_modifier = 0.22 } }
					subtract_from_variable = { var = size_modifier value = 0.14 }
				}
				else_if = {
					limit = { check_variable = { size_modifier = 0.44 } }
					subtract_from_variable = { var = size_modifier value = 0.30 }
				}
				else_if = {
					limit = { check_variable = { size_modifier = 0.66 } }
					subtract_from_variable = { var = size_modifier value = 0.43 }
				}
				else_if = {
					limit = { check_variable = { size_modifier = 0.88 } }
					subtract_from_variable = { var = size_modifier value = 0.50 }
				}
				else_if = {
					limit = { check_variable = { size_modifier = 1.1 } }
					subtract_from_variable = { var = size_modifier value = 0.56 }
				}
			}
		}

		multiply_variable = { var = bureaucracy_gain value = size_modifier }
		multiply_variable = { var = security_gain value = size_modifier }
		multiply_variable = { var = education_gain value = size_modifier }
		multiply_variable = { var = health_gain value = size_modifier }
		multiply_variable = { var = welfare_gain value = size_modifier }
		multiply_variable = { var = expense_gain value = size_modifier }
		multiply_variable = { var = tax_gain value = size_modifier }
		multiply_variable = { var = econ_cycle_upg_cost value = size_modifier }

		#Round to avoid automatic cutoff of important values
		round_variable = bureaucracy_gain
		round_variable = security_gain
		round_variable = education_gain
		round_variable = health_gain
		round_variable = welfare_gain
		round_variable = expense_gain
		round_variable = tax_gain
		round_variable = econ_cycle_upg_cost

		### divide back to avoid rounding errors ###
		divide_variable = { bureaucracy_gain = 1000 }
		divide_variable = { security_gain = 1000 }
		divide_variable = { education_gain = 1000 }
		divide_variable = { health_gain = 1000 }
		divide_variable = { welfare_gain = 1000 }
		divide_variable = { expense_gain = 1000 }
		divide_variable = { tax_gain = 1000 }
		divide_variable = { econ_cycle_upg_cost = 1000 }
	}

	update_display = yes #will do this always for consistency
}

#Tax rate shit
calculate_tax_rate = {
	remove_tax_cost = yes
	set_variable = { var = tax_rate value = population_tax_rate }
	add_to_variable = { var = tax_rate value = corporate_tax_rate }
	divide_variable = { var = tax_rate value = 2 }
	round_variable = tax_rate
	set_tax_cost = yes
	clamp_variable = { var = tax_rate min = 0 max = 60 }
}
add_tax_laws = {
	meta_effect = {
		text = {
			add_ideas = tax_cost_[TAX_RATE_VAR]
		}
		TAX_RATE_VAR = "[?tax_rate|0]"
	}
}
remove_tax_cost = {
	meta_effect = {
		text = {
			remove_ideas = tax_cost_[TAX_RATE_VAR]
		}
		TAX_RATE_VAR = "[?tax_rate|0]"
	}
}
set_tax_cost = {
	meta_effect = {
		text = {
			add_ideas = tax_cost_[TAX_RATE_VAR]
		}
		TAX_RATE_VAR = "[?tax_rate|0]"
	}
}
increase_tax_cost = {
	set_temp_variable = { tax_increased = tax_rate }
	subtract_from_temp_variable = { tax_increased = 1 }
	meta_effect = {
		text = {
			remove_ideas = tax_cost_[TAX_RATE_VAR_INCR]
		}
		TAX_RATE_VAR_INCR = "[?tax_increased|0]"
	}
	meta_effect = {
		text = {
			add_ideas = tax_cost_[TAX_RATE_VAR]
		}
		TAX_RATE_VAR = "[?tax_rate|0]"
	}
}
decrease_tax_cost = {
	set_temp_variable = { tax_decreased = tax_rate }
	add_to_temp_variable = { tax_decreased = 1 }
	meta_effect = {
		text = {
			remove_ideas = tax_cost_[TAX_RATE_VAR_DECR]
		}
		TAX_RATE_VAR_DECR = "[?tax_decreased|0]"
	}
	meta_effect = {
		text = {
			add_ideas = tax_cost_[TAX_RATE_VAR]
		}
		TAX_RATE_VAR = "[?tax_rate|0]"
	}
}

calculate_tax_gain = {
	set_variable = { tax_gain = 0 }
	#Update starting tax rate
	calculate_tax_rate = yes

	#Corporate Tax Expansion
	set_variable = { var = corporate_tax value = 0 }
	set_temp_variable = { var = civil_fac_tax value = num_of_civilian_factories }
	multiply_temp_variable = { var = civil_fac_tax value = 4 }
	set_temp_variable = { var = military_fac_tax value = num_of_military_factories }
	multiply_temp_variable = { var = military_fac_tax value = 2 }
	set_temp_variable = { var = dockyard_tax value = num_of_naval_factories }
	multiply_temp_variable = { var = dockyard_tax value = 1.5 }
	set_temp_variable = { var = office_tax value = ROOT.office_park_total }
	multiply_temp_variable = { var = office_tax value = 5 }

	#Add the above calculations to give you total corporate taxes
	add_to_variable = { corporate_tax = civil_fac_tax }
	add_to_variable = { corporate_tax = military_fac_tax }
	add_to_variable = { corporate_tax = dockyard_tax }
	add_to_variable = { corporate_tax = office_tax }
	#Calculate actual work
	divide_variable = { var = corporate_tax value = 97 } #Gives TOTAL potential tax assuming 100%
	multiply_variable = { var = corporate_tax value = corporate_tax_rate }

	##POP
	set_variable = { var = population_tax value = population_total }
	divide_variable = { population_tax = 280 } #Gives TOTAL potential tax assuming 100%
	multiply_variable = { var = population_tax value = population_tax_rate }

	multiply_variable = { var = corporate_tax value = size_modifier }
	multiply_variable = { var = population_tax value = size_modifier }

	#DO NOT FUCKING TOUCH -- BIRD
	if = { limit = { has_idea = depression }
		set_temp_variable = { tax_gain_multiplier = 0.60 }
	}
	else_if = { limit = { has_idea = recession }
		set_temp_variable = { tax_gain_multiplier = 0.80 }
	}
	else_if = { limit = { has_idea = stagnation }
		set_temp_variable = { tax_gain_multiplier = 0.90 }
	}
	else_if = { limit = { has_idea = stable_growth }
		set_temp_variable = { tax_gain_multiplier = 1.0 }
	}
	else_if = { limit = { has_idea = fast_growth }
		set_temp_variable = { tax_gain_multiplier = 1.05 }
	}
	else_if = { limit = { has_idea = economic_boom }
		set_temp_variable = { tax_gain_multiplier = 1.10 }
	}

	#DO NOT FUCKING TOUCH -- BIRD
	#Corruption tax modifiers
	if = { limit = { has_idea = paralyzing_corruption }
		multiply_temp_variable = { tax_gain_multiplier = 0.65 }
	}
	else_if = { limit = { has_idea = crippling_corruption }
		multiply_temp_variable = { tax_gain_multiplier = 0.70 }
	}
	else_if = { limit = { has_idea = rampant_corruption }
		multiply_temp_variable = { tax_gain_multiplier = 0.75 }
	}
	else_if = { limit = { has_idea = unrestrained_corruption }
		multiply_temp_variable = { tax_gain_multiplier = 0.80 }
	}
	else_if = { limit = { has_idea = systematic_corruption }
		multiply_temp_variable = { tax_gain_multiplier = 0.85 }
	}
	else_if = { limit = { has_idea = widespread_corruption }
		multiply_temp_variable = { tax_gain_multiplier = 0.90 }
	}
	else_if = { limit = { has_idea = medium_corruption }
		multiply_temp_variable = { tax_gain_multiplier = 0.95 }
	}
	else_if = { limit = { has_idea = modest_corruption }
		multiply_temp_variable = { tax_gain_multiplier = 0.97 }
	}
	else_if = { limit = { has_idea = slight_corruption }
		multiply_temp_variable = { tax_gain_multiplier = 0.98 }
	}
	else_if = { limit = { has_idea = negligible_corruption }
		multiply_temp_variable = { tax_gain_multiplier = 0.99 }
	}

	##Country Specific
	#How to add your own tax modifier:
	#all you need to do is create a specific if statement that goes "tag = BLA"
	#Then the conditions you are looking for.
	#Then modify the temp variable tax_gain_multiplier by whatever. So if you want 25% then you do multiply_temp_variable = { tax_gain_multiplier = 1.25 }
	if = {
		limit = {
			tag = NIG
			has_idea = NIG_efficent_government_spending_idea
		}
		multiply_temp_variable = { tax_gain_multiplier = 1.10 }
	}
	if = { limit = { tag = ITA }
		multiply_temp_variable = { tax_gain_multiplier = ITA_tax_multiplier_var }
	}
	#Modify Taxgain by multiplier
	multiply_variable = { corporate_tax = tax_gain_multiplier }
	multiply_variable = { population_tax = tax_gain_multiplier }
	#Cleanup rounding errors
	divide_variable = { corporate_tax = 1000 }
	divide_variable = { population_tax = 1000 }

	#Expands the variables to show monthly - ignoring the 31s and Feb. Every month is 30days for ease.
	multiply_variable = { corporate_tax = 7 }
	multiply_variable = { population_tax = 7 }

	set_variable = { var = tax_gain value = corporate_tax }
	add_to_variable = { var = tax_gain value = population_tax }
	update_display = yes
}

#Updates interest rate, is called on init and on_daily in MD4_money_on_actions.txt
calculate_interest_rate = {
	#This array stores the interest rate for each level of gdp/c
	#clears the array
	clear_array = array_interest_rate

	#creates the array
	for_loop_effect = {
		start = 1
		end = 10 # < 10

		add_to_array = {
			array = array_interest_rate
			value = 0
		}
	}

	#adds debt to each item in the array
	for_each_loop = {
		array = array_interest_rate
		value = v
		index = i
		add_to_variable = { var = array_interest_rate^i value = debt } #debt = 100
	}

	#Base interest  rate is determined by your GDP/C
	multiply_variable = { var = array_interest_rate^0 value = 27 } #GDP 1 Gets 2700
	multiply_variable = { var = array_interest_rate^1 value = 23 } #GDP 2 Gets 2300
	multiply_variable = { var = array_interest_rate^2 value = 19 } #GDP 3 Gets 1900
	multiply_variable = { var = array_interest_rate^3 value = 16.5 } #GDP 4 Gets 1650
	multiply_variable = { var = array_interest_rate^4 value = 13.5 } #GDP 5 gets 1250
	multiply_variable = { var = array_interest_rate^5 value = 10.6 } #GDP 6 Gets 1060
	multiply_variable = { var = array_interest_rate^6 value = 8.2 } #GDP 7 gets 820
	multiply_variable = { var = array_interest_rate^7 value = 6.1 } #GDP 8 Gets 610
	multiply_variable = { var = array_interest_rate^8 value = 5 } #The remainder Get 500

	#Update each item in the array
	for_each_loop = {
		array = array_interest_rate
		value = v
		index = i
		#interest  rate is modifier by the size_modifier variable ("Size of the country")
		divide_variable = { var = array_interest_rate^i value = size_modifier } #Divide by local size_modifier
		#You divide by 365 as you don't pay say 10% interest  every day but yearly
		divide_variable = { var = array_interest_rate^i value = 365 } #downplay by a daily rate
		#interest  rate is modified based on some ideas
		if = {
			limit = { has_idea = petro_dollar }
			subtract_from_variable = { var = array_interest_rate^i value = 2 }
		}
		if = {
			limit = { has_idea = the_euro }
			subtract_from_variable = { var = array_interest_rate^i value = 1 }
		}
		if = {
			limit = { has_idea = JAP_deflation }
			subtract_from_variable = { var = array_interest_rate^i value = 9 }
		}
		if = {
			limit = {
				OR = {
					has_idea = wall_street
					has_idea = international_bankers
				}
			}
			subtract_from_variable = { var = array_interest_rate^i value = 1 }
		}
		if = {
			limit = { has_country_flag = bailout_given }
			subtract_from_variable = { var = array_interest_rate^i value = 10 }
		}
		if = {
			limit = { tag = NIG has_idea = NIG_efficent_government_spending_reform_idea }
			subtract_from_variable = { var = array_interest_rate^i value = 3 }
		}
		if = {
			limit = { tag = SOV has_country_flag = SOV_overcoming_the_1998_financial_crisis }
			subtract_from_variable = { var = array_interest_rate^i value = 2 }
		}
		if = {
			limit = { tag = ITA has_idea = ITA_debt_market_trust }
			add_to_variable = { var = array_interest_rate^i value = bond_markets_trust }
		}
		clamp_variable = {
			var = array_interest_rate^i
			min = 0.8
			max = 50
		} #Min is 0.8% on debt max is 50%
	}

	#update the displayed interest on the topbar (interest_rate) with the actual interest rate
	if = {
		limit = { has_idea = gdp_1 }
		set_variable = { var = interest_rate value = array_interest_rate^0 }
	}
	else_if = {
		limit = { has_idea = gdp_2 }
		set_variable = { var = interest_rate value = array_interest_rate^1 }
	}
	else_if = {
		limit = { has_idea = gdp_3 }
		set_variable = { var = interest_rate value = array_interest_rate^2 }
	}
	else_if = {
		limit = { has_idea = gdp_4 }
		set_variable = { var = interest_rate value = array_interest_rate^3 }
	}
	else_if = {
		limit = { has_idea = gdp_5 }
		set_variable = { var = interest_rate value = array_interest_rate^4 }
	}
	else_if = {
		limit = { has_idea = gdp_6 }
		set_variable = { var = interest_rate value = array_interest_rate^5 }
	}
	else_if = {
		limit = { has_idea = gdp_7 }
		set_variable = { var = interest_rate value = array_interest_rate^6 }
	}
	else_if = {
		limit = { has_idea = gdp_8 }
		set_variable = { var = interest_rate value = array_interest_rate^7 }
	}
	else = { set_variable = { var = interest_rate value = array_interest_rate^8 } }
}


### safeproofing - reached here #killerrabbit

#Update the debt rate called mostly when debt is taken
##The debt rate determines when a country actually goes bankrupt versues when it maintains its current economic standpoint.
calculate_debt_rate = {
	set_variable = { var = debt_rate value = debt }
	multiply_variable = { var = debt_rate value = interest_rate }
	divide_variable = { var = debt_rate value = 36500 }
	multiply_variable = { var = debt_rate value = 7 }

	if = {
		limit = {
			NOT = { has_country_flag = bailout_happened }
		}
		#checks for imminent bankrupcy
		set_variable = { looming_bankruptcy_rate = size_modifier } #22
		divide_variable = { looming_bankruptcy_rate = 3.6 } #6.11 - So if size is 22. then you need to be paying 6.22 to get looming bankruptcy
		if = {
			limit = {
				check_variable = { debt_rate > looming_bankruptcy_rate }
				NOT = { has_country_flag = bailout_happened }
			}
			country_event = { id = bankrupcy.0 }
			log = "[GetDateText]: [This.GetName]: Looming Bankruptcy value: [?looming_bankruptcy_rate]; Bankruptcy value: [?previous_bankruptcy_rate]; Debt Rate value: [?debt_rate]"
		}
	}

	if = {
		limit = {
			NOT = { has_idea = bankrupcy }
		}
		#check for bankrupcy
		set_variable = { previous_bankruptcy_rate = size_modifier }
		divide_variable = { previous_bankruptcy_rate = 2.5 }
		log = "[GetDateText]: [This.GetName]: Looming Bankruptcy value: [?looming_bankruptcy_rate]; Bankruptcy value: [?previous_bankruptcy_rate]; Debt Rate value: [?debt_rate]"
	}

	set_variable = { half_way_bankrupt = previous_bankruptcy_rate }
	divide_variable = { half_way_bankrupt = 4.85 } #This is a check to start getting events pertaining to high debt rates - Not Visible to the Player
	#Based off 22 Size Modifier
	#You will need to be paying more than 4.5 in interest to start getting bad events

	update_display = yes
}

#Update military spending
update_military_rate = {
	#clear the array that stores the law cost
	clear_array = array_defence_spend

	#recreate the array
	for_loop_effect = {
		start = 0
		end = 10 # < 10

		add_to_array = { array = array_defence_spend value = 0 }
	}

	#add the naval factoreis and mil factories to each item index in the array
	for_each_loop = {
		array = array_defence_spend
		value = v
		index = i
		add_to_variable = { var = array_defence_spend^i value = num_of_naval_factories }
		add_to_variable = { var = array_defence_spend^i value = num_of_military_factories }
	}

	#A variable that stores the current military law the player has
	if = { limit = { has_idea = defence_00 }
		set_temp_variable = { def_index = 0 }
	}
	else_if = { limit = { has_idea = defence_01 }
		set_temp_variable = { def_index = 1 }
	}
	else_if = { limit = { has_idea = defence_02 }
		set_temp_variable = { def_index = 2 }
	}
	else_if = { limit = { has_idea = defence_03 }
		set_temp_variable = { def_index = 3 }
	}
	else_if = { limit = { has_idea = defence_04 }
		set_temp_variable = { def_index = 4 }
	}
	else_if = { limit = { has_idea = defence_05 }
		set_temp_variable = { def_index = 5 }
	}
	else_if = { limit = { has_idea = defence_06 }
		set_temp_variable = { def_index = 6 }
	}
	else_if = { limit = { has_idea = defence_07 }
		set_temp_variable = { def_index = 7 }
	}
	else_if = { limit = { has_idea = defence_08 }
		set_temp_variable = { def_index = 8 }
	}
	else_if = { limit = { has_idea = defence_09 }
		set_temp_variable = { def_index = 9 }
	}

	#Some math that is applied to each law (see the update_military_rate_ai for more details)
	divide_variable = { array_defence_spend^0 = 3000 }
	divide_variable = { array_defence_spend^1 = 300 }
	divide_variable = { array_defence_spend^2 = 150 }
	divide_variable = { array_defence_spend^3 = 100 }
	divide_variable = { array_defence_spend^4 = 75 }
	divide_variable = { array_defence_spend^5 = 50 }
	divide_variable = { array_defence_spend^6 = 37 }
	divide_variable = { array_defence_spend^7 = 15 }
	divide_variable = { array_defence_spend^8 = 10 }
	divide_variable = { array_defence_spend^9 = 8 }

	### Land ###
	#Below sets up the "personnel cost for mil spending
	#Each units has a cost which is modified by gdp, conscription laws and training laws
	set_temp_variable = { special_btn = num_of_battalions_with_type@Special_Forces }

	set_temp_variable = { elite_btn = num_of_battalions_with_type@L_Air_assault_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@Arm_Air_assault_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@L_Air_Inf_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@Mot_Air_Inf_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@Mech_Air_Inf_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@Arm_Air_Inf_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@L_Marine_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@Mot_Marine_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@Mech_Marine_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@Arm_Marine_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@SP_AA_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@L_Engi_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@H_Engi_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@L_Recce_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@Mot_Recce_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@Mech_Recce_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@Arm_Recce_Bat }
	add_to_temp_variable = { elite_btn = num_of_battalions_with_type@armor_Recce_Bat }

	set_temp_variable = { regular_btn = num_of_battalions_with_type@L_Inf_Bat }
	add_to_temp_variable = { regular_btn = num_of_battalions_with_type@Mot_Inf_Bat }
	add_to_temp_variable = { regular_btn = num_of_battalions_with_type@Mech_Inf_Bat }
	add_to_temp_variable = { regular_btn = num_of_battalions_with_type@Arm_Inf_Bat }
	add_to_temp_variable = { regular_btn = num_of_battalions_with_type@armor_Bat }
	add_to_temp_variable = { regular_btn = num_of_battalions_with_type@Arty_Bat }
	add_to_temp_variable = { regular_btn = num_of_battalions_with_type@SP_Arty_Bat }

	set_temp_variable = { irregular_btn = num_of_battalions_with_type@Militia_Bat }
	add_to_temp_variable = { irregular_btn = num_of_battalions_with_type@Mot_Militia_Bat }

	multiply_temp_variable = { special_btn = 5 }
	set_temp_variable = { land_count = special_btn }
	multiply_temp_variable = { elite_btn = 3 }
	add_to_temp_variable = { land_count = elite_btn }
	multiply_temp_variable = { regular_btn = 2 }
	add_to_temp_variable = { land_count = regular_btn }
	add_to_temp_variable = { land_count = irregular_btn }

	divide_temp_variable = { land_count = 4 } #control factor

	### Navy ###
	if = {
		limit = { NOT = { has_dlc = "Man the Guns" } }
		#Carriers
		set_temp_variable = { carrier_count = num_ships_with_type@Nuclear_carrier }
		add_to_temp_variable = { carrier_count = num_ships_with_type@carrier }

		set_temp_variable = { capital_count = num_ships_with_type@nuclear_cruiser }
		add_to_temp_variable = { capital_count = num_ships_with_type@cruiser }
		add_to_temp_variable = { capital_count = num_ships_with_type@LHA }
		add_to_temp_variable = { capital_count = num_ships_with_type@LPD }
		add_to_temp_variable = { capital_count = num_ships_with_type@attack_submarine }
		add_to_temp_variable = { capital_count = num_ships_with_type@missile_submarine }

		set_temp_variable = { destroyer_count = num_ships_with_type@destroyer }

		set_temp_variable = { minor_count = num_ships_with_type@frigate }
		add_to_temp_variable = { minor_count = num_ships_with_type@corvette }
		add_to_temp_variable = { minor_count = num_ships_with_type@diesel_attack_submarine }
	}
	else_if = {
		limit = { has_dlc = "Man the Guns" }
		#Carriers
		set_temp_variable = { carrier_count = num_ships_with_type@carrier_mtg }

		set_temp_variable = { capital_count = num_ships_with_type@battleship_mtg }
		add_to_temp_variable = { capital_count = num_ships_with_type@cruiser_mtg }
		add_to_temp_variable = { capital_count = num_ships_with_type@battleship_mtg }
		add_to_temp_variable = { capital_count = num_ships_with_type@battle_cruiser_mtg }
		add_to_temp_variable = { capital_count = num_ships_with_type@missile_submarine_mtg }

		set_temp_variable = { destroyer_count = num_ships_with_type@destroyer_mtg }
		set_temp_variable = { destroyer_count = num_ships_with_type@stealth_destroyer_mtg }

		set_temp_variable = { minor_count = num_ships_with_type@frigate_mtg }
		add_to_temp_variable = { minor_count = num_ships_with_type@corvette_mtg }
		add_to_temp_variable = { minor_count = num_ships_with_type@attack_submarine_mtg }
	}

	multiply_temp_variable = { carrier_count = 100 }
	set_temp_variable = { navy_count = carrier_count }
	multiply_temp_variable = { capital_count = 50 }
	add_to_temp_variable = { navy_count = capital_count }
	multiply_temp_variable = { destroyer_count = 20 }
	add_to_temp_variable = { navy_count = destroyer_count }
	multiply_temp_variable = { minor_count = 10 }
	add_to_temp_variable = { navy_count = minor_count }

	### Airforce ###
	set_temp_variable = { cheap_airforce = num_equipment@attack_helicopter_equipment }
	add_to_temp_variable = { cheap_airforce = num_equipment@L_Strike_fighter_equipment }
	add_to_temp_variable = { cheap_airforce = num_equipment@CV_L_Strike_fighter_equipment }
	set_temp_variable = { airforce_count = cheap_airforce }

	set_temp_variable = { regular_airforce = num_equipment@MR_Fighter_equipment }
	add_to_temp_variable = { regular_airforce = num_equipment@CV_MR_Fighter_equipment }
	add_to_temp_variable = { regular_airforce = num_equipment@AS_Fighter_equipment }
	add_to_temp_variable = { regular_airforce = num_equipment@Strike_fighter_equipment }
	add_to_temp_variable = { regular_airforce = num_equipment@Air_UAV_equipment }
	add_to_temp_variable = { regular_airforce = num_equipment@CAS_equipment }


	multiply_temp_variable = { regular_airforce = 3 }
	add_to_temp_variable = { airforce_count = regular_airforce }

	set_temp_variable = { expensive_airforce = num_equipment@transport_plane_equipment }
	add_to_temp_variable = { expensive_airforce = num_equipment@nav_plane_equipment }
	multiply_temp_variable = { expensive_airforce = 5 }
	add_to_temp_variable = { airforce_count = expensive_airforce }

	set_temp_variable = { strategic_airforce = num_equipment@strategic_bomber_equipment }
	multiply_temp_variable = { strategic_airforce = 14 }
	add_to_temp_variable = { airforce_count = strategic_airforce }

	divide_temp_variable = { airforce_count = 14 } #control factor

	### Prevent exploit
	set_temp_variable = { army_extra = num_equipment@command_control_equipment } #to prevent disband exploit
	divide_temp_variable = { army_extra = 7 } #control factor

	### Add up armed forces
	set_temp_variable = { personnel_cost = land_count }
	add_to_temp_variable = { personnel_cost = army_extra }
	add_to_temp_variable = { personnel_cost = navy_count }
	add_to_temp_variable = { personnel_cost = airforce_count }

	if = { limit = { has_idea = partial_draft_army }
		divide_temp_variable = { personnel_cost = 1.4 }
	}
	else_if = {
		limit = { has_idea = draft_army }
		divide_temp_variable = { personnel_cost = 1.8 }
	}
	else_if = {
		limit = { has_idea = no_military }
		divide_temp_variable = { personnel_cost = 1.8 }
	}

	if = {
		limit = { has_idea = officer_baptism_by_fire }
		#do nothing
	}
	else_if = {
		limit = { has_idea = officer_basic_training }
		multiply_temp_variable = { personnel_cost = 1.05 }
	}
	else_if = {
		limit = { has_idea = officer_advanced_training }
		multiply_temp_variable = { personnel_cost = 1.1 }
	}
	else_if = {
		limit = { has_idea = officer_military_school }
		multiply_temp_variable = { personnel_cost = 1.15 }
	}
	else_if = {
		limit = { has_idea = officer_military_academy }
		multiply_temp_variable = { personnel_cost = 1.2 }
	}
	else_if = {
		limit = { has_idea = officer_international_education }
		multiply_temp_variable = { personnel_cost = 1.25 }
	}

	divide_temp_variable = { personnel_cost = 500 } #control factor

	#Update each item in the array based on your gdp/c
	for_each_loop = {
		array = array_defence_spend
		index = i
		if = { limit = { has_idea = gdp_11 }
			divide_variable = { array_defence_spend^i = 1.6 }
		}
		else_if = { limit = { has_idea = gdp_10 }
			divide_variable = { array_defence_spend^i = 1.6 }
		}
		else_if = { limit = { has_idea = gdp_9 }
			divide_variable = { array_defence_spend^i = 2 }
		}
		else_if = { limit = { has_idea = gdp_8 }
			divide_variable = { array_defence_spend^i = 2.5 }
		}
		else_if = { limit = { has_idea = gdp_7 }
			divide_variable = { array_defence_spend^i = 3 }
		}
		else_if = { limit = { has_idea = gdp_6 }
			divide_variable = { array_defence_spend^i = 3.6 }
		}
		else_if = { limit = { has_idea = gdp_5 }
			divide_variable = { array_defence_spend^i = 4.2 }
		}
		else_if = { limit = { has_idea = gdp_4 }
			divide_variable = { array_defence_spend^i = 4.9 }
		}
		else_if = { limit = { has_idea = gdp_3 }
			divide_variable = { array_defence_spend^i = 5.7 }
		}
		else_if = { limit = { has_idea = gdp_2 }
			divide_variable = { array_defence_spend^i = 6.7 }
		}
		else_if = { limit = { has_idea = gdp_1 }
			divide_variable = { array_defence_spend^i = 7.8 }
		}
	}

	if = {
		limit = { has_idea = gdp_12 }
		multiply_temp_variable = { personnel_cost = 0.7 }
	}
	else_if = { limit = { has_idea = gdp_11 }
		multiply_temp_variable = { personnel_cost = 0.565 }
	}
	else_if = { limit = { has_idea = gdp_10 }
		multiply_temp_variable = { personnel_cost = 0.43 }
	}
	else_if = { limit = { has_idea = gdp_9 }
		multiply_temp_variable = { personnel_cost = 0.35 }
	}
	else_if = { limit = { has_idea = gdp_8 }
		multiply_temp_variable = { personnel_cost = 0.3 }
	}
	else_if = { limit = { has_idea = gdp_7 }
		multiply_temp_variable = { personnel_cost = 0.245 }
	}
	else_if = { limit = { has_idea = gdp_6 }
		multiply_temp_variable = { personnel_cost = 0.205 }
	}
	else_if = { limit = { has_idea = gdp_5 }
		multiply_temp_variable = { personnel_cost = 0.165 }
	}
	else_if = { limit = { has_idea = gdp_4 }
		multiply_temp_variable = { personnel_cost = 0.125 }
	}
	else_if = { limit = { has_idea = gdp_3 }
		multiply_temp_variable = { personnel_cost = 0.098 }
	}
	else_if = { limit = { has_idea = gdp_2 }
		multiply_temp_variable = { personnel_cost = 0.071 }
	}
	else_if = { limit = { has_idea = gdp_1 }
		multiply_temp_variable = { personnel_cost = 0.05 }
	}

	set_variable = { var = tooltip_personnel_cost value = personnel_cost }

	#add personal cost to each item in the array
	for_each_loop = {
		array = array_defence_spend
		index = i
		value = v
		add_to_variable = { var = array_defence_spend^i value = personnel_cost }
		multiply_variable = { var = array_defence_spend^i value = 7 } #Multiply each index by 30 days
	}

	set_variable = { var = defence_gain value = array_defence_spend^def_index }
	update_display = yes
}

#Update bureaucracy spending - Fuck this category
update_bureaucracy_rate = {
	#clear the array that stores the law cost
	clear_array = array_bureaucracy_spend

	#recreate the array
	for_loop_effect = {
		start = 0
		end = 5 # < 10

		add_to_array = { array = array_bureaucracy_spend value = size_modifier }
	}

	multiply_variable = { var = array_bureaucracy_spend^0 value = 0.05 }
	multiply_variable = { var = array_bureaucracy_spend^1 value = 0.08 }
	multiply_variable = { var = array_bureaucracy_spend^2 value = 0.10 }
	multiply_variable = { var = array_bureaucracy_spend^3 value = 0.12 }
	multiply_variable = { var = array_bureaucracy_spend^4 value = 0.15 }

	#add the naval factories and mil factories to each item index in the array
	for_each_loop = {
		array = array_bureaucracy_spend
		value = v
		index = i
		multiply_variable = { array_bureaucracy_spend^i = 100 }

		round_variable = array_bureaucracy_spend^i
		divide_variable = { array_bureaucracy_spend^i = 100 }
	}

	if = { limit = { has_idea = bureau_01 }
		set_temp_variable = { bureau_index = 0 }
	}
	else_if = { limit = { has_idea = bureau_02 }
		set_temp_variable = { bureau_index = 1 }
	}
	else_if = { limit = { has_idea = bureau_03 }
		set_temp_variable = { bureau_index = 2 }
	}
	else_if = { limit = { has_idea = bureau_04 }
		set_temp_variable = { bureau_index = 3 }
	}
	else_if = { limit = { has_idea = bureau_05 }
		set_temp_variable = { bureau_index = 4 }
	}

	#Modifiers
	for_each_loop = {
		array = array_bureaucracy_spend
		index = i
		value = v
		if = { limit = { tag = ITA }
			if = {
				limit = { has_idea = ITA_inefficient_administration_4 } ##50% increase in cost for bureaucracy
				multiply_variable = { var = array_bureaucracy_spend^i value = 1.5 }
			}
			else_if = {
				limit = { has_idea = ITA_inefficient_administration_3 } ##37,5% increase in cost for bureaucracy
				multiply_variable = { var = array_bureaucracy_spend^i value = 1.375 }
			}
			else_if = {
				limit = { has_idea = ITA_inefficient_administration_2 } ##25% increase in cost for bureaucracy
				multiply_variable = { var = array_bureaucracy_spend^i value = 1.25 }
			}
			else_if = {
				limit = { has_idea = ITA_inefficient_administration_1 } ##12,5% increase in cost for bureaucracy
				multiply_variable = { var = array_bureaucracy_spend^i value = 1.125 }
			}
		}
		multiply_variable = { array_bureaucracy_spend^i = 7 } #Multiply each index by 30 days
	}

	set_variable = { var = bureaucracy_gain value = array_bureaucracy_spend^bureau_index }
	update_display = yes
}

#Update police spending
update_police_rate = {
	#clear the array that stores the law cost
	clear_array = array_security_spend

	#recreate the array
	for_loop_effect = {
		start = 0
		end = 5 # < 10

		add_to_array = { array = array_security_spend value = size_modifier }
	}
	multiply_variable = { var = array_security_spend^0 value = 0.05 }
	multiply_variable = { var = array_security_spend^1 value = 0.08 }
	multiply_variable = { var = array_security_spend^2 value = 0.10 }
	multiply_variable = { var = array_security_spend^3 value = 0.12 }
	multiply_variable = { var = array_security_spend^4 value = 0.15 }

	#add the naval factoreis and mil factories to each item index in the array
	for_each_loop = {
		array = array_security_spend
		value = v
		index = i
		multiply_variable = { array_security_spend^i = 100 }

		round_variable = array_security_spend^i
		divide_variable = { array_security_spend^i = 100 }
	}

	if = { limit = { has_idea = police_01 }
		set_temp_variable = { security_index = 0 }
	}
	else_if = { limit = { has_idea = police_02 }
		set_temp_variable = { security_index = 1 }
	}
	else_if = { limit = { has_idea = police_03 }
		set_temp_variable = { security_index = 2 }
	}
	else_if = { limit = { has_idea = police_04 }
		set_temp_variable = { security_index = 3 }
	}
	else_if = { limit = { has_idea = police_05 }
		set_temp_variable = { security_index = 4 }
	}

	for_each_loop = {
		array = array_security_spend
		index = i
		value = v
		#Modifiers
		if = { limit = { has_tech = DNA_fingerprinting } ##5% reduction in cost for security
			multiply_variable = { var = array_security_spend^security_index value = 0.95 }
		}
		if = { limit = { tag = ITA has_idea = ITA_legalized_light_drugs } ##10% reduction in cost for security
			multiply_variable = { var = array_security_spend^security_index value = 0.90 }
		}
		multiply_variable = { array_security_spend^i = 7 } #Multiply each index by 30 days
	}

	set_variable = { var = security_gain value = array_security_spend^security_index }
	update_display = yes
}

#Update education spending
update_education_rate = {
	#clear the array that stores the law cost
	clear_array = array_education_spend

	#recreate the array
	for_loop_effect = {
		start = 0
		end = 5

		add_to_array = { array = array_education_spend value = size_modifier }
	}

	multiply_variable = { array_education_spend^0 = 0.02 }
	multiply_variable = { array_education_spend^1 = 0.04 }
	multiply_variable = { array_education_spend^2 = 0.06 }
	multiply_variable = { array_education_spend^3 = 0.08 }
	multiply_variable = { array_education_spend^4 = 0.10 }


	for_each_loop = {
		array = array_education_spend
		index = i
		if = { limit = { has_idea = gdp_1 }
			multiply_variable = { array_education_spend^i = 2.25 }
		}
		else_if = { limit = { has_idea = gdp_2 }
			multiply_variable = { array_education_spend^i = 2 }
		}
		else_if = { limit = { has_idea = gdp_3 }
			multiply_variable = { array_education_spend^i = 1.75 }
		}
		else_if = { limit = { has_idea = gdp_4 }
			multiply_variable = { array_education_spend^i = 1.5 }
		}
		else_if = { limit = { has_idea = gdp_5 }
			multiply_variable = { array_education_spend^i = 1.25 }
		}
	}

	for_each_loop = {
		array = array_education_spend
		value = v
		index = i
		multiply_variable = { array_education_spend^i = 100 }

		round_variable = array_education_spend^i
		divide_variable = { array_education_spend^i = 100 }
	}

	if = { limit = { has_idea = edu_01 }
		set_temp_variable = { education_index = 0 }
	}
	else_if = { limit = { has_idea = edu_02 }
		set_temp_variable = { education_index = 1 }
	}
	else_if = { limit = { has_idea = edu_03 }
		set_temp_variable = { education_index = 2 }
	}
	else_if = { limit = { has_idea = edu_04 }
		set_temp_variable = { education_index = 3 }
	}
	else_if = { limit = { has_idea = edu_05 }
		set_temp_variable = { education_index = 4 }
	}

	for_each_loop = {
		array = array_education_spend
		index = i
		value = v
		###Education Cost Reductions: == Better internet cheaper schooling cuz greater access to educational resources
		if = { limit = { has_tech = internet1 }
			multiply_variable = { var = array_education_spend^i value = 0.97 } #3% education cost
		}
		if = { limit = { has_tech = internet2 }
			multiply_variable = { var = array_education_spend^i value = 0.95 }
		}
		if = { limit = { has_tech = internet3 }
			multiply_variable = { var = array_education_spend^i value = 0.97 }
		}
		if = { limit = { has_tech = internet4 }
			multiply_variable = { var = array_education_spend^i value = 0.95 }
		}
		if = { limit = { has_tech = internet5 }
			multiply_variable = { var = array_education_spend^i value = 0.97 }
		}
		if = { limit = { has_tech = internet6 }
			multiply_variable = { var = array_education_spend^i value = 0.95 }
		}
		multiply_variable = { array_education_spend^i = 7 } #Multiply each index by 30 days
	}

	set_variable = { var = education_gain value = array_education_spend^education_index }
	update_display = yes
}

#Update health spending
update_health_rate = {
	#clear the array that stores the law cost
	clear_array = array_health_spend
	#Create the array for manipulation purposes
	for_loop_effect = {
		start = 0
		end = 6
		add_to_array = {
			array = array_health_spend
			value = size_modifier
		}
	}

	multiply_variable = { array_health_spend^0 = 0.01 }
	multiply_variable = { array_health_spend^1 = 0.02 }
	multiply_variable = { array_health_spend^2 = 0.04 }
	multiply_variable = { array_health_spend^3 = 0.06 }
	multiply_variable = { array_health_spend^4 = 0.08 }
	multiply_variable = { array_health_spend^5 = 0.1 }

	for_each_loop = {
		array = array_health_spend
		value = v
		index = i

		multiply_variable = { array_health_spend^i = 100 }
		round_variable = array_health_spend^i
		divide_variable = { array_health_spend^i = 100 }
	}

	if = { limit = { has_idea = health_01 }
		set_temp_variable = { health_index = 0 }
	}
	else_if = { limit = { has_idea = health_02 }
		set_temp_variable = { health_index = 1 }
	}
	else_if = { limit = { has_idea = health_03 }
		set_temp_variable = { health_index = 2 }
	}
	else_if = { limit = { has_idea = health_04 }
		set_temp_variable = { health_index = 3 }
	}
	else_if = { limit = { has_idea = health_05 }
		set_temp_variable = { health_index = 4 }
	}
	else_if = { limit = { has_idea = health_06 }
		set_temp_variable = { health_index = 5 }
	}

	for_each_loop = {
		array = array_health_spend
		index = i
		value = v
		##Modifiers to Healthcare Costs
		if = { limit = { has_tech = nanocellulose_in_medicine } #10% Reduction in Healthcare Spending
			multiply_variable = { var = array_health_spend^i value = 0.90 }
		}
		if = { limit = { has_tech = medical_nanorobots } #5% Reduction in Healthcare Spending
			multiply_variable = { var = array_health_spend^i value = 0.95 }
		}
		multiply_variable = { array_health_spend^i = 7 } #Multiply each index by 30 days
	}

	set_variable = { var = health_gain value = array_health_spend^health_index }
	update_display = yes
}

#Update social spending
update_social_rate = {
	#clear the array that stores the law cost
	clear_array = array_social_spend

	for_loop_effect = {
		start = 0
		end = 6

		add_to_array = { array = array_social_spend value = size_modifier }
	}

	multiply_variable = { array_social_spend^0 = 0.020 }
	multiply_variable = { array_social_spend^1 = 0.045 }
	multiply_variable = { array_social_spend^2 = 0.070 }
	multiply_variable = { array_social_spend^3 = 0.095 }
	multiply_variable = { array_social_spend^4 = 0.130 }
	multiply_variable = { array_social_spend^5 = 0.165 }

	for_each_loop = {
		array = array_social_spend
		value = v
		index = i

		multiply_variable = { array_social_spend^i = 100 }
		round_variable = array_social_spend^i
		divide_variable = { array_social_spend^i = 100 }
	}

	if = { limit = { has_idea = social_01 }
		set_temp_variable = { social_index = 0 }
	}
	else_if = { limit = { has_idea = social_02 }
		set_temp_variable = { social_index = 1 }
	}
	else_if = { limit = { has_idea = social_03 }
		set_temp_variable = { social_index = 2 }
	}
	else_if = { limit = { has_idea = social_04 }
		set_temp_variable = { social_index = 3 }
	}
	else_if = { limit = { has_idea = social_05 }
		set_temp_variable = { social_index = 4 }
	}
	else_if = { limit = { has_idea = social_06 }
		set_temp_variable = { social_index = 5 }
	}

	for_each_loop = {
		array = array_social_spend
		index = i
		value = v
		multiply_variable = { array_social_spend^i = 7 } #Multiply each index by 7 days
	}

	set_variable = { var = welfare_gain value = array_social_spend^social_index }
	update_display = yes
}

#Income Related Stuff --- International Investments and Calculated Resource Sale Rate
#Update money gained from international investments
calculate_int_investments_rate = {
	#See Treasury reset comment at top of page
	set_variable = { var = int_investments_rate value = int_investments }
	divide_variable = { var = int_investments_rate value = 6080 } #6%
	multiply_variable = { int_investments_rate = 7 } #30 days worth of income
	update_display = yes
}

calculate_resource_sale_rate = { #Calculates income from resources
	set_variable = { resource_exports = resource_exported@steel } #Uses the value to judge
	add_to_variable = { resource_exports = resource_exported@oil }
	add_to_variable = { resource_exports = resource_exported@aluminium }
	add_to_variable = { resource_exports = resource_exported@tungsten }
	add_to_variable = { resource_exports = resource_exported@chromium }
	add_to_variable = { resource_exports = resource_exported@rubber }

	if = {
		limit = {
			has_idea = rentier_state
		}
		##Boosts income by around 25%
		multiply_variable = { resource_exports = 0.156 } ##Roughly worth 25% more than the 1/8. So a factory should count for 125% more
	}
	else = {
		multiply_variable = { resource_exports = 0.125 } ##This is equivalent to 1/6 1 factory = 6 resources
	}
	round_variable = resource_exports
	set_variable = { var = resource_sale_rate value = resource_exports }
	if = {
		limit = { ##If you have a single resource over 100 units. You should have significant gain from resources
			OR = {
				has_idea = rentier_state
				has_idea = export_economy ##Export economies should utilize this as well
				has_idea = globalized_trade_economy
				check_variable = { resource_exported@steel > 99 }
				check_variable = { resource_exported@oil > 99 }
				check_variable = { resource_exported@aluminium > 99 }
				check_variable = { resource_exported@tungsten > 99 }
				check_variable = { resource_exported@chromium > 99 }
				check_variable = { resource_exported@rubber > 99 }
			}
		}
		if = {
			limit = {
				num_of_factories < 25
			}
			divide_variable = { resource_sale_rate = 50 }
		}
		else_if = {
			limit = {
				num_of_factories > 24
				num_of_factories < 50
			}
			divide_variable = { resource_sale_rate = 60 }
		}
		else_if = {
			limit = {
				num_of_factories > 49
				num_of_factories < 80
			}
			divide_variable = { resource_sale_rate = 70 }
		}
		else_if = {
			limit = {
				num_of_factories > 79
				num_of_factories < 125
			}
			divide_variable = { resource_sale_rate = 80 }
		}
		else_if = {
			limit = {
				num_of_factories > 124
				num_of_factories < 160
			}
			divide_variable = { resource_sale_rate = 90 }
		}
		else_if = {
			limit = {
				num_of_factories > 159
				num_of_factories < 200
			}
			divide_variable = { resource_sale_rate = 100 }
		}
		else_if = {
			limit = {
				num_of_factories > 199
			}
			divide_variable = { resource_sale_rate = 115 }
		}
		else = { ##This is just a failsafe. If not just use the standard rat
			divide_variable = { resource_sale_rate = 100 }
		}

	}
	else = { ##Flat resource gain for now
		divide_variable = { resource_sale_rate = 100 }
	}

	multiply_variable = { resource_sale_rate = 7 }
	update_display = yes
}

update_display = {
	set_variable = { var = display_expense value = bureaucracy_gain }
	add_to_variable = { var = display_expense value = defence_gain }
	add_to_variable = { var = display_expense value = security_gain }
	add_to_variable = { var = display_expense value = education_gain }
	add_to_variable = { var = display_expense value = health_gain }
	add_to_variable = { var = display_expense value = welfare_gain }
	add_to_variable = { var = display_expense value = debt_rate }

	set_variable = { var = display_income value = tax_gain }
	add_to_variable = { var = display_income value = resource_sale_rate }
	add_to_variable = { var = display_income value = int_investments_rate }

	set_variable = { var = treasury_rate value = display_income }
	subtract_from_variable = { var = treasury_rate value = display_expense }
}

init_expenses = {
	#Defence spending
	update_military_rate = yes
	#Bureaucracy
	update_bureaucracy_rate = yes
	#Security
	update_police_rate = yes
	#Education
	update_education_rate = yes
	#Healthcare
	update_health_rate = yes
	#Social Spending
	update_social_rate = yes

	update_display = yes
}

#Monthly tick actions
automated_debt_taker = {
	if = {
		limit = { check_variable = { treasury < 0 } }
		if = {
			limit = { num_of_civilian_factories < 5 }
			add_to_variable = { treasury = 0.2 }
			add_to_variable = { debt = 0.2 }
			if = {
				limit = { check_variable = { treasury < -0.5 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		#intentionally cycles through all to add appropriate total amount
		if = {
			limit = { num_of_civilian_factories > 4 }
			add_to_variable = { treasury = 1 }
			add_to_variable = { debt = 1 }
			if = {
				limit = { check_variable = { treasury < -5 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		if = {
			limit = { num_of_civilian_factories > 20 }
			add_to_variable = { treasury = 4 }
			add_to_variable = { debt = 4 }
			if = {
				limit = { check_variable = { treasury < -8 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		if = {
			limit = { num_of_civilian_factories > 40 }
			add_to_variable = { treasury = 10 }
			add_to_variable = { debt = 10 }
			if = {
				limit = { check_variable = { treasury < -15 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		if = {
			limit = { num_of_civilian_factories > 60 }
			add_to_variable = { treasury = 15 }
			add_to_variable = { debt = 15 }
			if = {
				limit = { check_variable = { treasury < -25 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		if = {
			limit = { num_of_civilian_factories > 90 }
			add_to_variable = { treasury = 25 }
			add_to_variable = { debt = 25 }
			if = {
				limit = { check_variable = { treasury < -50 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		if = {
			limit = { num_of_civilian_factories > 180 }
			add_to_variable = { treasury = 70 }
			add_to_variable = { debt = 70 }
			if = {
				limit = { check_variable = { treasury < -90 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		ingame_calculate_size_modifier = yes
		update_military_rate = yes
		calculate_interest_rate = yes
		calculate_debt_rate = yes
	}
}

update_economic_income = {
	ingame_calculate_size_modifier = yes
	calculate_tax_gain = yes
	update_military_rate = yes
	calculate_resource_sale_rate = yes
	init_expenses = yes
}

update_state_variables = {
	set_variable = { var = population_total value = 0 }
	every_controlled_state = {
		add_to_variable = { PREV.office_park_total = building_level@offices }
		set_temp_variable = { var = temp_pop value = state_population_k }
		divide_temp_variable = { var = temp_pop value = 100 }
		add_to_variable = { PREV.population_total = temp_pop }
	}
	calculate_gdp = yes
}

#Calculate GDP/C
calculate_gdp = {
	set_variable = { var = gdp_total value = 0 }
	set_temp_variable = { var = civil_fac value = num_of_civilian_factories }
	set_temp_variable = { var = military_fac value = num_of_military_factories }
	set_temp_variable = { var = dockyard_fac value = num_of_naval_factories }
	set_temp_variable = { var = office_fac value = ROOT.office_park_total }

	set_temp_variable = { temp_resource_import = resource_imported@oil }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { civil_fac_lost = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@aluminium }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { civil_fac_lost = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@tungsten }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { civil_fac_lost = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@steel }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { civil_fac_lost = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@rubber }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { civil_fac_lost = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@chromium }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { civil_fac_lost = temp_resource_import }
	add_to_variable = { civil_fac = civil_fac_lost }

	multiply_temp_variable = { civil_fac = 500 }
	multiply_temp_variable = { military_fac = 250 }
	multiply_temp_variable = { dockyard_fac = 125 }
	multiply_temp_variable = { office_fac = 650 }

	add_to_variable = { gdp_total = civil_fac }
	add_to_variable = { gdp_total = military_fac }
	add_to_variable = { gdp_total = dockyard_fac }
	add_to_variable = { gdp_total = office_fac }

	set_variable = { gdp_per_capita = gdp_total }
	divide_variable = { gdp_per_capita = population_total }
}