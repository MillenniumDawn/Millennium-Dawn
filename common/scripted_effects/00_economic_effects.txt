###For industries going bankrupt, relocating &c.###

##Remember to Set Reduction Factor!!##
##Reduction factor is the percentage to remove, so for 10% reduction factor is 0.1
##This doesnt produce a tooltip so a scripted one is used.
##Tooltip: "Lose <reduction_factor>% of civilian factories."

remove_civilian_industry_effect = {
	#log = "ecovent100 eff: Lose ยงR[?reduction_factor|%0]ยง! of civilian factories."
	#log = "Ind: [?reduction_factor] [?reduction_factor|%0]"
	custom_effect_tooltip = remove_civilian_industry_effect_tt
	hidden_effect = {
		set_variable = { ind_factories = num_of_civilian_factories }
		log = "[This.GetName] Removing Industry, Factories: [?ind_factories], reduction factor: [?reduction_factor]"
		multiply_variable = {
			var = ind_factories
			value = reduction_factor
		}
		set_variable = { iterations = 0 }
		civ_factory_remove_loop_effect = yes
	}
}

##HoI doesn't have while = { } loops so this'll do for now.##
##Must set iterations before calling this effect.
civ_factory_remove_loop_effect = {
	hidden_effect = {
		log = "[This.GetName] Starting Removal Loop"
		if = {
			log = "[This.GetName] Removal Loop. Iteration: [?iterations]"
			limit = {
				check_variable = {
					var = iterations
					value = ind_factories
					compare = less_than
				}
			}
			random_owned_state = {
				remove_building = {
					type = industrial_complex
					level = 1
				}
				log = "[This.GetName] Removing industry in [This.GetName], [This.GetName]"
			}
			add_to_variable = {
				var = iterations
				value = 1
			}
			civ_factory_remove_loop_effect = yes
		}
	}
}

###Industry Relocates###
##Tooltip: "<reduction_factor>% of civilian factories move to <relocation_location>."
migrate_industry_to_random_effect = {
	hidden_effect = {
		random_country = {
			limit = {
				NOT = {
					has_idea = depression
					has_idea = recession
					has_idea = stagnation
				}
				has_war = no
				#num_of_controlled_states > ROOT #Should stop one-state country getting 50 factories. #Doesn't appear to work with scope reference
			}
			save_event_target_as = relocation_location
		}
	}
	custom_effect_tooltip = migrate_industry_to_random_effect_tt
	hidden_effect = {
		set_variable = { ind_factories = num_of_civilian_factories }
		log = "[This.GetName] Relocating Industry, Factories: [?ind_factories], reduction factor: [?reduction_factor]"
		multiply_variable = {
			var = ind_factories
			value = reduction_factor
		}
		set_variable = { iterations = 0 }
		civ_factory_remove_loop_effect = yes
		event_target:relocation_location = {
			country_event = {
				id = econvent.102
				days = 1
				random_hours = 24
			}
		}
	}
}

# Remember to save_event_target_as = relocation_location before effect
migrate_industry_to_relocation_location_effect = {
	custom_effect_tooltip = migrate_industry_to_random_effect_tt
	hidden_effect = {
		set_variable = { ind_factories = num_of_civilian_factories }
		log = "[This.GetName] Relocating Industry, Factories: [?ind_factories], reduction factor: [?reduction_factor]"
		multiply_variable = {
			var = ind_factories
			value = reduction_factor
		}
		set_variable = { iterations = 0 }
		civ_factory_remove_loop_effect = yes
		event_target:relocation_location = {
			country_event = {
				id = econvent.102
				days = 1
				random_hours = 24
			}
		}
	}
}

##HoI doesn't have while = { } loops so this'll do for now.##
##Must set iterations before calling this effect.
civ_factory_relocate_from_from_build_loop_effect = {
	hidden_effect = {
		log = "[This.GetName] Starting Construction Loop"
		if = {
			log = "[This.GetName] Construction Loop. Iteration: [?From.iterations]"
			limit = {
				FROM = { #To get ind_factories var
					check_variable = {
						var = iterations
						value = ind_factories
						compare = less_than
					}
				}
			}
			random_owned_state = {
				if = {
					limit = {
						free_building_slots = {
							building = industrial_complex
							size > 1
							include_locked = no
						}
					}
					add_building_construction = {
						type = industrial_complex
						level = 1
						instant_build = yes
					}
				}
				else = {
					add_extra_state_shared_building_slots = 1
					add_building_construction = {
						type = industrial_complex
						level = 1
						instant_build = yes
					}
				}
				log = "[This.GetName] Constructing industry in [This.GetName], [This.GetName]"
			}
			FROM = {
				add_to_variable = {
					var = iterations
					value = 1
				}
			}
			civ_factory_relocate_from_from_build_loop_effect = yes
		}
	}
}

### update state on init
state_init_setup = {
	every_owned_state = {
		if = {
			limit = {
				has_state_category = state_00
				state_population_k > 300
			}
			set_state_category = state_01
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
				}
				state_population_k > 800
			}
			set_state_category = state_02
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
				}
				state_population_k > 1500
			}
			set_state_category = state_03
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
				}
				state_population_k > 2500
			}
			set_state_category = state_04
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
				}
				state_population_k > 3800
			}
			set_state_category = state_05
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
				}
				state_population_k > 5200
			}
			set_state_category = state_06
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
					has_state_category = state_06
				}
				state_population_k > 6800
			}
			set_state_category = state_07
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
					has_state_category = state_06
					has_state_category = state_07
				}
				state_population_k > 8500
			}
			set_state_category = state_08
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
					has_state_category = state_06
					has_state_category = state_07
					has_state_category = state_08
				}
				state_population_k > 10500
			}
			set_state_category = state_09
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
					has_state_category = state_06
					has_state_category = state_07
					has_state_category = state_08
					has_state_category = state_09
				}
				state_population_k > 13000
			}
			set_state_category = state_10
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
					has_state_category = state_06
					has_state_category = state_07
					has_state_category = state_08
					has_state_category = state_09
					has_state_category = state_10
				}
				state_population_k > 16000
			}
			set_state_category = state_11
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
					has_state_category = state_06
					has_state_category = state_07
					has_state_category = state_08
					has_state_category = state_09
					has_state_category = state_10
					has_state_category = state_11
				}
				state_population_k > 19000
			}
			set_state_category = state_12
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
					has_state_category = state_06
					has_state_category = state_07
					has_state_category = state_08
					has_state_category = state_09
					has_state_category = state_10
					has_state_category = state_11
					has_state_category = state_12
				}
				state_population_k > 23000
			}
			set_state_category = state_13
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
					has_state_category = state_06
					has_state_category = state_07
					has_state_category = state_08
					has_state_category = state_09
					has_state_category = state_10
					has_state_category = state_11
					has_state_category = state_12
					has_state_category = state_13
				}
				state_population_k > 27000
			}
			set_state_category = state_14
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
					has_state_category = state_06
					has_state_category = state_07
					has_state_category = state_08
					has_state_category = state_09
					has_state_category = state_10
					has_state_category = state_11
					has_state_category = state_12
					has_state_category = state_13
					has_state_category = state_14
				}
				state_population_k > 34000
			}
			set_state_category = state_15
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
					has_state_category = state_06
					has_state_category = state_07
					has_state_category = state_08
					has_state_category = state_09
					has_state_category = state_10
					has_state_category = state_11
					has_state_category = state_12
					has_state_category = state_13
					has_state_category = state_14
					has_state_category = state_15
				}
				state_population_k > 42000
			}
			set_state_category = state_16
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
					has_state_category = state_06
					has_state_category = state_07
					has_state_category = state_08
					has_state_category = state_09
					has_state_category = state_10
					has_state_category = state_11
					has_state_category = state_12
					has_state_category = state_13
					has_state_category = state_14
					has_state_category = state_15
					has_state_category = state_16
				}
				state_population_k > 52000
			}
			set_state_category = state_17
		}
		if = {
			limit = {
				OR = {
					has_state_category = state_00
					has_state_category = state_01
					has_state_category = state_02
					has_state_category = state_03
					has_state_category = state_04
					has_state_category = state_05
					has_state_category = state_06
					has_state_category = state_07
					has_state_category = state_08
					has_state_category = state_09
					has_state_category = state_10
					has_state_category = state_11
					has_state_category = state_12
					has_state_category = state_13
					has_state_category = state_14
					has_state_category = state_15
					has_state_category = state_16
					has_state_category = state_17
				}
				state_population_k > 65000
			}
			set_state_category = state_18
		}
	}
}

# Set/Remove Improved Trade Agreement
# sender_nation --- the nation sending the trade agreement
# receiver_nation --- Nation retrieving the agreement
# remove_agreement -- OPTIONAL (Set to 1)
set_improved_trade_agreement = {
	if = {
		limit = {
			var:receiver_nation = {
				var:sender_nation = {
					NOT = { has_country_flag = trade_agreement@PREV }
				}
			}
			NOT = { check_variable = { remove_agreement = 1 } }
		}
		var:receiver_nation = {
			var:sender_nation = {
				add_opinion_modifier = { target = PREV modifier = mutual_trade_agreement }
				add_opinion_modifier = { target = PREV modifier = mutual_trade_opinion }
				reverse_add_opinion_modifier = { target = PREV modifier = mutual_trade_opinion }
				reverse_add_opinion_modifier = { target = PREV modifier = mutual_trade_agreement }

				hidden_effect = {
					add_to_variable = { signed_trade_agreements = 1 }
					set_country_flag = trade_agreement@PREV
					var:receiver_nation = {
						add_to_variable = { signed_trade_agreements = 1 }
						set_country_flag = trade_agreement@PREV
					}
				}
			}
		}
		custom_effect_tooltip = set_improved_trade_agreement_tt
	}
	if = {
		limit = {
			var:receiver_nation = {
				var:sender_nation = {
					has_country_flag = trade_agreement@PREV
				}
			}
			check_variable = { remove_agreement = 1 }
		}
		var:receiver_nation = {
			var:sender_nation = {
				remove_opinion_modifier = { target = PREV modifier = mutual_trade_agreement }
				remove_opinion_modifier = { target = PREV modifier = mutual_trade_opinion }
				add_opinion_modifier = { target = PREV modifier = broke_trade_agreement }

				clr_country_flag = trade_agreement@PREV
				add_to_variable = { signed_trade_agreements = -1 }
				var:receiver_nation = {
					remove_opinion_modifier = { target = PREV modifier = mutual_trade_agreement }
					remove_opinion_modifier = { target = PREV modifier = mutual_trade_opinion }
					add_opinion_modifier = { target = PREV modifier = broke_trade_agreement }
					clr_country_flag = trade_agreement@PREV
					add_to_variable = { signed_trade_agreements = -1 }
				}
			}
		}
		custom_effect_tooltip = remove_improved_trade_agreement_tt
	}
}

monthly_economy_params_fluctuation = {
	# Volatility
	set_temp_variable = { chance_to_change_target_positive = 5 }
	set_temp_variable = { chance_to_change_target_negative = 5 }
	set_temp_variable = { chance_to_change_positive = 25 }
	set_temp_variable = { chance_to_change_negative = 25 }

	if = {
		limit = { check_variable = { volatility_target > volatility } }
		add_to_temp_variable = { chance_to_change_positive = 10 }
		add_to_temp_variable = { chance_to_change_negative = -10 }
	}
	else = {
		add_to_temp_variable = { chance_to_change_positive = -10 }
		add_to_temp_variable = { chance_to_change_negative = 10 }
	}

	if = {
		limit = { has_war = yes }
		add_to_temp_variable = { chance_to_change_positive = 5 }
		add_to_temp_variable = { chance_to_change_target_positive = 2 }
	}

	random_list = {
		50 = { }
		chance_to_change_positive = {
			add_to_variable = { volatility = 5 }
		}
		chance_to_change_negative = {
			add_to_variable = { volatility = -5 }
		}
	}

	random_list = {
		90 = { }
		chance_to_change_target_positive = {
			add_to_variable = { volatility_target = 5 }
		}
		chance_to_change_target_negative = {
			add_to_variable = { volatility_target = -5 }
		}
	}

	# Instability
	set_temp_variable = { chance_to_change_target_positive = 5 }
	set_temp_variable = { chance_to_change_target_negative = 5 }
	set_temp_variable = { chance_to_change_positive = 25 }
	set_temp_variable = { chance_to_change_negative = 25 }

	if = {
		limit = { check_variable = { instability_target > instability } }
		add_to_temp_variable = { chance_to_change_positive = 10 }
		add_to_temp_variable = { chance_to_change_negative = -10 }
	}
	else = {
		add_to_temp_variable = { chance_to_change_positive = -10 }
		add_to_temp_variable = { chance_to_change_negative = 10 }
	}

	if = {
		limit = { has_war = yes }
		add_to_temp_variable = { chance_to_change_positive = 5 }
		add_to_temp_variable = { chance_to_change_target_positive = 2 }
	}

	random_list = {
		50 = { }
		chance_to_change_positive = {
			add_to_variable = { instability = 5 }
		}
		chance_to_change_negative = {
			add_to_variable = { instability = -5 }
		}
	}

	random_list = {
		90 = { }
		chance_to_change_target_positive = {
			add_to_variable = { instability_target = 5 }
		}
		chance_to_change_target_negative = {
			add_to_variable = { instability_target = -5 }
		}
	}

	# Clamping
	clamp_variable = {
		var = volatility
		min = 50
		max = 150
	}

	clamp_variable = {
		var = instability
		min = 50
		max = 150
	}

	# Cycle offset based on volatility
	set_temp_variable = { cycle_inrease = volatility }
	set_temp_variable = { cycle_decrease = volatility }

	if = {
		limit = {
			check_variable = { instability > 125 }
		}

		add_to_temp_variable = { cycle_decrease = 50 }
	}
	else_if = {
		limit = {
			check_variable = { instability > 75 }
		}

		add_to_temp_variable = { cycle_decrease = 25 }
	}

	if = {
		limit = { has_war = yes }
		add_to_temp_variable = { cycle_decrease = 50 }
	}

	random_list = {
		1000 = { }
		cycle_inrease = {
			add_to_variable = { cycle_target = 0.25 }
		}
		cycle_decrease = {
			add_to_variable = { cycle_target = -0.25 }
		}
	}

	# Inflation
	set_temp_variable = { chance_to_change_target_positive = 5 }
	set_temp_variable = { chance_to_change_target_negative = 5 }
	set_temp_variable = { chance_to_change_positive = 25 }
	set_temp_variable = { chance_to_change_negative = 25 }

	if = {
		limit = { check_variable = { inflation_target > inflation_rate } }
		add_to_temp_variable = { chance_to_change_positive = 10 }
		add_to_temp_variable = { chance_to_change_negative = -10 }
	}
	else = {
		add_to_temp_variable = { chance_to_change_positive = -10 }
		add_to_temp_variable = { chance_to_change_negative = 10 }
	}

	if = {
		limit = { has_war = yes }
		add_to_temp_variable = { chance_to_change_positive = 5 }
		add_to_temp_variable = { chance_to_change_target_positive = 2 }
	}

	random_list = {
		50 = { }
		chance_to_change_positive = {
			add_to_variable = { inflation_rate = 0.1 }
		}
		chance_to_change_negative = {
			add_to_variable = { inflation_rate = -0.1 }
		}
	}

	random_list = {
		90 = { }
		chance_to_change_target_positive = {
			add_to_variable = { inflation_target = 0.1 }
		}
		chance_to_change_target_negative = {
			add_to_variable = { instability_target = -0.1 }
		}
	}
}

monthly_inflation_effect = {
	set_temp_variable = { buf = inflation_rate }
	divide_temp_variable = { buf = 12 }
	# otherwise, accuracy is lost
	set_temp_variable = { inflation_mod = 100 }
	subtract_from_temp_variable = { inflation_mod = buf }
	multiply_temp_variable = { inflation_mod = 0.01 }

	multiply_variable = { treasury = inflation_mod }
	if = {
		limit = { check_variable = { scalable_debt > 1 } }
		multiply_variable = { scalable_debt = inflation_mod }
	}
	if = {
		limit = { check_variable = { scalable_investments > 1 } }
		multiply_variable = { scalable_investments = inflation_mod }
	}
}

monthly_economy_params_effect = {
	set_temp_variable = { bad_probability = 100 }
	set_temp_variable = { good_probability = 100 }
	add_to_temp_variable = { good_probability = volatility }
	add_to_temp_variable = { bad_probability = volatility }
	add_to_temp_variable = { bad_probability = instability }

	# I am not sure what I was doing here
	# set_temp_variable = { diff = 0 }
	# apply_economic_diff_to_probability = yes

	# add_to_temp_variable = { good_probability = diff }
	# add_to_temp_variable = { bad_probability = diff }

	random_list = {
		1500 = {
			# nothing
		}
		good_probability = {
			# good event
		}
		bad_probability = {
			# bad event
		}
	}
}

# diff variable as input
apply_economic_diff_to_probability = {
	if = {
		limit = { has_idea = depression }
		set_temp_variable = { cycle_id = 1 }
	}
	else_if = {
		limit = { has_idea = recession }
		set_temp_variable = { cycle_id = 2 }
	}
	else_if = {
		limit = { has_idea = stagnation }
		set_temp_variable = { cycle_id = 3 }
	}
	else_if = {
		limit = { has_idea = stable_growth }
		set_temp_variable = { cycle_id = 4 }
	}
	else_if = {
		limit = { has_idea = fast_growth }
		set_temp_variable = { cycle_id = 5 }
	}
	else = {
		set_temp_variable = { cycle_id = 6 }
	}

	set_temp_variable = { diff = cycle_target }
	subtract_from_temp_variable = { diff = cycle_id }
	multiply_temp_variable = { diff = 10 }
}

calculate_inflation_modifier_effect = {
	set_variable = { inflation_construction_speed_var = 0 }
	set_variable = { inflation_factory_output_var = 0 }
	set_variable = { inlfation_dockyard_output_var = 0 }
	set_variable = { country_productivity_growth_var = 0 }

	if = {
		limit = {
			check_variable = { inflation_rate > 4 }
		}

		set_temp_variable = { buf = inflation_rate }
		subtract_from_temp_variable = { buf = 4 }
		multiply_temp_variable = { buf = -0.1 }
		set_variable = { country_productivity_growth_var = buf }
	}
	else_if = {
		limit = {
			check_variable = { inflation_rate < 2 }
		}

		set_temp_variable = { buf = 2 }
		subtract_from_temp_variable = { buf = inflation_rate }
		multiply_temp_variable = { buf = -0.1 }

		set_variable = { inflation_factory_output_var = buf }
		set_variable = { inlfation_dockyard_output_var = buf }

		multiply_temp_variable = { buf = 2 }
		set_variable = { inflation_construction_speed_var = buf }
	}
}