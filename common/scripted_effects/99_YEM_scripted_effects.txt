#written by PokemonUnited26, aka Mari

#Al Qaeda in Yemen
	#Counter Terrorism is used in each state to determine the severity, size, and frequency of Al Qaeda and Al Qaeda attacks
	#Al Qaeda size, strength, and severity are determined by government response and focuses, and determines the severity of the state and country modifiers and strength of Al Qaeda during uprisings
	update_alqaeda_strength = {
		set_variable = { alqaeda_strength = aden_strength }
		#add_to_variable = { alqaeda_strength = shabwa_strength }
		#if = {
		#	limit = {
		#		952 = {
		#			has_dynamic_modifier = YEM_alqaeda_in_marib
		#		}
		#	}
		#	add_to_variable = { alqaeda_strength = marib_strength }
		#}
		#if = {
		#	limit = {
		#		199 = {
		#			has_dynamic_modifier = YEM_alqaeda_in_hadramawt
		#		}
		#	}
		#	add_to_variable = { alqaeda_strength = hadramawt_strength }
		#}
		#divide_variable = { alqaeda_strength = 4 }
		set_variable = { alqaeda_strength_stab_var = alqaeda_strength }
		multiply_variable = { alqaeda_strength_stab_var = -0.1 }
		#set_variable = { mafia_strength_construction_var = alqaeda_strength }
		#multiply_variable = { mafia_strength_construction_var = -0.5 }
		#set_variable = { mafia_strength_pp_var = alqaeda_strength }
		#multiply_variable = { mafia_strength_pp_var = -0.5 }
		#set_variable = { mafia_strength_lega_drift_var = alqaeda_strength }
		#multiply_variable = { mafia_strength_lega_drift_var = 0.1 }
		#set_variable = { mafia_strength_ai_factor_var = 1 }
		#subtract_from_variable = { mafia_strength_ai_factor_var = alqaeda_strength }
		#multiply_variable = { mafia_strength_ai_factor_var = mafia_strength_ai_factor_var }
	}
	
	AQY_tooltip = {
		if = {
			limit = {
				check_variable = { var = AQY_presence value = 1 compare = equals }
			}
			custom_effect_tooltip = AQY_tooltip_none_tt
		}
		if = {
			limit = {
				check_variable = { var = AQY_presence value = 2 compare = equals }
			}
			custom_effect_tooltip = AQY_tooltip_weak_tt
		}
		if = {
			limit = {
				check_variable = { var = AQY_presence value = 3 compare = equals }
			}
			custom_effect_tooltip = AQY_tooltip_strong_tt
		}
		if = {
			limit = {
				check_variable = { var = AQY_presence value = 4 compare = equals }
			}
			custom_effect_tooltip = AQY_tooltip_total_tt
		}
	}

	aqy_control_cost_calculation = {
		if = {
			limit = {
				check_variable = { var = AQY_presence value = 2 compare = equals }
			}
			set_variable = { var = AQY_presence_cost value = 20 }
		}
		if = {
			limit = {
				check_variable = { var = AQY_presence value = 3 compare = equals }
			}
			set_variable = { var = AQY_presence_cost value = 30 }
		}
		if = {
			limit = {
				check_variable = { var = AQY_presence value = 4 compare = equals }
			}
			set_variable = { var = AQY_presence_cost value = 40 }
		}
	}
	
	#AQY state events
	aqy_state_events_198 = {
		if = { #spread#
			limit = {
				198 = {
					check_variable = { var = AQY_presence value = 2 compare = equals }
					any_neighbor_state = {
						check_variable = { var = AQY_presence value = 2 compare = equals }
					}
				}
			}
		random_list = {
				50 = {
				modifier = {
					factor = 1.05
					has_idea = police_02
				}
				modifier = {
					factor = 1.1
					has_idea = police_03
				}
				modifier = {
					factor = 1.15
					has_idea = police_04
				}
				modifier = {
					factor = 1.2
					has_idea = police_05
				}
					if = {
						limit = {
							ROOT = {
								OR = {
									has_idea = paralyzing_corruption
									has_idea = crippling_corruption
									has_idea = rampant_corruption
									has_idea = unrestrained_corruption
									has_idea = systematic_corruption
									has_idea = widespread_corruption
									has_idea = medium_corruption
									has_idea = modest_corruption
									has_idea = slight_corruption
								}
								NOT = {
									has_idea = negligible_corruption
								}
							}
						}
						ROOT = {
							if = {
								limit = {
									has_idea = paralyzing_corruption
								}
								swap_ideas = {
									remove_idea = paralyzing_corruption
									add_idea = crippling_corruption
								}
							}
						}
						ROOT = {
							if = {
								limit = {
									has_idea = crippling_corruption
								}
								swap_ideas = {
									remove_idea = crippling_corruption
									add_idea = rampant_corruption
								}
							}
						}
						ROOT = {
							if = {
								limit = {
									has_idea = rampant_corruption
								}
								swap_ideas = {
									remove_idea = rampant_corruption
									add_idea = unrestrained_corruption
								}
							}
						}
						ROOT = {
							if = {
								limit = {
									has_idea = unrestrained_corruption
								}
								swap_ideas = {
									remove_idea = unrestrained_corruption
									add_idea = systematic_corruption
								}
							}
						}
						ROOT = {
							if = {
								limit = {
									has_idea = systematic_corruption
								}
								swap_ideas = {
									remove_idea = systematic_corruption
									add_idea = widespread_corruption
								}
							}
						}
						ROOT = {
							if = {
								limit = {
									has_idea = widespread_corruption
								}
								swap_ideas = {
									remove_idea = widespread_corruption
									add_idea = medium_corruption
								}
							}
						}
						ROOT = {
							if = {
								limit = {
									has_idea = medium_corruption
								}
								swap_ideas = {
									remove_idea = medium_corruption
									add_idea = modest_corruption
								}
							}
						}
						ROOT = {
							if = {
								limit = {
									has_idea = modest_corruption
								}
								swap_ideas = {
									remove_idea = modest_corruption
									add_idea = slight_corruption
								}
							}
						}
						ROOT = {
							if = {
								limit = {
									has_idea = slight_corruption
								}
								swap_ideas = {
									remove_idea = slight_corruption
									add_idea = negligible_corruption
								}
							}
						}
						add_to_variable = {
							var = YEM_federal_anger_level
							value = 2
							tooltip = YEM_federal_anger_level_2_tt
						}
						subtract_from_variable = {
							var = YEM_central_anger_level
							value = 1
							tooltip = YEM_central_anger_level_1_tt_sub
						}
					}
				}
				50 = {
					add_to_variable = {
						var = YEM_federal_anger_level
						value = 3
						tooltip = YEM_federal_anger_level_3_tt_dec
					}
				}
			}
		}
			198 = {
				any_neighbor_state = {
					check_variable = { var = AQY_presence value = 2 compare = equals }
				}
			}
		}
		
#Yemeni Crisis Influence

# The init influence acts as a reset to get an influence array prepared for additions
init_sadah_influence = {
	clear_array = sadah_influence_val
	clear_array = sadah_influence
}

# Startup Influence:
# The function is triggered only in the history. It sorts the starting influence arrays.
# Everything else is fired in the on_startup.
startup_influence = {
	sort_influence = yes
}

Sadah_math_variables = {
	log = "[GetDateText]: [ROOT.GetName]: Running Effect: Sadah_math_variables"
	
	set_variable = { yem_sadah_influence = sadah_influence_val^0 }
	divide_variable = { yem_sadah_influence = 4 }
	set_variable = { sau_sadah_influence = sadah_influence_val^1 }
	divide_variable = { sau_sadah_influence = 4 }
	set_variable = { uae_sadah_influence = sadah_influence_val^2 }
	divide_variable = { uae_sadah_influence = 4 }
	set_variable = { per_sadah_influence = sadah_influence_val^3 }
	divide_variable = { per_sadah_influence = 4 }
}
init_state_variables = {    
    951 = {
        set_variable = { yem_sadah_influence = 79 }
        set_variable = { sau_sadah_influence = 14 }
        set_variable = { uae_sadah_influence = 11 }
        set_variable = { per_sadah_influence = 0 }
    }
    195 = {
        set_variable = { yem_sadah_influence = 80 }
        set_variable = { sau_sadah_influence = 10 }
        set_variable = { uae_sadah_influence = 5 }
        set_variable = { per_sadah_influence = 5 }
    }
    #...
}

update_state_values_yemen = {
    custom_effect_tooltip = change_me_yemen_values
    add_to_variable = { sadah_influence^index = value }

    resize_temp_array = { array = sadah_influence_temp size = sadah_influence^num }

    set_temp_variable = { sadah_influence_total = 0 }
    for_each_loop = {
        array = sadah_influence_temp
        add_to_temp_variable = { sadah_influence_total = v }
    }

    set_temp_variable = { sadah_influence_scalar = 100 }
    divide_temp_variable = { sadah_influence_scalar = sadah_influence_total }
    for_each_loop = {
        array = sadah_influence
        value = v
        index = i
        multiply_variable = { sadah_influence^i = sadah_influence_scalar }
        clamp_variable = { var = sadah_influence^i max = 100 min = 0 }
    }

    if = { limit = { NOT = { check_variable = { sadah_influence_total = 100 } } }
        set_temp_variable = { difference = 100 }
        subtract_from_temp_variable = { difference = sadah_influence_total }
        find_highest_in_array = {
            array = sadah_influence
            value = max
            index = max_index
        }
        add_to_variable = { sadah_influence^max_index = difference }
    }
}