#################################
### missiles scripted effects ###
#################################
#
# ### missile trajectory arrays ###
# missile_launch_point_array
# missile_target_point_array
# missile_type_array
# missile_tech_array
# missile_warhead_array
# missile_salvo_array
# missile_duration_array
#
##################################




### test effects ###
set_missile_trajectory_test_vars = {
	###
	set_variable = { var_accuracy = 0.7 }
	set_variable = { var_salvo = 40 }
	set_variable = { var_MIRV = 10 }
	set_variable = { var_decoy = 5 }
	set_variable = { var_intercept_chance_boost = 0.1 }
	set_variable = { var_intercept_capacity_boost = 20 }
	set_variable = { var_intercept_chance_midcourse = 0.1 }
	set_variable = { var_intercept_capacity_midcourse = 30 }
	set_variable = { var_intercept_chance_terminal = 0.1 }
	set_variable = { var_intercept_capacity_terminal = 60 }
	###
	set_variable = { var_missile_trajectory = 1 }
	set_variable = { var_missile_target_hit = 0 }
	set_variable = { var_missile_target_miss = 0 }
	set_variable = { var_missile_interception_boost = 0 }
	set_variable = { var_missile_interception_midcourse = 0 }
	set_variable = { var_missile_interception_terminal = 0 }
	set_variable = { var_missile_boost_completed = 0 }
	set_variable = { var_missile_midcourse_completed = 0 }
	set_variable = { var_missile_target_hit = 0 }
	set_variable = { var_missile_target_miss = 0 }		
}

set_landbased_missile_defense_vars = {
	meta_effect = {
		text = {	
			set_variable = { var_intercept_capacity_boost = 0 }
			set_variable = { var_intercept_capacity_midcourse = 0 }
			set_variable = { var_intercept_capacity_terminal = 0 }
			### boost phase defense ###
			every_controlled_state = {
				limit = {
					anti_air_building > 0
					[launch_point_ID] = {
						distance_to = {
							value < [SAM_range]
							target = PREV
						}
					}	
				}
				ROOT = {
					set_temp_variable = { temp1 = 0 }	
					add_to_temp_variable = { temp1 = PREV.building_level@anti_air_building }
					multiply_temp_variable = { temp1 = var_SAM_launcher_tech }
					add_to_variable = { var_intercept_capacity_boost = temp1 }
				}													
			}
			### midcourse phase defense ###
			every_controlled_state = {
				limit = {
					missile_defense_station > 0
					[launch_point_ID] = {
						distance_to = {
							value < [ABM_range]
							target = PREV
						}
					}	
				}
				ROOT = {
					set_temp_variable = { temp1 = 0 }	
					add_to_temp_variable = { temp1 = PREV.building_level@missile_defense_station }
					multiply_temp_variable = { temp1 = var_ABM_launcher_tech }
					add_to_variable = { var_intercept_capacity_midcourse = temp1 }
					PREV = {
						set_state_flag = defend_land_launch_point
					}
				}				
			}
			every_controlled_state = {
				limit = {
					missile_defense_station > 0
					NOT = {
						has_state_flag = defend_land_launch_point
					}
					[target_point_ID] = {
						distance_to = {
							value < [ABM_range]
							target = PREV
						}
					}	
				}
				ROOT = {
					set_temp_variable = { temp1 = 0 }	
					add_to_temp_variable = { temp1 = PREV.building_level@missile_defense_station }
					multiply_temp_variable = { temp1 = var_ABM_launcher_tech }
					add_to_variable = { var_intercept_capacity_midcourse = temp1 }
				}	
			}
			every_controlled_state = {
				clr_state_flag = defend_land_launch_point
			}					
			### terminal phase defense ###
			every_controlled_state = {				
				limit = {
					anti_air_building > 0
					[target_point_ID] = {
						distance_to = {
							value < [SAM_range]
							target = PREV
						}
					}	
				}
				ROOT = {
					set_temp_variable = { temp1 = 0 }	
					add_to_temp_variable = { temp1 = PREV.building_level@anti_air_building }
					multiply_temp_variable = { temp1 = var_SAM_launcher_tech }
					add_to_variable = { var_intercept_capacity_terminal = temp1 }
				}	
			}
		}
		launch_point_ID = "[?var_launch_point_ID.GetID]"
		target_point_ID = "[?var_target_point_ID.GetID]"
		SAM_range = "[?var_SAM_range]"
		ABM_range = "[?var_ABM_range]"
	}	
}

set_seabased_missile_defense_vars = {
	meta_effect = {
		text = {	
			set_variable = { var_intercept_capacity_boost = 0 }
			set_variable = { var_intercept_capacity_midcourse = 0 }
			set_variable = { var_intercept_capacity_terminal = 0 }
			### boost phase defense ###
			every_controlled_state = {
				limit = {
					sea_launch_point_[sea_defense_ID] = yes
					[launch_point_ID] = {
						distance_to = {
							value < [SAM_range]
							target = PREV
						}
					}	
				}
				ROOT = {
					set_temp_variable = { temp1 = 0 }	
					add_to_temp_variable = { temp1 = 1 } # scripted effect necessary to check ships in sea_launch_point areas 
					multiply_temp_variable = { temp1 = var_ship_SAM_launcher_tech }
					add_to_variable = { var_intercept_capacity_boost = temp1 }
				}													
			}
			### midcourse phase defense ###
			every_controlled_state = {
				limit = {
					sea_launch_point_[sea_defense_ID] = yes
					[launch_point_ID] = {
						distance_to = {
							value < [ABM_range]
							target = PREV
						}
					}	
				}
				ROOT = {
					set_temp_variable = { temp1 = 0 }	
					add_to_temp_variable = { temp1 = 1 } # scripted effect necessary to check ships in sea_launch_point areas
					multiply_temp_variable = { temp1 = var_ship_ABM_launcher_tech }
					add_to_variable = { var_intercept_capacity_midcourse = temp1 }
					PREV = {
						set_state_flag = defend_sea_launch_point
					}
				}				
			}
			every_controlled_state = {
				limit = {
					sea_launch_point_[sea_defense_ID] = yes
					NOT = {
						has_state_flag = defend_sea_launch_point
					}
					[target_point_ID] = {
						distance_to = {
							value < [ABM_range]
							target = PREV
						}
					}	
				}
				ROOT = {
					set_temp_variable = { temp1 = 0 }	
					add_to_temp_variable = { temp1 = 1 } # scripted effect necessary to check ships in sea_launch_point areas
					multiply_temp_variable = { temp1 = var_ship_ABM_launcher_tech }
					add_to_variable = { var_intercept_capacity_midcourse = temp1 }
				}	
			}
			every_controlled_state = {
				clr_state_flag = defend_sea_launch_point
			}					
			### terminal phase defense ###
			every_controlled_state = {				
				limit = {
					sea_launch_point_[sea_defense_ID] = yes
					[target_point_ID] = {
						distance_to = {
							value < [SAM_range]
							target = PREV
						}
					}	
				}
				ROOT = {
					set_temp_variable = { temp1 = 0 }	
					add_to_temp_variable = { temp1 = 1 } # scripted effect necessary to check ships in sea_launch_point areas
					multiply_temp_variable = { temp1 = var_ship_SAM_launcher_tech }
					add_to_variable = { var_intercept_capacity_terminal = temp1 }
				}	
			}
		}
		launch_point_ID = "[?var_launch_point_ID.GetID]"
		target_point_ID = "[?var_target_point_ID.GetID]"
		SAM_range = "[?var_SAM_range]"
		ABM_range = "[?var_ABM_range]"
		sea_defense_ID = "[THIS.GetID]"
	}	
}

set_air_defense_array = {
	every_controlled_state = {
		limit = {
			anti_air_building > 0
		}
		add_to_array = {
			array = air_defense_array
			value = v
			index = i
		}
	}			
}	

### boost phase vs defense ###
boost_phase_defense = {
	set_temp_variable = { temp1 = var_salvo }
	while_loop_effect = {
		limit = {
			check_variable = { temp1 > 0 }
		}
		randomize_variable = {  
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp1 = 1 }	
		if = {
			limit = {						
				check_variable = { var_intercept_capacity_boost > 0 }
			}	
			subtract_from_variable = { var_intercept_capacity_boost = 1 }
			if = {
				limit = {	
					check_variable = { var_missile_trajectory < var_intercept_chance_boost }
				}					
				add_to_variable = { var_missile_interception_boost = 1 }
			}
			else = {
				add_to_variable = { var_missile_boost_completed = 1 }
			}
		}	
		else = {
			add_to_variable = { var_missile_boost_completed = 1 }
		}
	}	
}

### midcourse phase vs defense ###
midcourse_phase_defense = {
	set_temp_variable = { temp2 = var_missile_boost_completed }
	while_loop_effect = {
		limit = {
			check_variable = { temp2 > 0 }
		}
		randomize_variable = {  
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp2 = 1 }	
		if = {
			limit = {						
				check_variable = { var_intercept_capacity_midcourse > 0 }
			}	
			subtract_from_variable = { var_intercept_capacity_midcourse = 1 }
			if = {
				limit = {	
					check_variable = { var_missile_trajectory < var_intercept_chance_midcourse }
				}					
				add_to_variable = { var_missile_interception_midcourse = 1 }
			}
			else = {
				add_to_variable = { var_missile_midcourse_completed = 1 }
			}
		}	
		else = {
			add_to_variable = { var_missile_midcourse_completed = 1 }
		}
	}	
}

### terminal phase vs defense ###
terminal_phase_defense = {
	set_temp_variable = { temp3 = var_missile_midcourse_completed }
	multiply_temp_variable = { temp3 = var_MIRV }
	set_temp_variable = { temp4 = var_missile_midcourse_completed }
	multiply_temp_variable = { temp4 = var_decoy }	
	if = {
		limit = {						
			check_variable = { temp4 > var_intercept_capacity_terminal }
		}
		set_variable = { var_intercept_capacity_terminal = 0 }		
	}
	else = {		
		subtract_from_variable = { var_intercept_capacity_terminal = temp4 }
	}	
	while_loop_effect = {
		limit = {
			check_variable = { temp3 > 0 }
		}
		randomize_variable = {  
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp3 = 1 }			
		if = {
			limit = {						
				check_variable = { var_intercept_capacity_terminal > 0 }
			}	
			subtract_from_variable = { var_intercept_capacity_terminal = 1 }
			if = {
				limit = {	
					check_variable = { var_missile_trajectory < var_intercept_chance_terminal }
				}					
				add_to_variable = { var_missile_interception_terminal = 1 }
			}
			else = {
				add_to_variable = { var_missile_trajectory = var_accuracy }					
				if = {
					limit = { check_variable = { var_missile_trajectory > 1 } }
					add_to_variable = { var_missile_target_hit = 1 }		
				}
				else = {								
					add_to_variable = { var_missile_target_miss = 1 }		
				}
			}
		}	
		else = {
			add_to_variable = { var_missile_trajectory = var_accuracy }					
			if = {
				limit = { check_variable = { var_missile_trajectory > 1 } }
				add_to_variable = { var_missile_target_hit = 1 }		
			}
			else = {								
				add_to_variable = { var_missile_target_miss = 1 }		
			}
		}
	}
	
}

