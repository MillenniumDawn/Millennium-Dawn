# Original Written by Killerrabbit
# Reworked by Gearz, and Angriest Bird

# GDP Calculation
# Calculating things for the money system
#Interest rates are set in GDP/C - need modifier based on debt_ratio, to avoid rich countries getting infinite rich by taking huge loans and reinvesting abroad
#Variable explanations
#####treasury_rate - How much money your country is making daily#####
#tax_gain - money your gaining from taxes
#int_investments_rate - money your gaining from international investments
#resource_sale_rate - money your gaining from exports
#size_modifier - total size of the targeted country

#####expense_gain - total amount of money your spending#####
#debt_rate - How much money your country owes in debt
#interest_rate - the interest  rate you pay DAILY on debt.
#econ_cycle_upg_cost - cost to upgrade economic cycle
#bureaucracy_gain cost for bureaucracy law
#education_gain cost of education law
#health_gain cost of health care law
#welfare_gain cost of welfare law
#military_rate cost of military law
#personnel_cost - how much you pay soldiers and maintenance on equipment

#corporation_tax - Value of the Corporate taxes
#population_tax - value of the population tax
#corporation_tax_rate - Tax rate
#population_tax_rate - pop tax rate

###Treasury reset### -- Legacy commands. Moved this functionality to a update_display command
#In a couple places I've left a comment saying referring to treasury reset explanation. This is the explanation
#It took me a while to figure out why you add debt_rate to treasury_rate so ill try to explain (Gearz)
#When your debt_rate changes you need to "reset the treasury_rate" so you return
#how much you were taking from the treasury before and then take the new amount you need
#e.g treasury_rate $10B, you take $2B for your current debt_rate. Treasury rate = $8B
#Your new debt_rate is $4B. So you need to "reset the treasury" you give the treasury_rate back the $2B
#So treasury_rate is now back to $10B, now subtract the $4B and now treasury rate is $6B
###

#Use this update all economic values in-game
ingame_update_setup = {
	#TODO These need to be removed once they are no longer referenced
	firsttime_calculate_size_modifier = yes
	ingame_calculate_size_modifier = yes

	#National values (GDP, pop etc.) MUST BE FIRST
	update_state_variables = yes

	#Income
	calculate_int_investments_rate = yes
	calculate_resource_sale_rate = yes
	calculate_tax_gain = yes	#TODO CHECK THIS

	#Expenses
	update_military_rate = yes
	update_bureaucracy_rate = yes
	update_police_rate = yes
	update_education_rate = yes
	update_health_rate = yes
	update_social_rate = yes
	calculate_interest_rate = yes

	#Various
	update_economic_cycle_cost = yes

	#Visuals
	update_display = yes
}

#Calculates the "Size" of industry. It uses the resource exports and civilian factories to judge the size of the countries economy. - Bird
#Updating this to include more than just Civilian industries as now dockyards, military industries and offices give tax revenues
firsttime_calculate_size_modifier = {
	set_variable = { resource_exports = resource_exported@steel }
	add_to_variable = { resource_exports = resource_exported@oil }
	add_to_variable = { resource_exports = resource_exported@aluminium }
	add_to_variable = { resource_exports = resource_exported@tungsten }
	add_to_variable = { resource_exports = resource_exported@rubber }
	add_to_variable = { resource_exports = resource_exported@chromium }
	multiply_variable = { resource_exports = 0.125 }
	round_variable = resource_exports

	set_variable = { size_modifier = num_of_civilian_factories }
	add_to_variable = { size_modifier = ROOT.office_park_total }
	add_to_variable = { size_modifier = num_of_naval_factories }
	add_to_variable = { size_modifier = num_of_military_factories }

	#Note from Bird: Removed import calculations. No nation in MD starts with imports therefore its useless calculations
	if = {
		limit = { check_variable = { size_modifier = 0 } }
		add_to_variable = { var = size_modifier value = 0.03 }
		else = {
			multiply_variable = { var = size_modifier value = 0.22 }
			if = {
				limit = { check_variable = { size_modifier > 1.1 } }
				subtract_from_variable = { var = size_modifier value = 0.58 }
			}
			else_if = {
				limit = { check_variable = { size_modifier = 0.22 } }
				subtract_from_variable = { var = size_modifier value = 0.14 }
			}
			else_if = {
				limit = { check_variable = { size_modifier = 0.44 } }
				subtract_from_variable = { var = size_modifier value = 0.30 }
			}
			else_if = {
				limit = { check_variable = { size_modifier = 0.66 } }
				subtract_from_variable = { var = size_modifier value = 0.43 }
			}
			else_if = {
				limit = { check_variable = { size_modifier = 0.88 } }
				subtract_from_variable = { var = size_modifier value = 0.50 }
			}
			else_if = {
				limit = { check_variable = { size_modifier = 1.1 } }
				subtract_from_variable = { var = size_modifier value = 0.56 }
			}
		}
	}
}

#Rewrote Size Modifier
ingame_calculate_size_modifier = {
	#Both use the entire economy now
	set_temp_variable = { size_mod_check = num_of_civilian_factories }
	add_to_temp_variable = { size_mod_check = ROOT.office_park_total }
	add_to_temp_variable = { size_mod_check = num_of_naval_factories }
	add_to_temp_variable = { size_mod_check = num_of_military_factories }

	##Used to prevent instant bankruptcy
	#Further this is used to readd the civvies you lose due to export.
	set_temp_variable = { temp_resource_import = resource_imported@oil }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { size_mod_check = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@aluminium }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { size_mod_check = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@tungsten }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { size_mod_check = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@steel }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { size_mod_check = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@rubber }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { size_mod_check = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@chromium }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { size_mod_check = temp_resource_import }

	if = {
		limit = { check_variable = { size_mod_check = 0 } }
		add_to_temp_variable = { size_mod_check = 0.03 }
		else = {
			multiply_temp_variable = { size_mod_check = 0.22 }
		}
		if = {
			limit = { check_variable = { size_mod_check > 1.1 } }
			subtract_from_temp_variable = { size_mod_check = 0.58 }

			else_if = {
				limit = { check_variable = { size_mod_check = 0.22 } }
				subtract_from_temp_variable = { size_mod_check = 0.14 }
			}
			else_if = {
				limit = { check_variable = { size_mod_check = 0.44 } }
				subtract_from_temp_variable = { size_mod_check = 0.30 }
			}
			else_if = {
				limit = { check_variable = { size_mod_check = 0.66 } }
				subtract_from_temp_variable = { size_mod_check = 0.43 }
			}
			else_if = {
				limit = { check_variable = { size_mod_check = 0.88 } }
				subtract_from_temp_variable = { size_mod_check = 0.50 }
			}
			else_if = {
				limit = { check_variable = { size_mod_check = 1.1 } }
				subtract_from_temp_variable = { size_mod_check = 0.56 }
			}
		}
	}

	### Does it if new civilian factories has been added
	if = {
		limit = { check_variable = { var = size_modifier value = size_mod_check compare = not_equals } }

		### Temp multiply to avoid rounding errors ###
		#multiply_variable = { bureaucracy_gain = 1000 }
		multiply_variable = { security_gain = 1000 }
		multiply_variable = { education_gain = 1000 }
		multiply_variable = { health_gain = 1000 }
		multiply_variable = { welfare_gain = 1000 }
		multiply_variable = { expense_gain = 1000 }
		multiply_variable = { tax_gain = 1000 }
		multiply_variable = { econ_cycle_upg_cost = 1000 }

		#divide_variable = { var = bureaucracy_gain value = size_modifier }
		divide_variable = { var = security_gain value = size_modifier }
		divide_variable = { var = education_gain value = size_modifier }
		divide_variable = { var = health_gain value = size_modifier }
		divide_variable = { var = welfare_gain value = size_modifier }
		divide_variable = { var = expense_gain value = size_modifier }
		divide_variable = { var = tax_gain value = size_modifier }
		divide_variable = { var = econ_cycle_upg_cost value = size_modifier }

		set_variable = { resource_exports = resource_exported@steel }
		add_to_variable = { resource_exports = resource_exported@oil }
		add_to_variable = { resource_exports = resource_exported@aluminium }
		add_to_variable = { resource_exports = resource_exported@tungsten }
		add_to_variable = { resource_exports = resource_exported@rubber }
		add_to_variable = { resource_exports = resource_exported@chromium }
		multiply_variable = { resource_exports = 0.125 }
		round_variable = resource_exports

		set_variable = { size_modifier = num_of_civilian_factories }

		#add back cic lost to trade
		set_temp_variable = { temp_resource_import = resource_imported@oil }
		divide_temp_variable = { var = temp_resource_import value = 8 }
		add_to_variable = { size_modifier = temp_resource_import }

		set_temp_variable = { temp_resource_import = resource_imported@aluminium }
		divide_temp_variable = { var = temp_resource_import value = 8 }
		add_to_variable = { size_modifier = temp_resource_import }

		set_temp_variable = { temp_resource_import = resource_imported@tungsten }
		divide_temp_variable = { var = temp_resource_import value = 8 }
		add_to_variable = { size_modifier = temp_resource_import }

		set_temp_variable = { temp_resource_import = resource_imported@steel }
		divide_temp_variable = { var = temp_resource_import value = 8 }
		add_to_variable = { size_modifier = temp_resource_import }

		set_temp_variable = { temp_resource_import = resource_imported@rubber }
		divide_temp_variable = { var = temp_resource_import value = 8 }
		add_to_variable = { size_modifier = temp_resource_import }

		set_temp_variable = { temp_resource_import = resource_imported@chromium }
		divide_temp_variable = { var = temp_resource_import value = 8 }
		add_to_variable = { size_modifier = temp_resource_import }


		#subtract_from_variable = { size_modifier = resource_exports }

		if = {
			limit = { check_variable = { size_modifier = 0 } }
			add_to_variable = { var = size_modifier value = 0.03 }
			else = {
				multiply_variable = { var = size_modifier value = 0.22 }
				if = {
					limit = { check_variable = { size_modifier > 1.1 } }
					subtract_from_variable = { var = size_modifier value = 0.58 }
				}
				else_if = {
					limit = { check_variable = { size_modifier = 0.22 } }
					subtract_from_variable = { var = size_modifier value = 0.14 }
				}
				else_if = {
					limit = { check_variable = { size_modifier = 0.44 } }
					subtract_from_variable = { var = size_modifier value = 0.30 }
				}
				else_if = {
					limit = { check_variable = { size_modifier = 0.66 } }
					subtract_from_variable = { var = size_modifier value = 0.43 }
				}
				else_if = {
					limit = { check_variable = { size_modifier = 0.88 } }
					subtract_from_variable = { var = size_modifier value = 0.50 }
				}
				else_if = {
					limit = { check_variable = { size_modifier = 1.1 } }
					subtract_from_variable = { var = size_modifier value = 0.56 }
				}
			}
		}

		#multiply_variable = { var = bureaucracy_gain value = size_modifier }
		multiply_variable = { var = security_gain value = size_modifier }
		multiply_variable = { var = education_gain value = size_modifier }
		multiply_variable = { var = health_gain value = size_modifier }
		multiply_variable = { var = welfare_gain value = size_modifier }
		multiply_variable = { var = expense_gain value = size_modifier }
		multiply_variable = { var = tax_gain value = size_modifier }
		multiply_variable = { var = econ_cycle_upg_cost value = size_modifier }

		#Round to avoid automatic cutoff of important values
		#round_variable = bureaucracy_gain
		round_variable = security_gain
		round_variable = education_gain
		round_variable = health_gain
		round_variable = welfare_gain
		round_variable = expense_gain
		round_variable = tax_gain
		round_variable = econ_cycle_upg_cost

		### divide back to avoid rounding errors ###
		#divide_variable = { bureaucracy_gain = 1000 }
		divide_variable = { security_gain = 1000 }
		divide_variable = { education_gain = 1000 }
		divide_variable = { health_gain = 1000 }
		divide_variable = { welfare_gain = 1000 }
		divide_variable = { expense_gain = 1000 }
		divide_variable = { tax_gain = 1000 }
		divide_variable = { econ_cycle_upg_cost = 1000 }
	}

	update_display = yes #will do this always for consistency
}

#Tax rate shit
calculate_tax_rate = {
	remove_tax_cost = yes
	set_variable = { var = tax_rate value = population_tax_rate }
	add_to_variable = { var = tax_rate value = corporate_tax_rate }
	divide_variable = { var = tax_rate value = 2 }
	round_variable = tax_rate
	set_tax_cost = yes
	clamp_variable = { var = tax_rate min = 0 max = 60 }
}
add_tax_laws = {
	meta_effect = {
		text = {
			add_ideas = tax_cost_[TAX_RATE_VAR]
		}
		TAX_RATE_VAR = "[?tax_rate|0]"
	}
}
remove_tax_cost = {
	meta_effect = {
		text = {
			remove_ideas = tax_cost_[TAX_RATE_VAR]
		}
		TAX_RATE_VAR = "[?tax_rate|0]"
	}
}
set_tax_cost = {
	meta_effect = {
		text = {
			add_ideas = tax_cost_[TAX_RATE_VAR]
		}
		TAX_RATE_VAR = "[?tax_rate|0]"
	}
}
increase_tax_cost = {
	set_temp_variable = { tax_increased = tax_rate }
	subtract_from_temp_variable = { tax_increased = 1 }
	meta_effect = {
		text = {
			remove_ideas = tax_cost_[TAX_RATE_VAR_INCR]
		}
		TAX_RATE_VAR_INCR = "[?tax_increased|0]"
	}
	meta_effect = {
		text = {
			add_ideas = tax_cost_[TAX_RATE_VAR]
		}
		TAX_RATE_VAR = "[?tax_rate|0]"
	}
}
decrease_tax_cost = {
	set_temp_variable = { tax_decreased = tax_rate }
	add_to_temp_variable = { tax_decreased = 1 }
	meta_effect = {
		text = {
			remove_ideas = tax_cost_[TAX_RATE_VAR_DECR]
		}
		TAX_RATE_VAR_DECR = "[?tax_decreased|0]"
	}
	meta_effect = {
		text = {
			add_ideas = tax_cost_[TAX_RATE_VAR]
		}
		TAX_RATE_VAR = "[?tax_rate|0]"
	}
}

calculate_tax_gain = {
	set_variable = { tax_gain = 0 }
	#Update starting tax rate
	calculate_tax_rate = yes

	#Corporate Tax Expansion
	set_variable = { var = corporate_tax value = 0 }
	set_temp_variable = { var = civil_fac_tax value = num_of_civilian_factories }
	multiply_temp_variable = { var = civil_fac_tax value = 4 }
	set_temp_variable = { var = military_fac_tax value = num_of_military_factories }
	multiply_temp_variable = { var = military_fac_tax value = 2 }
	set_temp_variable = { var = dockyard_tax value = num_of_naval_factories }
	multiply_temp_variable = { var = dockyard_tax value = 1.5 }
	set_temp_variable = { var = office_tax value = ROOT.office_park_total }
	multiply_temp_variable = { var = office_tax value = 5 }

	#Add the above calculations to give you total corporate taxes
	add_to_variable = { corporate_tax = civil_fac_tax }
	add_to_variable = { corporate_tax = military_fac_tax }
	add_to_variable = { corporate_tax = dockyard_tax }
	add_to_variable = { corporate_tax = office_tax }
	#Calculate actual work
	divide_variable = { var = corporate_tax value = 97 } #Gives TOTAL potential tax assuming 100%
	multiply_variable = { var = corporate_tax value = corporate_tax_rate }

	##POP
	set_variable = { var = population_tax value = population_total }
	divide_variable = { population_tax = 280 } #Gives TOTAL potential tax assuming 100%
	multiply_variable = { var = population_tax value = population_tax_rate }

	multiply_variable = { var = corporate_tax value = size_modifier }
	multiply_variable = { var = population_tax value = size_modifier }

	#DO NOT FUCKING TOUCH -- BIRD
	if = { limit = { has_idea = depression }
		set_temp_variable = { tax_gain_multiplier = 0.60 }
	}
	else_if = { limit = { has_idea = recession }
		set_temp_variable = { tax_gain_multiplier = 0.80 }
	}
	else_if = { limit = { has_idea = stagnation }
		set_temp_variable = { tax_gain_multiplier = 0.90 }
	}
	else_if = { limit = { has_idea = stable_growth }
		set_temp_variable = { tax_gain_multiplier = 1.0 }
	}
	else_if = { limit = { has_idea = fast_growth }
		set_temp_variable = { tax_gain_multiplier = 1.05 }
	}
	else_if = { limit = { has_idea = economic_boom }
		set_temp_variable = { tax_gain_multiplier = 1.10 }
	}

	#DO NOT FUCKING TOUCH -- BIRD
	#Corruption tax modifiers
	if = { limit = { has_idea = paralyzing_corruption }
		subtract_from_temp_variable = { tax_gain_multiplier = 0.35 }
	}
	else_if = { limit = { has_idea = crippling_corruption }
		subtract_from_temp_variable = { tax_gain_multiplier = 0.30 }
	}
	else_if = { limit = { has_idea = rampant_corruption }
		subtract_from_temp_variable = { tax_gain_multiplier = 0.25 }
	}
	else_if = { limit = { has_idea = unrestrained_corruption }
		subtract_from_temp_variable = { tax_gain_multiplier = 0.20 }
	}
	else_if = { limit = { has_idea = systematic_corruption }
		subtract_from_temp_variable = { tax_gain_multiplier = 0.15 }
	}
	else_if = { limit = { has_idea = widespread_corruption }
		subtract_from_temp_variable = { tax_gain_multiplier = 0.10 }
	}
	else_if = { limit = { has_idea = medium_corruption }
		subtract_from_temp_variable = { tax_gain_multiplier = 0.05 }
	}
	else_if = { limit = { has_idea = modest_corruption }
		subtract_from_temp_variable = { tax_gain_multiplier = 0.03 }
	}
	else_if = { limit = { has_idea = slight_corruption }
		subtract_from_temp_variable = { tax_gain_multiplier = 0.02 }
	}
	else_if = { limit = { has_idea = negligible_corruption }
		subtract_from_temp_variable = { tax_gain_multiplier = 0.01 }
	}

	##Country Specific
	#How to add your own tax modifier:
	#all you need to do is create a specific if statement that goes "tag = BLA"
	#Then the conditions you are looking for.
	#Then modify the temp variable tax_gain_multiplier by whatever. So if you want 25% then you do add_to_temp_variable = { tax_gain_multiplier = 0.25 }
	if = {
		limit = {
			tag = NIG
			has_idea = NIG_efficent_government_spending_idea
		}
		add_to_temp_variable = { tax_gain_multiplier = 0.10 }
	}
	#Need to figure out how to do this
	if = { limit = { tag = ITA }
		add_to_temp_variable = { tax_gain_multiplier = ITA_tax_multiplier_var }
	}
	#Modify Taxgain by multiplier
	multiply_variable = { corporate_tax = tax_gain_multiplier }
	multiply_variable = { population_tax = tax_gain_multiplier }
	#Cleanup rounding errors
	divide_variable = { corporate_tax = 1000 }
	divide_variable = { population_tax = 1000 }

	#Expands the variables to show monthly - ignoring the 31s and Feb. Every month is 30days for ease.
	multiply_variable = { corporate_tax = 7 }
	multiply_variable = { population_tax = 7 }

	set_variable = { var = tax_gain value = corporate_tax }
	add_to_variable = { var = tax_gain value = population_tax }
	update_display = yes
}

#Updates interest rate, is called on init and on_daily in MD4_money_on_actions.txt
calculate_interest_rate = {
	#create the variable
	set_variable = { interest_rate = 0 }

	#Base value comes from debt/gdp ratio
	add_to_variable = { interest_rate = debt }
	divide_variable = { interest_rate = gdp_total }
	multiply_variable = { interest_rate = 114 }

	#Debt rate is modified by your GDP/C - linear approximation -0.218 * GDP/C + 5.067
	set_temp_variable = { interest_rate_gdp_modifier = gdp_per_capita }
	multiply_temp_variable = { interest_rate_gdp_modifier = -0.218 }
	add_to_temp_variable = { interest_rate_gdp_modifier = 5.067 }
	clamp_temp_variable = { var = interest_rate_gdp_modifier min = 1 }

	multiply_variable = { interest_rate = interest_rate_gdp_modifier }

	set_variable = { interest_rate_gdp_modifier_display = interest_rate_gdp_modifier }
	subtract_from_variable = { interest_rate_gdp_modifier_display = 1 }

	#Additional additive modifiers
	set_variable = { interest_rate_multiplier = 0 }
	##Generic
	if = {
		limit = { has_idea = international_bankers }
		subtract_from_variable = { interest_rate_multiplier = 1 }
	}
	if = {
		limit = { has_idea = the_euro }
		subtract_from_variable = { interest_rate_multiplier = 1 }
	}
	if = {
		limit = { has_country_flag = bailout_given }
		subtract_from_variable = { interest_rate_multiplier = 10 }
	}
	##USA
	if = {
		limit = { original_tag = USA }
		if = {
			limit = { has_idea = petro_dollar }
			subtract_from_variable = { interest_rate_multiplier = 2 }
		}
		if = {
			limit = { has_idea = wall_street }
			subtract_from_variable = { interest_rate_multiplier = 1 }
		}
	}
	##Japan
	if = {
		limit = { original_tag = JAP }
		if = {
			limit = { has_idea = JAP_deflation }
			subtract_from_variable = { interest_rate_multiplier = 9 }
		}
	}
	##Nigeria
	if = {
		limit = { original_tag = NIG }
		if = {
			limit = { has_idea = NIG_efficent_government_spending_reform_idea }
			subtract_from_variable = { interest_rate_multiplier = 3 }
		}
	}
	##Russia
	if = {
		limit = { original_tag = SOV }
		if = {
			limit = { has_country_flag = SOV_overcoming_the_1998_financial_crisis }
			subtract_from_variable = { interest_rate_multiplier = 2 }
		}
	}
	##Italy
	if = {
		limit = { original_tag = ITA }
		if = {
			limit = { has_idea = ITA_debt_market_trust }
			add_to_variable = { interest_rate_multiplier = bond_markets_trust }
		}
	}

	add_to_variable = { interest_rate = interest_rate_multiplier }

	clamp_variable = {
		var = interest_rate
		min = 0.8
		max = 50
	} #Min is 0.8% on debt max is 50%

	#Calculate debt rate based on interest
	set_variable = { var = debt_rate value = debt }
	multiply_variable = { debt_rate = interest_rate }	#Yearly interest rate
	divide_variable = { debt_rate = 100 }
	divide_variable = { debt_rate = 52 }	#Weekly interest rate, 52 weeks in a year

}

#Update military spending
update_military_rate = {
	#clear the array that stores the law cost
	clear_array = array_defence_spend

	#recreate the array
	for_loop_effect = {
		start = 0
		end = 10 # < 10

		add_to_array = { array_defence_spend = 0 }
	}

	#A variable that stores the current military law the player has
	if = { limit = { has_idea = defence_00 }
		set_temp_variable = { def_index = 0 }
	}
	else_if = { limit = { has_idea = defence_01 }
		set_temp_variable = { def_index = 1 }
	}
	else_if = { limit = { has_idea = defence_02 }
		set_temp_variable = { def_index = 2 }
	}
	else_if = { limit = { has_idea = defence_03 }
		set_temp_variable = { def_index = 3 }
	}
	else_if = { limit = { has_idea = defence_04 }
		set_temp_variable = { def_index = 4 }
	}
	else_if = { limit = { has_idea = defence_05 }
		set_temp_variable = { def_index = 5 }
	}
	else_if = { limit = { has_idea = defence_06 }
		set_temp_variable = { def_index = 6 }
	}
	else_if = { limit = { has_idea = defence_07 }
		set_temp_variable = { def_index = 7 }
	}
	else_if = { limit = { has_idea = defence_08 }
		set_temp_variable = { def_index = 8 }
	}
	else_if = { limit = { has_idea = defence_09 }
		set_temp_variable = { def_index = 9 }
	}

	## Calculate cost for defence industry (military factories and dockyards) ##
	#add the naval factoreis and mil factories to each item index in the array
	for_each_loop = {
		array = array_defence_spend
		value = v
		index = i
		add_to_variable = { array_defence_spend^i = num_of_naval_factories }
		add_to_variable = { array_defence_spend^i = num_of_military_factories }
	}

	#Set the base cost for each spending level based on size of military industry ( [num_of_mil_factories + num_of_naval_factories]/modifier )
	divide_variable = { array_defence_spend^0 = 3000 }
	divide_variable = { array_defence_spend^1 = 300 }
	divide_variable = { array_defence_spend^2 = 150 }
	divide_variable = { array_defence_spend^3 = 100 }
	divide_variable = { array_defence_spend^4 = 75 }
	divide_variable = { array_defence_spend^5 = 50 }
	divide_variable = { array_defence_spend^6 = 37 }
	divide_variable = { array_defence_spend^7 = 15 }
	divide_variable = { array_defence_spend^8 = 10 }
	divide_variable = { array_defence_spend^9 = 8 }

	#Update each item in the defence spending array based on your gdp/c, having a higher GDP makes defence more expensive
	set_temp_variable = { gdp_defence_modifier_industry = gdp_per_capita }
	if = {		#Linear approximation -0.007 * gdp/c + 2.333
		limit = { check_variable = { gdp_defence_modifier_industry > 50 } }
		multiply_temp_variable = { gdp_defence_modifier_industry = -0.007 }
		add_to_temp_variable = { gdp_defence_modifier_industry = 2.333 }
	}
	else_if = {	#Linear approximation -0.046 * gdp/c + 4.286
		limit = { check_variable = { gdp_defence_modifier_industry > 15 } }
		multiply_temp_variable = { gdp_defence_modifier_industry = -0.046 }
		add_to_temp_variable = { gdp_defence_modifier_industry = 4.286 }
	}
	else_if = {	#Linear approximation -0.3 * gdp/c + 8.1
		limit = { check_variable = { gdp_defence_modifier_industry > -1 } }
		multiply_temp_variable = { gdp_defence_modifier_industry = -0.3 }
		add_to_temp_variable = { gdp_defence_modifier_industry = 8.1 }
	}
	clamp_temp_variable = { var = gdp_defence_modifier_industry min = 1 }
	#Defence spending loop
	for_each_loop = {
		array = array_defence_spend
		index = i
		divide_variable = { array_defence_spend^i = gdp_defence_modifier_industry }
	}

	## Calculate the cost of fielded military ##
	### Land ###
	#Below sets up the personnel cost for mil spending based on how many battalions a country has (divided into special, elite, regular and irregular units)

	#Count number of special units
	set_temp_variable = { special_btn = num_battalions_with_type@Special_Forces }

	#Count number of elite units - Kal's note; set normal support battalions to be regular
	set_temp_variable = { elite_btn = num_battalions_with_type@L_Air_assault_Bat }
	add_to_temp_variable = { elite_btn = num_battalions_with_type@Arm_Air_assault_Bat }
	add_to_temp_variable = { elite_btn = num_battalions_with_type@L_Air_Inf_Bat }
	add_to_temp_variable = { elite_btn = num_battalions_with_type@Mot_Air_Inf_Bat }
	add_to_temp_variable = { elite_btn = num_battalions_with_type@Mech_Air_Inf_Bat }
	add_to_temp_variable = { elite_btn = num_battalions_with_type@Arm_Air_Inf_Bat }
	add_to_temp_variable = { elite_btn = num_battalions_with_type@L_Marine_Bat }
	add_to_temp_variable = { elite_btn = num_battalions_with_type@Mot_Marine_Bat }
	add_to_temp_variable = { elite_btn = num_battalions_with_type@Mech_Marine_Bat }
	add_to_temp_variable = { elite_btn = num_battalions_with_type@Arm_Marine_Bat }

	#Count number of regular units
	set_temp_variable = { regular_btn = num_battalions_with_type@L_Inf_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@Mot_Inf_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@Mech_Inf_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@Arm_Inf_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@armor_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@Arty_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@SP_Arty_Bat }
	#These were previously elite - Kal
	add_to_temp_variable = { regular_btn = num_battalions_with_type@SP_AA_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@L_Engi_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@H_Engi_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@L_Recce_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@Mot_Recce_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@Mech_Recce_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@Arm_Recce_Bat }
	add_to_temp_variable = { regular_btn = num_battalions_with_type@armor_Recce_Bat }

	#Count number of irregular units
	set_temp_variable = { irregular_btn = num_battalions_with_type@Militia_Bat }
	add_to_temp_variable = { irregular_btn = num_battalions_with_type@Mot_Militia_Bat }

	#Multiply each category with a weight value, and then add up categories together (eg. one special forces battalion is worth 1 militia battalion etc). Use these if you want to control costs of different land units to each other
	multiply_temp_variable = { special_btn = 5 }
	multiply_temp_variable = { elite_btn = 3 }
	multiply_temp_variable = { regular_btn = 2 }
	multiply_temp_variable = { irregular_btn = 1 }
	set_temp_variable = { land_count = 0 }
	add_to_temp_variable = { land_count = special_btn }
	add_to_temp_variable = { land_count = elite_btn }
	add_to_temp_variable = { land_count = regular_btn }
	add_to_temp_variable = { land_count = irregular_btn }

	### Navy ###
	#Below sets the cost for ships based on the number of ships (divided into carriers, capitals, destroyers and minors - children are cheap)
	if = {
		limit = { NOT = { has_dlc = "Man the Guns" } }
		#Count number of carriers
		set_temp_variable = { carrier_count = num_ships_with_type@Nuclear_carrier }
		add_to_temp_variable = { carrier_count = num_ships_with_type@carrier }

		#Count number of capital/large ships
		set_temp_variable = { capital_count = num_ships_with_type@nuclear_cruiser }
		add_to_temp_variable = { capital_count = num_ships_with_type@cruiser }
		add_to_temp_variable = { capital_count = num_ships_with_type@LHA }
		add_to_temp_variable = { capital_count = num_ships_with_type@LPD }
		add_to_temp_variable = { capital_count = num_ships_with_type@attack_submarine }
		add_to_temp_variable = { capital_count = num_ships_with_type@missile_submarine }

		#Count number of destroyers
		set_temp_variable = { destroyer_count = num_ships_with_type@destroyer }

		#Count number of screens/small ships
		set_temp_variable = { minor_count = num_ships_with_type@frigate }
		add_to_temp_variable = { minor_count = num_ships_with_type@corvette }
		add_to_temp_variable = { minor_count = num_ships_with_type@diesel_attack_submarine }
	}
	else_if = {
		limit = { has_dlc = "Man the Guns" }
		#Count number of carriers
		set_temp_variable = { carrier_count = num_ships_with_type@carrier_mtg }

		#Count number of capital/large ships
		set_temp_variable = { capital_count = num_ships_with_type@battleship_mtg }
		add_to_temp_variable = { capital_count = num_ships_with_type@cruiser_mtg }
		add_to_temp_variable = { capital_count = num_ships_with_type@battleship_mtg }
		add_to_temp_variable = { capital_count = num_ships_with_type@battle_cruiser_mtg }
		add_to_temp_variable = { capital_count = num_ships_with_type@missile_submarine_mtg }

		#Count number of destroyers
		set_temp_variable = { destroyer_count = num_ships_with_type@destroyer_mtg }
		set_temp_variable = { destroyer_count = num_ships_with_type@stealth_destroyer_mtg }

		#Count number of screens/small ships
		set_temp_variable = { minor_count = num_ships_with_type@frigate_mtg }
		add_to_temp_variable = { minor_count = num_ships_with_type@corvette_mtg }
		add_to_temp_variable = { minor_count = num_ships_with_type@attack_submarine_mtg }
	}

	#Multiply each category with a weight value, and then add up categories together (eg. one carrier is worth 10 small ships etc). Use these if you want to control costs of different ships to each other - Kal's note: changed math to match land stuff
	multiply_temp_variable = { carrier_count = 10 }
	multiply_temp_variable = { capital_count = 5 }
	multiply_temp_variable = { destroyer_count = 2 }
	multiply_temp_variable = { minor_count = 1 }
	set_temp_variable = { navy_count = 0 }
	set_temp_variable = { navy_count = carrier_count }
	add_to_temp_variable = { navy_count = capital_count }
	add_to_temp_variable = { navy_count = destroyer_count }
	add_to_temp_variable = { navy_count = minor_count }

	### Airforce ###
	#Below sets the cost for ships based on the number of ships (divided into cheap, regular, expensinve and strategic airforce) Use these if you want to control costs of different aircraft to each other - Kal's note: changed math to match land/navy stuff.

	#Count number of strategic airforce
	set_temp_variable = { strategic_airforce = num_deployed_planes_with_type@strategic_bomber_equipment }

	#Count number of expensive planes
	set_temp_variable = { expensive_airforce = num_deployed_planes_with_type@transport_plane_equipment }
	add_to_temp_variable = { expensive_airforce = num_deployed_planes_with_type@nav_plane_equipment }

	#Count number or regular airforce
	set_temp_variable = { regular_airforce = num_deployed_planes_with_type@MR_Fighter_equipment }
	add_to_temp_variable = { regular_airforce = num_deployed_planes_with_type@CV_MR_Fighter_equipment }
	add_to_temp_variable = { regular_airforce = num_deployed_planes_with_type@AS_Fighter_equipment }
	add_to_temp_variable = { regular_airforce = num_deployed_planes_with_type@Strike_fighter_equipment }
	add_to_temp_variable = { regular_airforce = num_deployed_planes_with_type@Air_UAV_equipment }
	add_to_temp_variable = { regular_airforce = num_deployed_planes_with_type@CAS_equipment }

	#Count number of cheap airforce
	set_temp_variable = { cheap_airforce = num_deployed_planes_with_type@attack_helicopter_equipment }
	add_to_temp_variable = { cheap_airforce = num_deployed_planes_with_type@L_Strike_fighter_equipment }
	add_to_temp_variable = { cheap_airforce = num_deployed_planes_with_type@CV_L_Strike_fighter_equipment }

	#Multiply each category with a weight value, and then add up categories together (eg. one strategic bomber is worth 14 helicopters etc) - Kal's note: changed math to match land/navy stuff
	multiply_temp_variable = { strategic_airforce = 14 }
	multiply_temp_variable = { expensive_airforce = 5 }
	multiply_temp_variable = { regular_airforce = 3 }
	multiply_temp_variable = { cheap_airforce = 1 }
	set_temp_variable = { airforce_count = 0 }
	add_to_temp_variable = { airforce_count = strategic_airforce }
	add_to_temp_variable = { airforce_count = expensive_airforce }
	add_to_temp_variable = { airforce_count = regular_airforce }
	add_to_temp_variable = { airforce_count = cheap_airforce }

	### Total ###
	#Control factors to scale different branches with each other in cost. Use these control how expensive different branches are against each other
	divide_temp_variable = { land_count = 4 } 		#Cost values are; special 1.25, elite 0.75, regular 0.5, irregular 0.25 (cost weight for one battalion)
	multiply_temp_variable = { navy_count = 10 } 	#Cost values are; carrier 100, capital 50, destroyer 20, small ship 10 (cost weight for one ship)
	divide_temp_variable = { airforce_count = 14 } 	#Cost values are; strategic 1, expensive 0.35, regular 0.21, cheap 0.07 (cost weight for one plane)

	#Additive personnel cost multiplier
	set_temp_variable = { personnel_cost_multiplier = 1 }
	#Wages for a volunteer army is higher, this math was dumb before
	if = {
		limit = { has_idea = draft_army }
		add_to_temp_variable = { personnel_cost_multiplier = 0 }
	}
	else_if ={
		limit = { has_idea = partial_draft_army }
		add_to_temp_variable = { personnel_cost_multiplier = 0.4 }
	}
	else_if = {
		limit = { has_idea = volunteer_army }
		add_to_temp_variable = { personnel_cost_multiplier = 0.8 }
	}
	else_if = {
		limit = { has_idea = no_military }
		add_to_temp_variable = { personnel_cost_multiplier = 1 }		#TODO MISSING FROM TOOLTIP
	}
	#Having higher officer spending increases personnel cost
	if = {
		limit = { has_idea = officer_baptism_by_fire }
		add_to_temp_variable = { personnel_cost_multiplier = 0 }
	}
	else_if = {
		limit = { has_idea = officer_basic_training }
		add_to_temp_variable = { personnel_cost_multiplier = 0.05 }
	}
	else_if = {
		limit = { has_idea = officer_advanced_training }
		add_to_temp_variable = { personnel_cost_multiplier = 0.1 }
	}
	else_if = {
		limit = { has_idea = officer_military_school }
		add_to_temp_variable = { personnel_cost_multiplier = 0.15 }
	}
	else_if = {
		limit = { has_idea = officer_military_academy }
		add_to_temp_variable = { personnel_cost_multiplier = 0.2 }
	}
	else_if = {
		limit = { has_idea = officer_international_education }
		add_to_temp_variable = { personnel_cost_multiplier = 0.25 }
	}
	#Modify personnel cost with total wage modifier
	multiply_temp_variable = { land_count = personnel_cost_multiplier }
	multiply_temp_variable = { navy_count = personnel_cost_multiplier }
	multiply_temp_variable = { airforce_count = personnel_cost_multiplier }

	#Multiply personnel costs basde on GDP/c, higher GDP makes things more expensive (linear approximation 0.003 * gdp/c + 0.129)
	set_temp_variable = { gdp_defence_modifier_personnel = gdp_per_capita }
	multiply_temp_variable = { gdp_defence_modifier_personnel = 0.003 }
	add_to_temp_variable = { gdp_defence_modifier_personnel = 0.129 }
	multiply_temp_variable = { land_count = gdp_defence_modifier_personnel }
	multiply_temp_variable = { navy_count = gdp_defence_modifier_personnel }
	multiply_temp_variable = { airforce_count = gdp_defence_modifier_personnel }

	#Divide by control factors (same for all!) - Use this if you want to scale cost of military personnel in relation to defence industry
	divide_temp_variable = { land_count = 1000 }
	divide_temp_variable = { navy_count = 1000 }
	divide_temp_variable = { airforce_count = 1000 }

	#Add up armed forces
	set_temp_variable = { personnel_cost = land_count }
	add_to_temp_variable = { personnel_cost = navy_count }
	add_to_temp_variable = { personnel_cost = airforce_count }

	#Values for breakdown tooltips
	set_variable = { defence_breakdown_industry = array_defence_spend^def_index }
	multiply_variable = { defence_breakdown_industry = 7 }
	set_variable = { defence_breakdown_land = land_count }
	multiply_variable = { defence_breakdown_land = 7 }
	set_variable = { defence_breakdown_navy = navy_count }
	multiply_variable = { defence_breakdown_navy = 7 }
	set_variable = { defence_breakdown_airforce = airforce_count }
	multiply_variable = { defence_breakdown_airforce = 7 }

	set_variable = { defence_breakdown_industry_gdp_modifier = 8.1 }	#Maximum modifier
	divide_variable = {defence_breakdown_industry_gdp_modifier = gdp_defence_modifier_industry }
	subtract_from_variable = { defence_breakdown_industry_gdp_modifier = 1 }	#Working with percentages
	set_variable = { defence_breakdown_personnel_gdp_modifier = gdp_defence_modifier_personnel }
	divide_variable = { defence_breakdown_personnel_gdp_modifier = 0.129 } #Minimum modifier
	subtract_from_variable = { defence_breakdown_personnel_gdp_modifier = 1 }	#Working with percentages
	set_variable = { defence_breakdown_personnel_modifier = personnel_cost_multiplier }
	subtract_from_variable = { defence_breakdown_personnel_modifier = 1 }

	#Add military industry and personnel costs together for the total
	for_each_loop = {
		array = array_defence_spend
		index = i
		value = v
		add_to_variable = { array_defence_spend^i = personnel_cost }
		multiply_variable = { array_defence_spend^i = 7 } #Multiply each index by 7 days
	}

	set_variable = { defence_gain = array_defence_spend^def_index }
}

#Update bureaucracy spending
update_bureaucracy_rate = {
	#clear the array that stores the law cost
	clear_array = array_bureaucracy_spend

	#Set the base cost of bureaucracy (billion $ per 10 000 000 people)
	set_temp_variable = { bureaucracy_base_cost = 0.010 }

	#recreate the array
	for_loop_effect = {
		start = 0
		end = 5 # < 10

		add_to_array = { array_bureaucracy_spend = 0 }
	}

	#Calculate the base cost of bureaucracy levels
	for_each_loop = {
		array = array_bureaucracy_spend
		index = i
		value = v
		add_to_variable = { var = array_bureaucracy_spend^i value = population_total }	#Unit 100 000
		divide_variable = { var = array_bureaucracy_spend^i value = 100 }	#Unit 10 000 000
		multiply_variable = { var = array_bureaucracy_spend^i value = bureaucracy_base_cost }
	}

	#Modify based on spending level
	multiply_variable = { var = array_bureaucracy_spend^0 value = 1 }
	multiply_variable = { var = array_bureaucracy_spend^1 value = 1.6 }
	multiply_variable = { var = array_bureaucracy_spend^2 value = 2 }
	multiply_variable = { var = array_bureaucracy_spend^3 value = 2.4 }
	multiply_variable = { var = array_bureaucracy_spend^4 value = 3 }

	#Set which spending level the country is at
	if = { limit = { has_idea = bureau_01 }
		set_temp_variable = { bureau_index = 0 }
	}
	else_if = { limit = { has_idea = bureau_02 }
		set_temp_variable = { bureau_index = 1 }
	}
	else_if = { limit = { has_idea = bureau_03 }
		set_temp_variable = { bureau_index = 2 }
	}
	else_if = { limit = { has_idea = bureau_04 }
		set_temp_variable = { bureau_index = 3 }
	}
	else_if = { limit = { has_idea = bureau_05 }
		set_temp_variable = { bureau_index = 4 }
	}

	#Additional additive modifiers
	set_temp_variable = { bureaucracy_cost_multiplier = 1 }
	##Italy
	if = {
		limit = { original_tag = ITA }
		if = {
			limit = { has_idea = ITA_inefficient_administration_4 } ##50% increase in cost for bureaucracy
			add_to_temp_variable = { bureaucracy_cost_multiplier = 0.5 }
		}
		else_if = {
			limit = { has_idea = ITA_inefficient_administration_3 } ##37,5% increase in cost for bureaucracy
			add_to_temp_variable = { bureaucracy_cost_multiplier = 0.375 }
		}
		else_if = {
			limit = { has_idea = ITA_inefficient_administration_2 } ##25% increase in cost for bureaucracy
			add_to_temp_variable = { bureaucracy_cost_multiplier = 0.25 }
		}
		else_if = {
			limit = { has_idea = ITA_inefficient_administration_1 } ##12,5% increase in cost for bureaucracy
			add_to_temp_variable = { bureaucracy_cost_multiplier = 0.125 }
		}
	}

	for_each_loop = {
		array = array_bureaucracy_spend
		index = i
		value = v
		multiply_variable = { array_bureaucracy_spend^i = bureaucracy_cost_multiplier }
	}

	set_variable = { bureaucracy_cost_multiplier_display = bureaucracy_cost_multiplier }
	subtract_from_variable = { bureaucracy_cost_multiplier_display = 1 }

	#Set as weekly value
	for_each_loop = {
		array = array_bureaucracy_spend
		index = i
		value = v
		multiply_variable = { array_bureaucracy_spend^i = 7 } #Multiply each index by 7 days
	}

	set_variable = { var = bureaucracy_gain value = array_bureaucracy_spend^bureau_index }

}

#Update police spending
update_police_rate = {
	#clear the array that stores the law cost
	clear_array = array_security_spend

	#Set the base cost of policing (billion $ per 10 000 000 people)
	set_temp_variable = { police_base_cost = 0.006 }

	#recreate the array
	for_loop_effect = {
		start = 0
		end = 5 # < 10

		add_to_array = { array_security_spend = 0 }
	}

	#Calculate the base cost of police levels
	for_each_loop = {
		array = array_security_spend
		index = i
		value = v
		add_to_variable = { array_security_spend^i = population_total }	#Unit 100 000
		divide_variable = { array_security_spend^i = 100 }	#Unit 10 000 000
		multiply_variable = { array_security_spend^i = police_base_cost }
	}

	#Modify based on spending level
	multiply_variable = { array_security_spend^0 = 1 }
	multiply_variable = { array_security_spend^1 = 1.6 }
	multiply_variable = { array_security_spend^2 = 2 }
	multiply_variable = { array_security_spend^3 = 2.4 }
	multiply_variable = { array_security_spend^4 = 3 }

	#Set which spending level the country is at
	if = { limit = { has_idea = police_01 }
		set_temp_variable = { security_index = 0 }
	}
	else_if = { limit = { has_idea = police_02 }
		set_temp_variable = { security_index = 1 }
	}
	else_if = { limit = { has_idea = police_03 }
		set_temp_variable = { security_index = 2 }
	}
	else_if = { limit = { has_idea = police_04 }
		set_temp_variable = { security_index = 3 }
	}
	else_if = { limit = { has_idea = police_05 }
		set_temp_variable = { security_index = 4 }
	}

	#Additional additive modifiers
	set_temp_variable = { police_cost_multiplier = 1 }
	##Generic
	if = {
		limit = { has_tech = DNA_fingerprinting }
		subtract_from_temp_variable = { police_cost_multiplier = 0.05 }
	}
	##Italy
	if = {
		limit = { original_tag = ITA }
		if = {
			limit = { has_idea = ITA_legalized_light_drugs }
			subtract_from_temp_variable = { police_cost_multiplier = 0.10 }
		}
	}

	for_each_loop = {
		array = array_security_spend
		index = i
		value = v
		multiply_variable = { array_security_spend^i = police_cost_multiplier }
	}

	set_variable = { police_cost_multiplier_display = police_cost_multiplier }
	subtract_from_variable = { police_cost_multiplier_display = 1 }

	#Set as weekly value
	for_each_loop = {
		array = array_security_spend
		index = i
		value = v
		multiply_variable = { array_security_spend^i = 7 } #Multiply each index by 7 days
	}

	set_variable = { security_gain = array_security_spend^security_index }
}

#Update education spending
update_education_rate = {
	#clear the array that stores the law cost
	clear_array = array_education_spend

	#Set the base cost of education (billion $ per 10 000 000 people)
	set_temp_variable = { education_base_cost = 0.144 }

	#recreate the array
	for_loop_effect = {
		start = 0
		end = 5

		add_to_array = { array_education_spend = 0 }
	}

	#Calculate the base cost of bureaucracy levels
	for_each_loop = {
		array = array_education_spend
		index = i
		value = v
		add_to_variable = { array_education_spend^i = population_total }	#Unit 100 000
		divide_variable = { array_education_spend^i = 100 }	#Unit 10 000 000
		multiply_variable = { array_education_spend^i = education_base_cost }
	}

	#Modify based on spending level
	multiply_variable = { array_education_spend^0 = 1 }
	multiply_variable = { array_education_spend^1 = 2 }
	multiply_variable = { array_education_spend^2 = 3 }
	multiply_variable = { array_education_spend^3 = 4 }
	multiply_variable = { array_education_spend^4 = 5 }

	#Set which spending level the country is at
	if = { limit = { has_idea = edu_01 }
		set_temp_variable = { education_index = 0 }
	}
	else_if = { limit = { has_idea = edu_02 }
		set_temp_variable = { education_index = 1 }
	}
	else_if = { limit = { has_idea = edu_03 }
		set_temp_variable = { education_index = 2 }
	}
	else_if = { limit = { has_idea = edu_04 }
		set_temp_variable = { education_index = 3 }
	}
	else_if = { limit = { has_idea = edu_05 }
		set_temp_variable = { education_index = 4 }
	}

	#Education spending is more expensive for poor countries - linear approximation with -0.086 * GDP/C + 2.182
	set_temp_variable = { gdp_education_cost_modifier = gdp_per_capita }
	multiply_temp_variable = { gdp_education_cost_modifier = -0.086 }
	add_to_temp_variable = { gdp_education_cost_modifier = 2.182 }
	clamp_temp_variable = { var = gdp_education_cost_modifier min = 1 }

	for_each_loop = {
		array = array_education_spend
		index = i
		multiply_variable = { array_education_spend^i = gdp_education_cost_modifier }
	}

	set_variable = { education_cost_gdp_multiplier_display = gdp_education_cost_modifier }
	subtract_from_variable = { education_cost_gdp_multiplier_display = 1 }

	#Additional additive modifiers
	set_temp_variable = { education_cost_multiplier = 1 }
	##Generic
	if = {
		limit = { has_tech = internet1 }
		subtract_from_temp_variable = { education_cost_multiplier = 0.03 }
	}
	if = {
		limit = { has_tech = internet2 }
		subtract_from_temp_variable = { education_cost_multiplier = 0.05 }
	}
	if = {
		limit = { has_tech = internet3 }
		subtract_from_temp_variable = { education_cost_multiplier = 0.03 }
	}
	if = {
		limit = { has_tech = internet4 }
		subtract_from_temp_variable = { education_cost_multiplier = 0.05 }
	}
	if = {
		limit = { has_tech = internet5 }
		subtract_from_temp_variable = { education_cost_multiplier = 0.03 }
	}
	if = {
		limit = { has_tech = internet6 }
		subtract_from_temp_variable = { education_cost_multiplier = 0.05 }
	}

	for_each_loop = {
		array = array_education_spend
		index = i
		value = v
		multiply_variable = { array_education_spend^i = education_cost_multiplier }
	}

	set_variable = { education_cost_multiplier_display = education_cost_multiplier }
	subtract_from_variable = { education_cost_multiplier_display = 1 }

	set_variable = { education_gain = array_education_spend^education_index }
}

#Update health spending
update_health_rate = {
	#clear the array that stores the law cost
	clear_array = array_health_spend

	#Set the base cost of health (billion $ per 10 000 000 people)
	set_temp_variable = { health_base_cost = 0.010 }

	#Create the array for manipulation purposes
	for_loop_effect = {
		start = 0
		end = 6
		add_to_array = { array_health_spend = 0 }
	}

	#Calculate the base cost of health levels
	for_each_loop = {
		array = array_health_spend
		index = i
		value = v
		add_to_variable = { var = array_health_spend^i value = population_total }	#Unit 100 000
		divide_variable = { var = array_health_spend^i value = 100 }	#Unit 10 000 000
		multiply_variable = { var = array_health_spend^i value = health_base_cost }
	}

	#Modify based on spending level
	multiply_variable = { array_health_spend^0 = 1 }
	multiply_variable = { array_health_spend^1 = 2 }
	multiply_variable = { array_health_spend^2 = 4 }
	multiply_variable = { array_health_spend^3 = 6 }
	multiply_variable = { array_health_spend^4 = 8 }
	multiply_variable = { array_health_spend^5 = 10 }

	#Set which spending level the country is at
	if = { limit = { has_idea = health_01 }
		set_temp_variable = { health_index = 0 }
	}
	else_if = { limit = { has_idea = health_02 }
		set_temp_variable = { health_index = 1 }
	}
	else_if = { limit = { has_idea = health_03 }
		set_temp_variable = { health_index = 2 }
	}
	else_if = { limit = { has_idea = health_04 }
		set_temp_variable = { health_index = 3 }
	}
	else_if = { limit = { has_idea = health_05 }
		set_temp_variable = { health_index = 4 }
	}
	else_if = { limit = { has_idea = health_06 }
		set_temp_variable = { health_index = 5 }
	}

	#Additional additive modifiers
	set_temp_variable = { health_cost_multiplier = 1 }
	##Generic
	if = {
		limit = { has_tech = nanocellulose_in_medicine }
		subtract_from_temp_variable = { health_cost_multiplier = 0.10 }
	}
	if = {
		limit = { has_tech = medical_nanorobots }
		subtract_from_temp_variable = { health_cost_multiplier = 0.05 }
	}

	for_each_loop = {
		array = array_health_spend
		index = i
		value = v
		multiply_variable = { var = array_health_spend^i value = health_cost_multiplier }
	}

	set_variable = { health_cost_multiplier_display = health_cost_multiplier }
	subtract_from_variable = { health_cost_multiplier_display = 1 }

	#Set as weekly value
	for_each_loop = {
		array = array_health_spend
		index = i
		value = v
		multiply_variable = { array_health_spend^i = 7 } #Multiply each index by 7 days
	}

	set_variable = { health_gain = array_health_spend^health_index }
}

#Update social spending
update_social_rate = {
	#clear the array that stores the law cost
	clear_array = array_social_spend

	#Set the base cost of welfare (billion $ per 10 000 000 people)
	set_temp_variable = { social_base_cost = 0.020 }

	#recreate the array
	for_loop_effect = {
		start = 0
		end = 6

		add_to_array = { array_social_spend = 0 }
	}

	#Calculate the base cost of social levels
	for_each_loop = {
		array = array_social_spend
		index = i
		value = v
		add_to_variable = { var = array_social_spend^i value = population_total }	#Unit 100 000
		divide_variable = { var = array_social_spend^i value = 100 }	#Unit 10 000 000
		multiply_variable = { var = array_social_spend^i value = social_base_cost }
	}

	#Modify based on spending level
	multiply_variable = { array_social_spend^0 = 1 }
	multiply_variable = { array_social_spend^1 = 2.25 }
	multiply_variable = { array_social_spend^2 = 3.5 }
	multiply_variable = { array_social_spend^3 = 4.75 }
	multiply_variable = { array_social_spend^4 = 6.5 }
	multiply_variable = { array_social_spend^5 = 8.25 }

	#Set which spending level the country is at
	if = { limit = { has_idea = social_01 }
		set_temp_variable = { social_index = 0 }
	}
	else_if = { limit = { has_idea = social_02 }
		set_temp_variable = { social_index = 1 }
	}
	else_if = { limit = { has_idea = social_03 }
		set_temp_variable = { social_index = 2 }
	}
	else_if = { limit = { has_idea = social_04 }
		set_temp_variable = { social_index = 3 }
	}
	else_if = { limit = { has_idea = social_05 }
		set_temp_variable = { social_index = 4 }
	}
	else_if = { limit = { has_idea = social_06 }
		set_temp_variable = { social_index = 5 }
	}

	#Additional additive modifiers
	set_temp_variable = { social_cost_multiplier = 1 }

	for_each_loop = {
		array = array_social_spend
		index = i
		value = v
		multiply_variable = { var = array_social_spend^i value = social_cost_multiplier }
	}

	set_variable = { social_cost_multiplier_display = social_cost_multiplier }
	subtract_from_variable = { social_cost_multiplier_display = 1 }

	#Set as weekly value
	for_each_loop = {
		array = array_social_spend
		index = i
		value = v
		multiply_variable = { array_social_spend^i = 7 } #Multiply each index by 7 days
	}

	set_variable = { welfare_gain = array_social_spend^social_index }
}

#Income Related Stuff --- International Investments and Calculated Resource Sale Rate
#Update money gained from international investments
calculate_int_investments_rate = {
	#Set base ROI rate
	set_variable = { roi_rate = 0.06 }	#6%

	#This is how much money we get back in a year
	set_variable = { int_investments_rate = int_investments }
	multiply_variable = { int_investments_rate = roi_rate }

	divide_variable = { int_investments_rate = 365 }	#Per day
	multiply_variable = { int_investments_rate = 7 } #7 days worth of income
}

#Calculates income from resources
calculate_resource_sale_rate = {
	#Set the base price for single unit of resource, this is the relative price between resources
	set_temp_variable = { oil_price = 5 }	#Divided 50/50 based on oil/natural gas price #Limited to 5, was 28
	set_temp_variable = { steel_price = 0.01 }	#Based on steel price
	set_temp_variable = { aluminium_price = 0.12 }	#Based on aluminium price
	set_temp_variable = { tungsten_price = 0.2 }	#Based on copper price
	set_temp_variable = { chromium_price = 1 }	#Based on gold price
	set_temp_variable = { rubber_price = 0.05 }	#Based on rubber price

	#resource_exported = total amount of resources put to market
	set_variable = { oil_exports = resource_exported@oil }
	set_variable = { steel_exports = resource_exported@steel }
	set_variable = { aluminium_exports = resource_exported@aluminium }
	set_variable = { tungsten_exports = resource_exported@tungsten }
	set_variable = { chromium_exports = resource_exported@chromium }
	set_variable = { rubber_exports = resource_exported@rubber }

	#Add up total
	set_temp_variable = { resource_exports = oil_exports }
	add_to_temp_variable = { resource_exports = steel_exports }
	add_to_temp_variable = { resource_exports = aluminium_exports }
	add_to_temp_variable = { resource_exports = tungsten_exports }
	add_to_temp_variable = { resource_exports = chromium_exports }
	add_to_temp_variable = { resource_exports = rubber_exports }

	#Don't give money for resources that are bought, as they already give CIC
	set_temp_variable = { CIC_from_trade = num_of_civilian_factories }
	subtract_from_temp_variable = { CIC_from_trade = industrial_complex_total }
	multiply_temp_variable = { CIC_from_trade = 6 }
	divide_temp_variable = { CIC_from_trade = resource_exports }
	subtract_from_temp_variable = { CIC_from_trade = 1 }
	multiply_temp_variable = { CIC_from_trade = -1 }
	clamp_temp_variable = { var = CIC_from_trade max = 1 min = 0 }

	#Scale down everything based on above
	multiply_variable = { oil_exports = CIC_from_trade }
	multiply_variable = { steel_exports = CIC_from_trade }
	multiply_variable = { aluminium_exports = CIC_from_trade }
	multiply_variable = { tungsten_exports = CIC_from_trade }
	multiply_variable = { chromium_exports = CIC_from_trade }
	multiply_variable = { rubber_exports = CIC_from_trade }

	#Multiply with cost to get money generated
	multiply_variable = { oil_exports = oil_price }
	multiply_variable = { steel_exports = steel_price }
	multiply_variable = { aluminium_exports = aluminium_price }
	multiply_variable = { tungsten_exports = tungsten_price }
	multiply_variable = { chromium_exports = chromium_price }
	multiply_variable = { rubber_exports = rubber_price }

	#Additional additive modifiers
	set_temp_variable = { resource_export_multiplier = 1 }

	multiply_variable = { oil_exports = resource_export_multiplier }
	multiply_variable = { steel_exports = resource_export_multiplier }
	multiply_variable = { aluminium_exports = resource_export_multiplier }
	multiply_variable = { tungsten_exports = resource_export_multiplier }
	multiply_variable = { chromium_exports = resource_export_multiplier }
	multiply_variable = { rubber_exports = resource_export_multiplier }

	set_variable = { resource_export_multiplier_display = resource_export_multiplier }
	subtract_from_variable = { resource_export_multiplier_display = 1 }

	#Scale factors
	divide_variable = { oil_exports = 1900 }
	divide_variable = { steel_exports = 1900 }
	divide_variable = { aluminium_exports = 1900 }
	divide_variable = { tungsten_exports = 1900 }
	divide_variable = { chromium_exports = 1900 }
	divide_variable = { rubber_exports = 1900 }

	#Income for 7 days
	multiply_variable = { oil_exports = 7 }
	multiply_variable = { steel_exports = 7 }
	multiply_variable = { aluminium_exports = 7 }
	multiply_variable = { tungsten_exports = 7 }
	multiply_variable = { chromium_exports = 7 }
	multiply_variable = { rubber_exports = 7 }

	#Add total cost
	set_variable = { resource_sale_rate = oil_exports }
	add_to_variable = { resource_sale_rate = steel_exports }
	add_to_variable = { resource_sale_rate = aluminium_exports }
	add_to_variable = { resource_sale_rate = tungsten_exports }
	add_to_variable = { resource_sale_rate = chromium_exports }
	add_to_variable = { resource_sale_rate = rubber_exports }
}

update_display = {
	set_variable = { var = display_expense value = bureaucracy_gain }
	add_to_variable = { var = display_expense value = defence_gain }
	add_to_variable = { var = display_expense value = security_gain }
	add_to_variable = { var = display_expense value = education_gain }
	add_to_variable = { var = display_expense value = health_gain }
	add_to_variable = { var = display_expense value = welfare_gain }
	add_to_variable = { var = display_expense value = debt_rate }

	set_variable = { var = display_income value = tax_gain }
	add_to_variable = { var = display_income value = resource_sale_rate }
	add_to_variable = { var = display_income value = int_investments_rate }

	set_variable = { var = treasury_rate value = display_income }
	subtract_from_variable = { var = treasury_rate value = display_expense }
}

update_economic_cycle_cost = {
	#Base on size of economy
	set_variable = { econ_cycle_upg_cost = gdp_total }
	divide_variable = { econ_cycle_upg_cost = 660 }

	#Additional additive modifiers
	set_temp_variable = { econ_cycle_upg_cost_multiplier = 1 }
	if = {
		limit = { has_idea = the_euro }
		add_to_temp_variable = { econ_cycle_upg_cost_multiplier = 0.5 }
	}

	multiply_variable = { econ_cycle_upg_cost = econ_cycle_upg_cost_multiplier }
}

#Monthly tick actions
automated_debt_taker = {
	if = {
		limit = { check_variable = { treasury < 0 } }
		if = {
			limit = { num_of_civilian_factories < 5 }
			add_to_variable = { treasury = 0.2 }
			add_to_variable = { debt = 0.2 }
			if = {
				limit = { check_variable = { treasury < -0.5 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		#intentionally cycles through all to add appropriate total amount
		if = {
			limit = { num_of_civilian_factories > 4 }
			add_to_variable = { treasury = 1 }
			add_to_variable = { debt = 1 }
			if = {
				limit = { check_variable = { treasury < -5 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		if = {
			limit = { num_of_civilian_factories > 20 }
			add_to_variable = { treasury = 4 }
			add_to_variable = { debt = 4 }
			if = {
				limit = { check_variable = { treasury < -8 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		if = {
			limit = { num_of_civilian_factories > 40 }
			add_to_variable = { treasury = 10 }
			add_to_variable = { debt = 10 }
			if = {
				limit = { check_variable = { treasury < -15 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		if = {
			limit = { num_of_civilian_factories > 60 }
			add_to_variable = { treasury = 15 }
			add_to_variable = { debt = 15 }
			if = {
				limit = { check_variable = { treasury < -25 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		if = {
			limit = { num_of_civilian_factories > 90 }
			add_to_variable = { treasury = 25 }
			add_to_variable = { debt = 25 }
			if = {
				limit = { check_variable = { treasury < -50 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		if = {
			limit = { num_of_civilian_factories > 180 }
			add_to_variable = { treasury = 70 }
			add_to_variable = { debt = 70 }
			if = {
				limit = { check_variable = { treasury < -90 } }
				set_temp_variable = { treasury_temp = treasury } #-5
				multiply_temp_variable = { treasury_temp = -1 }
				multiply_temp_variable = { treasury_temp = 1.25 } #25% increase to bring positive values back
				add_to_variable = { treasury = treasury_temp }
				add_to_variable = { debt = treasury_temp }
			}
		}
		calculate_interest_rate = yes
	}
}

update_state_variables = {
	set_variable = { var = population_total value = 0 }
	set_variable = { var = ROOT.office_park_total value = 0 }
	set_variable = { var = ROOT.industrial_complex_total value = 0 }
	set_variable = { var = ROOT.biofuel_refineries value = 0 }
	every_controlled_state = {
		add_to_variable = { PREV.office_park_total = building_level@offices }
		add_to_variable = { PREV.industrial_complex_total = building_level@industrial_complex }
		add_to_variable = { PREV.biofuel_refineries = building_level@synthetic_refinery }
		set_temp_variable = { var = temp_pop value = state_population_k }
		divide_temp_variable = { var = temp_pop value = 100 }
		add_to_variable = { PREV.population_total = temp_pop }
	}
	calculate_gdp = yes
}

#Calculate GDP/C
calculate_gdp = {
	set_variable = { var = gdp_total value = 0 }
	set_variable = { var = civil_fac value = num_of_civilian_factories }
	set_variable = { var = military_fac value = num_of_military_factories }
	set_variable = { var = dockyard_fac value = num_of_naval_factories }
	set_variable = { var = office_fac value = ROOT.office_park_total }
	set_variable = { var = biofuel_refineries value = ROOT.biofuel_refineries }

	set_temp_variable = { temp_resource_import = resource_imported@oil }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { civil_fac_lost = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@aluminium }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { civil_fac_lost = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@tungsten }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { civil_fac_lost = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@steel }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { civil_fac_lost = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@rubber }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { civil_fac_lost = temp_resource_import }

	set_temp_variable = { temp_resource_import = resource_imported@chromium }
	divide_temp_variable = { var = temp_resource_import value = 8 }
	add_to_temp_variable = { civil_fac_lost = temp_resource_import }
	add_to_variable = { civil_fac = civil_fac_lost }

	multiply_variable = { civil_fac = 500 }
	multiply_variable = { military_fac = 250 }
	multiply_variable = { dockyard_fac = 125 }
	multiply_variable = { office_fac = 650 }
	multiply_variable = { biofuel_refineries = 100 }

	add_to_variable = { gdp_total = civil_fac }
	add_to_variable = { gdp_total = military_fac }
	add_to_variable = { gdp_total = dockyard_fac }
	add_to_variable = { gdp_total = office_fac }
	add_to_variable = { gdp_total = biofuel_refineries }

	#Calculate GDP Percentages
	set_variable = { civil_fac_percent = civil_fac }
	set_variable = { military_fac_percent = military_fac }
	set_variable = { dockyard_fac_percent = dockyard_fac }
	set_variable = { office_fac_percent = office_fac }
	set_variable = { biofuel_refineries_percent = biofuel_refineries }

	divide_variable = { civil_fac_percent = gdp_total }
	divide_variable = { military_fac_percent = gdp_total }
	divide_variable = { dockyard_fac_percent = gdp_total }
	divide_variable = { office_fac_percent = gdp_total }
	divide_variable = { biofuel_refineries_percent = gdp_total }

	set_variable = { gdp_per_capita = gdp_total }
	divide_variable = { gdp_per_capita = population_total }
}