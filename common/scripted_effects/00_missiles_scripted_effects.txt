#################################
### missiles scripted effects ###
#################################
#
# ### missile trajectory arrays ###
# missile_launch_point_array
# missile_target_point_array
# missile_type_array
# missile_tech_array
# missile_warhead_array
# missile_salvo_array
# missile_duration_array
#
##################################


set_landbased_missile_defense_cap = {
	meta_effect = {
		text = {
			### boost phase defense ###
			every_controlled_state = {
				limit = {
					anti_air_building > 0
					[launch_point_ID] = {
						distance_to = {
							value < [SAM_range]
							target = PREV
						}
					}
				}
				set_temp_variable = { temp1 = 0 }	
				add_to_temp_variable = { temp1 = building_level@anti_air_building }
				multiply_temp_variable = { temp1 = PREV.var_SAM_launcher_tech }
				add_to_variable = { ROOT.var_intercept_capacity_boost_land = temp1 }
			}
			### midcourse phase defense ###
			every_controlled_state = {
				limit = {
					missile_defense_station > 0
					[launch_point_ID] = {
						distance_to = {
							value < [ABM_range]
							target = PREV
						}
					}	
				}
				set_temp_variable = { temp1 = 0 }	
				add_to_temp_variable = { temp1 = building_level@missile_defense_station }
				multiply_temp_variable = { temp1 = PREV.var_ABM_launcher_tech }
				add_to_variable = { ROOT.var_intercept_capacity_midcourse_land = temp1 }
				set_state_flag = defend_land_launch_point
			}
			every_controlled_state = {
				limit = {
					missile_defense_station > 0
					NOT = {
						has_state_flag = defend_land_launch_point
					}
					[target_point_ID] = {
						distance_to = {
							value < [ABM_range]
							target = PREV
						}
					}	
				}
				set_temp_variable = { temp1 = 0 }	
				add_to_temp_variable = { temp1 = building_level@missile_defense_station }
				multiply_temp_variable = { temp1 = PREV.var_ABM_launcher_tech }
				add_to_variable = { ROOT.var_intercept_capacity_midcourse_land = temp1 }
			}
			every_controlled_state = {
				clr_state_flag = defend_land_launch_point
			}
			### terminal phase defense ###
			every_controlled_state = {
				limit = {
					anti_air_building > 0
					[target_point_ID] = {
						distance_to = {
							value < [SAM_range]
							target = PREV
						}
					}	
				}
				set_temp_variable = { temp1 = 0 }	
				add_to_temp_variable = { temp1 = building_level@anti_air_building }
				multiply_temp_variable = { temp1 = PREV.var_SAM_launcher_tech }
				add_to_variable = { ROOT.var_intercept_capacity_terminal_land = temp1 }
			}
		}
		launch_point_ID = "[?missile_launch_point_array^i.GetID]" # "[?var_launch_point_ID.GetID]"
		target_point_ID = "[?missile_target_point_array^i.GetID]" # "[?var_target_point_ID.GetID]"
		SAM_range = "[?var_SAM_range]"
		ABM_range = "[?var_ABM_range]"
	}
}

set_seabased_missile_defense_cap = {
	meta_effect = {
		text = {
			if = {
			 	limit = {
			 		[launch_point_ID] = {
						has_state_flag = sea_launch_point
			 		}
				}
				set_variable = { var_ship_number_AA = 9 }
				while_loop_effect = {
					break = temp3
					limit = {
						check_variable = { var_ship_number_AA > 1 }
					}
					if = {
						limit = {
							THIS = { sea_launch_point_defense_[launch_point_ID] = yes }
						}
						set_temp_variable = { temp1 = 0 }
						set_temp_variable = { temp2 = 0 }
						### boost ###
						add_to_temp_variable = { temp1 = var_ship_number_AA } # num of ships
						add_to_temp_variable = { temp1 = 1 }
						multiply_temp_variable = { temp1 = var_ship_SAM_launcher_tech }
						add_to_variable = { PREV.var_intercept_capacity_boost_sea = temp1 }
						### midcourse ###
						add_to_temp_variable = { temp2 = var_ship_number_AA } # num of ships
						add_to_temp_variable = { temp2 = 1 }
	 					multiply_temp_variable = { temp2 = var_ship_ABM_launcher_tech }
						add_to_variable = { PREV.var_intercept_capacity_midcourse_sea = temp2 }
						###
						set_temp_variable = { temp3 = 1 }
						log = "set_seabased_missile_defense_cap launch_point [launch_point_ID]"
					}
					else = {
						add_to_variable = { PREV.var_intercept_capacity_boost_sea = 0 }
						add_to_variable = { PREV.var_intercept_capacity_midcourse_sea = 0 }
						log = "set_seabased_missile_defense_cap launch_point no ships"
					}
					subtract_from_variable = { var_ship_number_AA = 1 }
					log = "set_seabased_missile_defense_cap launch_point var_ship_number_AA [?var_ship_number_AA]"
				}
			}
			else = {
				add_to_variable = { PREV.var_intercept_capacity_boost_sea = 0 }
				add_to_variable = { PREV.var_intercept_capacity_midcourse_sea = 0 }
				log = "set_seabased_missile_defense_cap launch_point no sea_launch_point"
			}
			if = {
				limit = {
					[target_point_ID] = {
						has_state_flag = sea_launch_point
					}
				}
				set_variable = { var_ship_number_AA = 9 }
				while_loop_effect = {
					break = temp3
					limit = {
						check_variable = { var_ship_number_AA > 1 }
					}
					if = {
						limit = {
							THIS = { sea_launch_point_defense_[target_point_ID] = yes }
						}
						set_temp_variable = { temp1 = 0 }
						set_temp_variable = { temp2 = 0 }
						### midcourse ###
						add_to_temp_variable = { temp2 = var_ship_number_AA } # num of ships
						add_to_temp_variable = { temp2 = 1 }
	 					multiply_temp_variable = { temp2 = var_ship_ABM_launcher_tech }
						add_to_variable = { PREV.var_intercept_capacity_midcourse_sea = temp2 }
						### terminal ###
						add_to_temp_variable = { temp1 = var_ship_number_AA } # num of ships
						add_to_temp_variable = { temp1 = 1 }
						multiply_temp_variable = { temp1 = var_ship_SAM_launcher_tech }
						add_to_variable = { PREV.var_intercept_capacity_terminal_sea = temp1 }
						###
						set_temp_variable = { temp3 = 1 }
						log = "set_seabased_missile_defense_cap target_point"
					}
					else = {
						add_to_variable = { PREV.var_intercept_capacity_midcourse_sea = 0 }
						add_to_variable = { PREV.var_intercept_capacity_terminal_sea = 0 }
						log = "set_seabased_missile_defense_cap target_point no ships"
					}
					subtract_from_variable = { var_ship_number_AA = 1 }
					log = "set_seabased_missile_defense_cap target_point var_ship_number_AA [?var_ship_number_AA]"
				}
			}
			else = {
				add_to_variable = { PREV.var_intercept_capacity_midcourse_sea = 0 }
				add_to_variable = { PREV.var_intercept_capacity_terminal_sea = 0 }
				log = "set_seabased_missile_defense_cap target_point no sea_launch_point"
			}
			clear_variable = var_ship_number_AA
		}
		launch_point_ID = "[?PREV.missile_launch_point_array^i.GetID]" # "[?var_launch_point_ID.GetID]"
		target_point_ID = "[?PREV.missile_target_point_array^i.GetID]" # "[?var_target_point_ID.GetID]"
	}
}


### boost phase vs defense sea ###
boost_phase_defense_sea = {
	set_temp_variable = { temp1 = var_salvo }
	while_loop_effect = {
		limit = {
			check_variable = { temp1 > 0 }
		}
		randomize_variable = {  
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp1 = 1 }	
		if = {
			limit = {						
				check_variable = { var_intercept_capacity_boost_sea > 0 }
				check_variable = { PREV.var_deployed_SAM_MD_sea > 0 }
			}	
			subtract_from_variable = { var_intercept_capacity_boost_sea = 1 }
			subtract_from_variable = { PREV.var_deployed_SAM_MD_sea = 1 }
			add_to_variable = { SAM_consumption_sea = 1 }
			if = {
				limit = {	
					check_variable = { var_missile_trajectory < var_intercept_chance_boost_sea }
				}					
				add_to_variable = { var_missile_interception_boost_sea = 1 }
			}
			else = {
				add_to_variable = { var_missile_boost_completed_sea = 1 }
			}
		}	
		else = {
			add_to_variable = { var_missile_boost_completed_sea = 1 }
		}
	}
	add_to_array = { array = missile_boost_completed_sea_stat_array value = var_missile_boost_completed_sea index = i }
	add_to_array = { array = missile_interception_boost_sea_stat_array value = var_missile_interception_boost_sea index = i }
}

### boost phase vs defense land ###
boost_phase_defense_land = {
	set_temp_variable = { temp1 = var_missile_boost_completed_sea }
	while_loop_effect = {
		limit = {
			check_variable = { temp1 > 0 }
		}
		randomize_variable = {  
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp1 = 1 }	
		if = {
			limit = {						
				check_variable = { var_intercept_capacity_boost_land > 0 }
				check_variable = { PREV.var_deployed_SAM_MD_land > 0 }
			}	
			subtract_from_variable = { var_intercept_capacity_boost_land = 1 }
			subtract_from_variable = { PREV.var_deployed_SAM_MD_land = 1 }
			add_to_variable = { SAM_consumption_land = 1 }
			if = {
				limit = {	
					check_variable = { var_missile_trajectory < var_intercept_chance_boost_land }
				}					
				add_to_variable = { var_missile_interception_boost_land = 1 }
			}
			else = {
				add_to_variable = { var_missile_boost_completed_land = 1 }
			}
		}	
		else = {
			add_to_variable = { var_missile_boost_completed_land = 1 }
		}
	}
	add_to_array = { array = missile_boost_completed_land_stat_array value = var_missile_boost_completed_land index = i }
	add_to_array = { array = missile_interception_boost_land_stat_array value = var_missile_interception_boost_land index = i }
}

### midcourse phase vs defense sea ###
midcourse_phase_defense_sea = {
	set_temp_variable = { temp2 = var_missile_boost_completed_land }
	while_loop_effect = {
		limit = {
			check_variable = { temp2 > 0 }
		}
		randomize_variable = {  
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp2 = 1 }	
		if = {
			limit = {						
				check_variable = { var_intercept_capacity_midcourse_sea > 0 }
				check_variable = { PREV.var_deployed_ABM_sea > 0 }
			}	
			subtract_from_variable = { var_intercept_capacity_midcourse_sea = 1 }
			subtract_from_variable = { PREV.var_deployed_ABM_sea = 1 }
			add_to_variable = { ABM_consumption_sea = 1 }
			if = {
				limit = {	
					check_variable = { var_missile_trajectory < var_intercept_chance_midcourse_sea }
				}					
				add_to_variable = { var_missile_interception_midcourse_sea = 1 }
			}
			else = {
				add_to_variable = { var_missile_midcourse_completed_sea = 1 }
			}
		}	
		else = {
			add_to_variable = { var_missile_midcourse_completed_sea = 1 }
		}
	}
	add_to_array = { array = missile_midcourse_completed_sea_stat_array value = var_missile_midcourse_completed_sea index = i }
	add_to_array = { array = missile_interception_midcourse_sea_stat_array value = var_missile_interception_midcourse_sea index = i }
}

### midcourse phase vs defense land ###
midcourse_phase_defense_land = {
	set_temp_variable = { temp2 = var_missile_midcourse_completed_sea }
	while_loop_effect = {
		limit = {
			check_variable = { temp2 > 0 }
		}
		randomize_variable = {  
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp2 = 1 }	
		if = {
			limit = {						
				check_variable = { var_intercept_capacity_midcourse_land > 0 }
				check_variable = { PREV.var_deployed_ABM_land > 0 }
			}	
			subtract_from_variable = { var_intercept_capacity_midcourse_land = 1 }
			subtract_from_variable = { PREV.var_deployed_ABM_land = 1 }
			add_to_variable = { ABM_consumption_land = 1 }
			if = {
				limit = {	
					check_variable = { var_missile_trajectory < var_intercept_chance_midcourse_land }
				}					
				add_to_variable = { var_missile_interception_midcourse_land = 1 }
			}
			else = {
				add_to_variable = { var_missile_midcourse_completed_land = 1 }
			}
		}	
		else = {
			add_to_variable = { var_missile_midcourse_completed_land = 1 }
		}
	}
	add_to_array = { array = missile_midcourse_completed_land_stat_array value = var_missile_midcourse_completed_land index = i }
	add_to_array = { array = missile_interception_midcourse_land_stat_array value = var_missile_interception_midcourse_land index = i }
}

### terminal phase vs defense sea ###
terminal_phase_defense_sea = {
	set_temp_variable = { temp3 = var_missile_midcourse_completed_land }
	multiply_temp_variable = { temp3 = var_MIRV }
	set_temp_variable = { temp4 = var_missile_midcourse_completed_land }
	multiply_temp_variable = { temp4 = var_decoy }
	if = {
		limit = {
			OR = {
				check_variable = { temp4 > var_intercept_capacity_terminal_sea }
				check_variable = { temp4 > PREV.var_deployed_SAM_MD_sea }
			}
		}
		if = {
			limit = {
				check_variable = { PREV.var_deployed_SAM_MD_sea > var_intercept_capacity_terminal_sea }
			}
			subtract_from_variable = { PREV.var_deployed_SAM_MD_sea = var_intercept_capacity_terminal_sea }
			add_to_variable = { SAM_consumption_sea = var_intercept_capacity_terminal_sea }
			set_variable = { var_decoy_completed_sea = temp4 }
			subtract_from_variable = { var_decoy_completed_sea = var_intercept_capacity_terminal_sea }
			if = {
				limit = {
					check_variable = { var_decoy_completed_sea < 0 }
				}
				set_variable = { var_decoy_completed_sea = 0 }
			}
		}
		else = {
			add_to_variable = { SAM_consumption_sea = PREV.var_deployed_SAM_MD_sea }
			set_variable = { var_decoy_completed_sea = temp4 }
			subtract_from_variable = { var_decoy_completed_sea = PREV.var_deployed_SAM_MD_sea }
			if = {
				limit = {
					check_variable = { var_decoy_completed_sea < 0 }
				}
				set_variable = { var_decoy_completed_sea = 0 }
			}
			set_variable = { PREV.var_deployed_SAM_MD_sea = 0 }
		}
		set_variable = { var_intercept_capacity_terminal_sea = 0 }
	}
	else = {
		if = {
			limit = {
				check_variable = { PREV.var_deployed_SAM_MD_sea > var_intercept_capacity_terminal_sea }
			}
			set_variable = { var_decoy_completed_sea = temp4 }
			subtract_from_variable = { var_decoy_completed_sea = var_intercept_capacity_terminal_sea }
			if = {
				limit = {
					check_variable = { var_decoy_completed_sea < 0 }
				}
				set_variable = { var_decoy_completed_sea = 0 }
			}
		}
		else = {
			set_variable = { var_decoy_completed_sea = temp4 }
			subtract_from_variable = { var_decoy_completed_sea = PREV.var_deployed_SAM_MD_sea }
			if = {
				limit = {
					check_variable = { var_decoy_completed_sea < 0 }
				}
				set_variable = { var_decoy_completed_sea = 0 }
			}
		}
		subtract_from_variable = { var_intercept_capacity_terminal_sea = temp4 }
		subtract_from_variable = { PREV.var_deployed_SAM_MD_sea = temp4 }
		add_to_variable = { SAM_consumption_sea = temp4 }
	}
	while_loop_effect = {
		limit = {
			check_variable = { temp3 > 0 }
		}
		randomize_variable = {
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp3 = 1 }
		if = {
			limit = {
				check_variable = { var_intercept_capacity_terminal_sea > 0 }
				check_variable = { PREV.var_deployed_SAM_MD_sea > 0 }
			}
			subtract_from_variable = { var_intercept_capacity_terminal_sea = 1 }
			subtract_from_variable = { PREV.var_deployed_SAM_MD_sea = 1 }
			add_to_variable = { SAM_consumption_sea = 1 }
			if = {
				limit = {
					check_variable = { var_missile_trajectory < var_intercept_chance_terminal_sea }
				}
				add_to_variable = { var_missile_interception_terminal_sea = 1 }
			}
			else = {
				add_to_variable = { var_missile_terminal_completed_sea = 1 }
			}
		}
		else = {
			add_to_variable = { var_missile_terminal_completed_sea = 1 }
		}
	}
	add_to_array = { array = missile_terminal_completed_sea_stat_array value = var_missile_terminal_completed_sea index = i }
	add_to_array = { array = missile_interception_terminal_sea_stat_array value = var_missile_interception_terminal_sea index = i }
}

### terminal phase vs defense land ###
terminal_phase_defense_land = {
	set_temp_variable = { temp3 = var_missile_terminal_completed_sea }
	set_temp_variable = { temp4 = var_decoy_completed_sea }
	if = {
		limit = {
			OR = {
				check_variable = { temp4 > var_intercept_capacity_terminal_land }
				check_variable = { temp4 > PREV.var_deployed_SAM_MD_land }
			}
		}
		if = {
			limit = {
				check_variable = { PREV.var_deployed_SAM_MD_land > var_intercept_capacity_terminal_land }
			}
			subtract_from_variable = { PREV.var_deployed_SAM_MD_land = var_intercept_capacity_terminal_land }
			add_to_variable = { SAM_consumption_land = var_intercept_capacity_terminal_land }
		}
		else = {
			add_to_variable = { SAM_consumption_land = PREV.var_deployed_SAM_MD_land }
			set_variable = { PREV.var_deployed_SAM_MD_land = 0 }
		}
		set_variable = { var_intercept_capacity_terminal_land = 0 }
	}
	else = {
		subtract_from_variable = { var_intercept_capacity_terminal_land = temp4 }
		subtract_from_variable = { PREV.var_deployed_SAM_MD_land = temp4 }
		add_to_variable = { SAM_consumption_land = temp4 }
	}
	while_loop_effect = {
		limit = {
			check_variable = { temp3 > 0 }
		}
		randomize_variable = {
			var = var_missile_trajectory
			distribution = uniform
			min = 0
			max = 1
		}
		subtract_from_temp_variable = { temp3 = 1 }
		if = {
			limit = {
				check_variable = { var_intercept_capacity_terminal_land > 0 }
				check_variable = { PREV.var_deployed_SAM_MD_land > 0 }
			}
			subtract_from_variable = { var_intercept_capacity_terminal_land = 1 }
			subtract_from_variable = { PREV.var_deployed_SAM_MD_land = 1 }
			add_to_variable = { SAM_consumption_land = 1 }
			if = {
				limit = {
					check_variable = { var_missile_trajectory < var_intercept_chance_terminal_land }
				}
				add_to_variable = { var_missile_interception_terminal_land = 1 }
			}
			else = {
				add_to_variable = { var_missile_trajectory = var_accuracy }
				if = {
					limit = { check_variable = { var_missile_trajectory > 1 } }
					add_to_variable = { var_missile_target_hit = 1 }
				}
				else = {
					add_to_variable = { var_missile_target_miss = 1 }
				}
			}
		}
		else = {
			add_to_variable = { var_missile_trajectory = var_accuracy }
			if = {
				limit = { check_variable = { var_missile_trajectory > 1 } }
				add_to_variable = { var_missile_target_hit = 1 }
			}
			else = {
				add_to_variable = { var_missile_target_miss = 1 }
			}
		}
	}
	add_to_array = { array = missile_interception_terminal_land_stat_array value = var_missile_interception_terminal_land index = i }
	add_to_array = { array = missile_target_miss_stat_array value = var_missile_target_miss index = i }
	add_to_array = { array = missile_target_hit_stat_array value = var_missile_target_hit index = i }
}

clear_defense_vars = {
	clear_variable = var_missile_boost_completed_sea
	clear_variable = var_missile_boost_completed_land
	clear_variable = var_missile_interception_boost_sea
	clear_variable = var_missile_interception_boost_land
	#
	clear_variable = var_missile_midcourse_completed_sea
	clear_variable = var_missile_midcourse_completed_land
	clear_variable = var_missile_interception_midcourse_sea
	clear_variable = var_missile_interception_midcourse_land
	#
	clear_variable = var_missile_terminal_completed_sea
	clear_variable = var_decoy_completed_sea
	clear_variable = var_missile_interception_terminal_sea
	clear_variable = var_missile_interception_terminal_land
	clear_variable = var_missile_target_miss
	clear_variable = var_missile_target_hit
}

#################################################
### effects for gui / buttons / trigger / loc ###
#################################################

### production gui ###

### ICBM
calculate_production_vars_1 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_1_amount < 1 }
		}
		set_variable = { var_gui_prod_1_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_1_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_1_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_1_price_total = var_gui_prod_1_price_unit }
	multiply_variable = { var_gui_prod_1_price_total = var_gui_prod_1_amount }
	#days
	set_variable = { var_gui_prod_1_CIC_total = var_gui_prod_1_CIC_unit }
	multiply_variable = { var_gui_prod_1_CIC_total = var_gui_prod_1_amount }
	set_variable = { var_gui_prod_1_CIC_days = var_gui_prod_1_CIC_total }
	multiply_variable = { var_gui_prod_1_CIC_days = var_gui_prod_1_days_unit }
	divide_variable = { var_gui_prod_1_CIC_days = var_gui_prod_1_CIC_use }
	round_variable = var_gui_prod_1_CIC_days
}
### IRBM
calculate_production_vars_2 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_2_amount < 1 }
		}
		set_variable = { var_gui_prod_2_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_2_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_2_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_2_price_total = var_gui_prod_2_price_unit }
	multiply_variable = { var_gui_prod_2_price_total = var_gui_prod_2_amount }
	#days
	set_variable = { var_gui_prod_2_CIC_total = var_gui_prod_2_CIC_unit }
	multiply_variable = { var_gui_prod_2_CIC_total = var_gui_prod_2_amount }
	set_variable = { var_gui_prod_2_CIC_days = var_gui_prod_2_CIC_total }
	multiply_variable = { var_gui_prod_2_CIC_days = var_gui_prod_2_days_unit }
	divide_variable = { var_gui_prod_2_CIC_days = var_gui_prod_2_CIC_use }
	round_variable = var_gui_prod_2_CIC_days
}
### SLBM
calculate_production_vars_3 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_3_amount < 1 }
		}
		set_variable = { var_gui_prod_3_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_3_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_3_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_3_price_total = var_gui_prod_3_price_unit }
	multiply_variable = { var_gui_prod_3_price_total = var_gui_prod_3_amount }
	#days
	set_variable = { var_gui_prod_3_CIC_total = var_gui_prod_3_CIC_unit }
	multiply_variable = { var_gui_prod_3_CIC_total = var_gui_prod_3_amount }
	set_variable = { var_gui_prod_3_CIC_days = var_gui_prod_3_CIC_total }
	multiply_variable = { var_gui_prod_3_CIC_days = var_gui_prod_3_days_unit }
	divide_variable = { var_gui_prod_3_CIC_days = var_gui_prod_3_CIC_use }
	round_variable = var_gui_prod_3_CIC_days
}
### ALCM
calculate_production_vars_4 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_4_amount < 1 }
		}
		set_variable = { var_gui_prod_4_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_4_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_4_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_4_price_total = var_gui_prod_4_price_unit }
	multiply_variable = { var_gui_prod_4_price_total = var_gui_prod_4_amount }
	#days
	set_variable = { var_gui_prod_4_CIC_total = var_gui_prod_4_CIC_unit }
	multiply_variable = { var_gui_prod_4_CIC_total = var_gui_prod_4_amount }
	set_variable = { var_gui_prod_4_CIC_days = var_gui_prod_4_CIC_total }
	multiply_variable = { var_gui_prod_4_CIC_days = var_gui_prod_4_days_unit }
	divide_variable = { var_gui_prod_4_CIC_days = var_gui_prod_4_CIC_use }
	round_variable = var_gui_prod_4_CIC_days
}
### GLCM
calculate_production_vars_5 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_5_amount < 1 }
		}
		set_variable = { var_gui_prod_5_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_5_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_5_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_5_price_total = var_gui_prod_5_price_unit }
	multiply_variable = { var_gui_prod_5_price_total = var_gui_prod_5_amount }
	#days
	set_variable = { var_gui_prod_5_CIC_total = var_gui_prod_5_CIC_unit }
	multiply_variable = { var_gui_prod_5_CIC_total = var_gui_prod_5_amount }
	set_variable = { var_gui_prod_5_CIC_days = var_gui_prod_5_CIC_total }
	multiply_variable = { var_gui_prod_5_CIC_days = var_gui_prod_5_days_unit }
	divide_variable = { var_gui_prod_5_CIC_days = var_gui_prod_5_CIC_use }
	round_variable = var_gui_prod_5_CIC_days
}
### SLCM
calculate_production_vars_6 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_6_amount < 1 }
		}
		set_variable = { var_gui_prod_6_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_6_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_6_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_6_price_total = var_gui_prod_6_price_unit }
	multiply_variable = { var_gui_prod_6_price_total = var_gui_prod_6_amount }
	#days
	set_variable = { var_gui_prod_6_CIC_total = var_gui_prod_6_CIC_unit }
	multiply_variable = { var_gui_prod_6_CIC_total = var_gui_prod_6_amount }
	set_variable = { var_gui_prod_6_CIC_days = var_gui_prod_6_CIC_total }
	multiply_variable = { var_gui_prod_6_CIC_days = var_gui_prod_6_days_unit }
	divide_variable = { var_gui_prod_6_CIC_days = var_gui_prod_6_CIC_use }
	round_variable = var_gui_prod_6_CIC_days
}
### HSCM
calculate_production_vars_7 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_7_amount < 1 }
		}
		set_variable = { var_gui_prod_7_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_7_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_7_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_7_price_total = var_gui_prod_7_price_unit }
	multiply_variable = { var_gui_prod_7_price_total = var_gui_prod_7_amount }
	#days
	set_variable = { var_gui_prod_7_CIC_total = var_gui_prod_7_CIC_unit }
	multiply_variable = { var_gui_prod_7_CIC_total = var_gui_prod_7_amount }
	set_variable = { var_gui_prod_7_CIC_days = var_gui_prod_7_CIC_total }
	multiply_variable = { var_gui_prod_7_CIC_days = var_gui_prod_7_days_unit }
	divide_variable = { var_gui_prod_7_CIC_days = var_gui_prod_7_CIC_use }
	round_variable = var_gui_prod_7_CIC_days
}
### SAM
calculate_production_vars_8 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_8_amount < 1 }
		}
		set_variable = { var_gui_prod_8_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_8_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_8_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_8_price_total = var_gui_prod_8_price_unit }
	multiply_variable = { var_gui_prod_8_price_total = var_gui_prod_8_amount }
	#days
	set_variable = { var_gui_prod_8_CIC_total = var_gui_prod_8_CIC_unit }
	multiply_variable = { var_gui_prod_8_CIC_total = var_gui_prod_8_amount }
	set_variable = { var_gui_prod_8_CIC_days = var_gui_prod_8_CIC_total }
	multiply_variable = { var_gui_prod_8_CIC_days = var_gui_prod_8_days_unit }
	divide_variable = { var_gui_prod_8_CIC_days = var_gui_prod_8_CIC_use }
	round_variable = var_gui_prod_8_CIC_days
}
### ABM
calculate_production_vars_9 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_9_amount < 1 }
		}
		set_variable = { var_gui_prod_9_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_9_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_9_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_9_price_total = var_gui_prod_9_price_unit }
	multiply_variable = { var_gui_prod_9_price_total = var_gui_prod_9_amount }
	#days
	set_variable = { var_gui_prod_9_CIC_total = var_gui_prod_9_CIC_unit }
	multiply_variable = { var_gui_prod_9_CIC_total = var_gui_prod_9_amount }
	set_variable = { var_gui_prod_9_CIC_days = var_gui_prod_9_CIC_total }
	multiply_variable = { var_gui_prod_9_CIC_days = var_gui_prod_9_days_unit }
	divide_variable = { var_gui_prod_9_CIC_days = var_gui_prod_9_CIC_use }
	round_variable = var_gui_prod_9_CIC_days
}
### OLV
calculate_production_vars_10 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_10_amount < 1 }
		}
		set_variable = { var_gui_prod_10_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_10_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_10_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_10_price_total = var_gui_prod_10_price_unit }
	multiply_variable = { var_gui_prod_10_price_total = var_gui_prod_10_amount }
	#days
	set_variable = { var_gui_prod_10_CIC_total = var_gui_prod_10_CIC_unit }
	multiply_variable = { var_gui_prod_10_CIC_total = var_gui_prod_10_amount }
	set_variable = { var_gui_prod_10_CIC_days = var_gui_prod_10_CIC_total }
	multiply_variable = { var_gui_prod_10_CIC_days = var_gui_prod_10_days_unit }
	divide_variable = { var_gui_prod_10_CIC_days = var_gui_prod_10_CIC_use }
	round_variable = var_gui_prod_10_CIC_days
}
### GNSS
calculate_production_vars_11 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_11_amount < 1 }
		}
		set_variable = { var_gui_prod_11_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_11_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_11_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_11_price_total = var_gui_prod_11_price_unit }
	multiply_variable = { var_gui_prod_11_price_total = var_gui_prod_11_amount }
	#days
	set_variable = { var_gui_prod_11_CIC_total = var_gui_prod_11_CIC_unit }
	multiply_variable = { var_gui_prod_11_CIC_total = var_gui_prod_11_amount }
	set_variable = { var_gui_prod_11_CIC_days = var_gui_prod_11_CIC_total }
	multiply_variable = { var_gui_prod_11_CIC_days = var_gui_prod_11_days_unit }
	divide_variable = { var_gui_prod_11_CIC_days = var_gui_prod_11_CIC_use }
	round_variable = var_gui_prod_11_CIC_days
}
### COMSAT
calculate_production_vars_12 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_12_amount < 1 }
		}
		set_variable = { var_gui_prod_12_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_12_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_12_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_12_price_total = var_gui_prod_12_price_unit }
	multiply_variable = { var_gui_prod_12_price_total = var_gui_prod_12_amount }
	#days
	set_variable = { var_gui_prod_12_CIC_total = var_gui_prod_12_CIC_unit }
	multiply_variable = { var_gui_prod_12_CIC_total = var_gui_prod_12_amount }
	set_variable = { var_gui_prod_12_CIC_days = var_gui_prod_12_CIC_total }
	multiply_variable = { var_gui_prod_12_CIC_days = var_gui_prod_12_days_unit }
	divide_variable = { var_gui_prod_12_CIC_days = var_gui_prod_12_CIC_use }
	round_variable = var_gui_prod_12_CIC_days
}
### SPYSAT
calculate_production_vars_13 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_13_amount < 1 }
		}
		set_variable = { var_gui_prod_13_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_13_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_13_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_13_price_total = var_gui_prod_13_price_unit }
	multiply_variable = { var_gui_prod_13_price_total = var_gui_prod_13_amount }
	#days
	set_variable = { var_gui_prod_13_CIC_total = var_gui_prod_13_CIC_unit }
	multiply_variable = { var_gui_prod_13_CIC_total = var_gui_prod_13_amount }
	set_variable = { var_gui_prod_13_CIC_days = var_gui_prod_13_CIC_total }
	multiply_variable = { var_gui_prod_13_CIC_days = var_gui_prod_13_days_unit }
	divide_variable = { var_gui_prod_13_CIC_days = var_gui_prod_13_CIC_use }
	round_variable = var_gui_prod_13_CIC_days
}
### KILLSAT
calculate_production_vars_14 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_14_amount < 1 }
		}
		set_variable = { var_gui_prod_14_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_14_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_14_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_14_price_total = var_gui_prod_14_price_unit }
	multiply_variable = { var_gui_prod_14_price_total = var_gui_prod_14_amount }
	#days
	set_variable = { var_gui_prod_14_CIC_total = var_gui_prod_14_CIC_unit }
	multiply_variable = { var_gui_prod_14_CIC_total = var_gui_prod_14_amount }
	set_variable = { var_gui_prod_14_CIC_days = var_gui_prod_14_CIC_total }
	multiply_variable = { var_gui_prod_14_CIC_days = var_gui_prod_14_days_unit }
	divide_variable = { var_gui_prod_14_CIC_days = var_gui_prod_14_CIC_use }
	round_variable = var_gui_prod_14_CIC_days
}
### Rods
calculate_production_vars_15 = {
	# amount & CIC use not negative
	if = {
		limit = {
			check_variable = { var_gui_prod_15_amount < 1 }
		}
		set_variable = { var_gui_prod_15_amount = 1 }
	}
	if = {
		limit = {
			check_variable = { var_gui_prod_15_CIC_use < 1 }
		}
		set_variable = { var_gui_prod_15_CIC_use = 1 }
	}
	#price
	set_variable = { var_gui_prod_15_price_total = var_gui_prod_15_price_unit }
	multiply_variable = { var_gui_prod_15_price_total = var_gui_prod_15_amount }
	#days
	set_variable = { var_gui_prod_15_CIC_total = var_gui_prod_15_CIC_unit }
	multiply_variable = { var_gui_prod_15_CIC_total = var_gui_prod_15_amount }
	set_variable = { var_gui_prod_15_CIC_days = var_gui_prod_15_CIC_total }
	multiply_variable = { var_gui_prod_15_CIC_days = var_gui_prod_15_days_unit }
	divide_variable = { var_gui_prod_15_CIC_days = var_gui_prod_15_CIC_use }
	round_variable = var_gui_prod_15_CIC_days
}


### launch gui ###

set_missile_model_gui = {
	meta_effect = {
		text = {
			set_missile_model_[missile_type] = yes
		}
		missile_type = "[?missile_type_tech_array^i]"
	}
}


set_missile_model = {
	meta_effect = {
		text = {
			set_missile_model_[missile_type] = yes
		}
		missile_type = "[?missile_type_array^i]"
	}
}

set_warhead_gui = {
	meta_effect = {
		text = {
			set_warhead_tech_[warhead] = yes
		}
		warhead = "[?warhead_tech_array^i]"
	}
}

set_warhead = {
	meta_effect = {
		text = {
			set_warhead_[warhead] = yes
		}
		warhead = "[?missile_warhead_array^i]"
	}
}

set_launch_button_number_vars = {
	if = {
		limit = {
			OR = {
				has_selected_SLCM = yes
				has_selected_HSCM = yes
			}
		}
		set_ship_number_LAM = yes
	}
	if = {
		limit = {
			OR = {
				has_selected_SLBM = yes
				has_selected_SLCM = yes
				has_selected_HSCM = yes
			}
		}
		set_sub_number_LAM = yes
	}
	if = {
		limit = {
			OR = {
				has_selected_ALCM = yes
				has_selected_HSCM = yes
			}
		}
		set_bomber_number_ALCM = yes
		set_STK_number_ALCM = yes
		set_MR_number_ALCM = yes
		set_MR_CV_number_ALCM = yes
		set_variable = { var_CV_number_LAM = 0 }
	}
}



set_ship_number_LAM = {
	###
	#log = "set_ship_number_LAM start var_ship_number_LAM = [?var_ship_number_LAM] var_gui_salvo = [?var_gui_salvo]"
	###
	if = {
		limit = {
	 		check_variable = { var_ship_VLS_launcher > var_ship_launcher }
		}
		set_variable = { var_ship_number_LAM = 0 }
		set_variable = { var_ship_number_LAM_loc = 0 }
		set_temp_variable = { temp1_ship_number_LAM = 0 }
		while_loop_effect = {
			limit = {
				check_variable = { var_gui_salvo > temp1_ship_number_LAM }
			}
			add_to_variable = { var_ship_number_LAM = 1 }
			add_to_variable = { var_ship_number_LAM_loc = 1 }
			set_temp_variable = { temp1_ship_number_LAM = var_ship_number_LAM }
			multiply_temp_variable = { temp1_ship_number_LAM = var_ship_VLS_launcher }
		}
		subtract_from_variable = { var_ship_number_LAM = 1 }
	}
	else = {
		set_variable = { var_ship_number_LAM = 0 }
		set_variable = { var_ship_number_LAM_loc = 0 }
		set_temp_variable = { temp1_ship_number_LAM = 0 }
		while_loop_effect = {
			limit = {
				check_variable = { var_gui_salvo > temp1_ship_number_LAM }
			}
			add_to_variable = { var_ship_number_LAM = 1 }
			add_to_variable = { var_ship_number_LAM_loc = 1 }
			set_temp_variable = { temp1_ship_number_LAM = var_ship_number_LAM }
			multiply_temp_variable = { temp1_ship_number_LAM = var_ship_launcher }
		}
		subtract_from_variable = { var_ship_number_LAM = 1 }
	}
	###
	#log = "set_ship_number_LAM stop var_ship_number_LAM = [?var_ship_number_LAM] var_gui_salvo = [?var_gui_salvo]"
	###
}

set_sub_number_LAM = {
	###
	log = "var_sub_number_LAM start var_sub_number_LAM = [?var_sub_number_LAM] var_gui_salvo = [?var_gui_salvo]"
	###
	set_variable = { var_sub_number_LAM = 0 }
	set_variable = { var_sub_number_LAM_loc = 0 }
	set_temp_variable = { temp1_sub_number_LAM = 0 }
	while_loop_effect = {
		limit = {
			check_variable = { var_gui_salvo > temp1_sub_number_LAM }
		}
		add_to_variable = { var_sub_number_LAM = 1 }
		add_to_variable = { var_sub_number_LAM_loc = 1 }
		set_temp_variable = { temp1_sub_number_LAM = var_sub_number_LAM }
		multiply_temp_variable = { temp1_sub_number_LAM = var_sub_launcher }
	}
	subtract_from_variable = { var_sub_number_LAM = 1 }
	###
	log = "var_sub_number_LAM stop var_sub_number_LAM = [?var_sub_number_LAM] var_gui_salvo = [?var_gui_salvo] var_sub_launcher = [?var_sub_launcher]"
	###
}

set_bomber_number_ALCM = {
	set_variable = { var_bomber_number_ALCM = 0 }
	set_temp_variable = { temp1_bomber_number_ALCM = 0 }
	while_loop_effect = {
		limit = {
			check_variable = { var_gui_salvo > temp1_bomber_number_ALCM }
		}
		add_to_variable = { var_bomber_number_ALCM = 1 }
		set_temp_variable = { temp1_bomber_number_ALCM = var_bomber_number_ALCM }
		multiply_temp_variable = { temp1_bomber_number_ALCM = var_bomber_launcher }
	}
	set_variable = { var_bomber_number_ALCM_loc = var_bomber_number_ALCM }
	if = {
		limit = {
			check_variable = { var_bomber_number_ALCM > 0 }
		}
		subtract_from_variable = { var_bomber_number_ALCM = 1 }
	}
}

set_STK_number_ALCM = {
	set_variable = { var_STK_number_ALCM = 0 }
	set_temp_variable = { temp1_STK_number_ALCM = 0 }
	while_loop_effect = {
		limit = {
			check_variable = { var_gui_salvo > temp1_STK_number_ALCM }
		}
		add_to_variable = { var_STK_number_ALCM = 1 }
		set_temp_variable = { temp1_STK_number_ALCM = var_STK_number_ALCM }
		multiply_temp_variable = { temp1_STK_number_ALCM = var_STK_launcher }
	}
	set_variable = { var_STK_number_ALCM_loc = var_STK_number_ALCM }
	if = {
		limit = {
			check_variable = { var_STK_number_ALCM > 0 }
		}
		subtract_from_variable = { var_STK_number_ALCM = 1 }
	}
}

set_MR_number_ALCM = {
	set_variable = { var_MR_number_ALCM = 0 }
	set_temp_variable = { temp1_MR_number_ALCM = 0 }
	while_loop_effect = {
		limit = {
			check_variable = { var_gui_salvo > temp1_MR_number_ALCM }
		}
		add_to_variable = { var_MR_number_ALCM = 1 }
		set_temp_variable = { temp1_MR_number_ALCM = var_MR_number_ALCM }
		multiply_temp_variable = { temp1_MR_number_ALCM = var_MR_launcher }
	}
	set_variable = { var_MR_number_ALCM_loc = var_MR_number_ALCM }
	if = {
		limit = {
			check_variable = { var_MR_number_ALCM > 0 }
		}
		subtract_from_variable = { var_MR_number_ALCM = 1 }
	}
}

set_MR_CV_number_ALCM = {
	set_variable = { var_MR_CV_number_ALCM = 0 }
	set_temp_variable = { temp1_MR_CV_number_ALCM = 0 }
	while_loop_effect = {
		limit = {
			check_variable = { var_gui_salvo > temp1_MR_CV_number_ALCM }
		}
		add_to_variable = { var_MR_CV_number_ALCM = 1 }
		set_temp_variable = { temp1_MR_CV_number_ALCM = var_MR_CV_number_ALCM }
		multiply_temp_variable = { temp1_MR_CV_number_ALCM = var_MR_CV_launcher }
	}
	set_variable = { var_MR_CV_number_ALCM_loc = var_MR_CV_number_ALCM }
	if = {
		limit = {
			check_variable = { var_MR_CV_number_ALCM > 0 }
		}
		subtract_from_variable = { var_MR_CV_number_ALCM = 1 }
	}
}

clear_launch_button_loc_vars = {
	ROOT = {
		clear_variable = var_ship_number_LAM_loc
		clear_variable = var_sub_number_LAM_loc
		clear_variable = var_bomber_number_ALCM_loc
		clear_variable = var_STK_number_ALCM_loc
		clear_variable = var_MR_number_ALCM_loc
		clear_variable = var_MR_CV_number_ALCM_loc
	}
}

clear_launch_button_number_vars = {
	ROOT = {
		clear_variable = var_ship_number_LAM
		clear_variable = var_sub_number_LAM
		clear_variable = var_bomber_number_ALCM
		clear_variable = var_STK_number_ALCM
		clear_variable = var_MR_number_ALCM
		clear_variable = var_MR_CV_number_ALCM
		clear_variable = var_CV_number_LAM
		#launcher
		clear_variable = var_silo_launcher
		clear_variable = var_TEL_launcher
		clear_variable = var_sub_launcher
		clear_variable = var_bomber_launcher
		clear_variable = var_MR_launcher
		clear_variable = var_MR_CV_launcher
		clear_variable = var_STK_launcher
		clear_variable = var_ship_launcher
		clear_variable = var_ship_VLS_launcher
	}
}

### testing bugfixing ###
clear_gui_salvo_duration_vars = {
	ROOT = {
		clear_variable = var_gui_salvo
		clear_variable = var_gui_duration
		clear_variable = var_total_firing
	}
}


### add new buildings here
set_warhead_targets = {
	log = "log set_warhead_targets [?var_missile_trajectory_ID]"
	#if = {
	#	limit = {
	#		NOT = { has_country_flag = warhead_targets@var_missile_trajectory_ID }
	#	}
	#	set_country_flag = warhead_targets@var_missile_trajectory_ID
		add_to_array = { array = target_building_1_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_2_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_3_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_4_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_5_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_6_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_7_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_8_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_9_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_10_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_11_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_12_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_13_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_14_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_15_array value = 1 index = var_missile_trajectory_ID }
		add_to_array = { array = target_building_16_array value = 1 index = var_missile_trajectory_ID }
	#}
}

### add new buildings here
set_missile_damage_stats = {
	add_to_array = { array = damage_building_1_stat_array value = var_damage_building_1 index = i }
	add_to_array = { array = damage_building_2_stat_array value = var_damage_building_2 index = i }
	add_to_array = { array = damage_building_3_stat_array value = var_damage_building_3 index = i }
	add_to_array = { array = damage_building_4_stat_array value = var_damage_building_4 index = i }
	add_to_array = { array = damage_building_5_stat_array value = var_damage_building_5 index = i }
	add_to_array = { array = damage_building_6_stat_array value = var_damage_building_6 index = i }
	add_to_array = { array = damage_building_7_stat_array value = var_damage_building_7 index = i }
	add_to_array = { array = damage_building_8_stat_array value = var_damage_building_8 index = i }
	add_to_array = { array = damage_building_9_stat_array value = var_damage_building_9 index = i }
	add_to_array = { array = damage_building_10_stat_array value = var_damage_building_10 index = i }
	add_to_array = { array = damage_building_11_stat_array value = var_damage_building_11 index = i }
	add_to_array = { array = damage_building_12_stat_array value = var_damage_building_12 index = i }
	add_to_array = { array = damage_building_13_stat_array value = var_damage_building_13 index = i }
	add_to_array = { array = damage_building_14_stat_array value = var_damage_building_14 index = i }
	add_to_array = { array = damage_building_15_stat_array value = var_damage_building_15 index = i }
	add_to_array = { array = damage_building_16_stat_array value = var_damage_building_16 index = i }
}


set_missile_damage = {
	set_temp_variable = { temp1 = missile_target_hit_stat_array^i } # var_missile_target_hit 
	while_loop_effect = {
		limit = {
			check_variable = { temp1 > 0 }
		}
		subtract_from_temp_variable = { temp1 = 1 }
		set_temp_variable = { temp2 = var_warhead_damage }
		### add new buildings here
		random_list = {
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@industrial_complex > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = industrial_complex
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_1 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_1_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@arms_factory > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = arms_factory
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_2 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_2_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@infrastructure > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = infrastructure
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_3 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_3_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@dockyard > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = dockyard
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_4 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_4_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@air_base > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = air_base
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_5 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_5_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@naval_base > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = naval_base
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_6 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_6_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@bunker > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = bunker
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_7 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_7_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@coastal_bunker > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = coastal_bunker
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_8 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_8_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@anti_air_building > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = anti_air_building
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_9 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_9_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@synthetic_refinery > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = synthetic_refinery
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_10 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_10_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@internet_station > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = internet_station
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_11 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_11_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@missile_silo > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = missile_silo
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_12 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_12_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@nuclear_reactor > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = nuclear_reactor
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_13 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_13_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@fuel_silo > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = fuel_silo
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_14 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_14_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@radar_station > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = radar_station
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_15 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_15_array^i = 1 } }
				}
			}
			1 = {
				while_loop_effect = {
					limit = {
						check_variable = { temp2 > 0 }
					}
					subtract_from_temp_variable = { temp2 = 1 }
					meta_effect = {
						text = {
							if = {
								limit = {
									check_variable = { [target_point_ID].non_damaged_building_level@missile_defense_station > 0 }
								}
								[target_point_ID] = {
									damage_building = {
										type = missile_defense_station
										damage = 1
									}
								}
								add_to_variable = { var_damage_building_16 = 1 }
							}
						}
						target_point_ID = "[?missile_target_point_array^i.GetID]"
					}
				}
				modifier = {
					factor = 0
					NOT = { check_variable = { target_building_16_array^i = 1 } }
				}
			}
		}
	}
	set_missile_damage_stats = yes
	clear_variable = var_damage_building_1
	clear_variable = var_damage_building_2
	clear_variable = var_damage_building_3
	clear_variable = var_damage_building_4
	clear_variable = var_damage_building_5
	clear_variable = var_damage_building_6
	clear_variable = var_damage_building_7
	clear_variable = var_damage_building_8
	clear_variable = var_damage_building_9
	clear_variable = var_damage_building_10
	clear_variable = var_damage_building_11
	clear_variable = var_damage_building_12
	clear_variable = var_damage_building_13
	clear_variable = var_damage_building_14
	clear_variable = var_damage_building_15
	clear_variable = var_damage_building_16
}

set_missile_warhead_effects = {
	meta_effect = {
		text = {
			set_temp_variable = { temp1 = missile_target_hit_stat_array^i } # var_missile_target_hit 
			while_loop_effect = {
				limit = {
					check_variable = { temp1 > 0 }
				}
				subtract_from_temp_variable = { temp1 = 1 }
				if = {
					limit = {
						check_variable = { missile_warhead_array^i = 2 }
					}
					launch_nuke = {
						state = [target_point_ID]
						controller = [target_TAG]
					}
				}
			}
		}
		target_point_ID = "[?missile_target_point_array^i.GetID]"
		target_TAG = "[?missile_target_controller_array.GetID]"
	}
}

###########################
### missile defense gui ###
###########################

calculate_NSAM_AD_gui_vars = {
	if = {
		limit = {
			check_variable = { var_NSAM_AD_deployed < 0 }
		}
		set_variable = { var_NSAM_AD_deployed = 0 }
	}
	set_variable = { var_NSAM_AD_deploy_ratio = 0 }
	### add all aa ships
	set_variable = { var_AD_ships = 0 }
	add_to_variable = { var_AD_ships = num_ships_with_type@cruiser_mtg }
	add_to_variable = { var_AD_ships = num_ships_with_type@stealth_destroyer_mtg }
	add_to_variable = { var_AD_ships = num_ships_with_type@frigate_mtg }
	##
	set_variable = { var_ship_SAM_launcher_tech = 4 }
	##
	set_variable = { var_NSAM_AD_launchers = var_ship_SAM_launcher_tech }
	multiply_variable = { var_NSAM_AD_launchers = var_AD_ships }
	set_variable = { var_NSAM_AD_deploy_ratio = var_NSAM_AD_deployed }
	divide_variable = { var_NSAM_AD_deploy_ratio = var_NSAM_AD_launchers }
	set_variable = { var_fleet_air_defense_system = -0.5 }
	add_to_variable = { var_fleet_air_defense_system = var_NSAM_AD_deploy_ratio }
	#set_variable = { var_NSAM_AD_damage = 2 }
	#-0.5
}

calculate_SAM_AD_gui_vars = {
	if = {
		limit = {
			check_variable = { var_SAM_AD_deployed < 0 }
		}
		set_variable = { var_SAM_AD_deployed = 0 }
	}
	set_variable = { var_SAM_AD_deploy_ratio = 0 }
	set_variable = { var_AD_batteries = 0 }
	every_controlled_state = {
		limit = {
			anti_air_building > 0
		}
		add_to_variable = { ROOT.var_AD_batteries = building_level@anti_air_building }
	}
	##
	#set_variable = { var_SAM_launcher_tech = 4 }
	##
	set_variable = { var_SAM_AD_launcher_total = var_SAM_AD_launcher_tech }
	multiply_variable = { var_SAM_AD_launcher_total = var_AD_batteries }
	set_variable = { var_SAM_AD_deploy_ratio = var_SAM_AD_deployed }
	divide_variable = { var_SAM_AD_deploy_ratio = var_SAM_AD_launcher_total }
	if = {
		limit = {
			check_variable = { var_SAM_AD_deploy_ratio < 0 }
		}
		set_variable = { var_SAM_AD_deploy_ratio = 0 }
	}
	#set_variable = { var_SAM_AD_damage = 2 }
	multiply_variable = { var_SAM_AD_damage = var_SAM_AD_deploy_ratio }
	#set_variable = { var_SAM_intercept_chance_total = 0.9 }
	multiply_variable = { var_SAM_AD_intercept_chance_total = var_SAM_AD_deploy_ratio }
}

calculate_SAM_MD_sea_gui_vars = {
	if = {
		limit = {
			check_variable = { var_deployed_SAM_MD_sea < 0 }
		}
		set_variable = { var_deployed_SAM_MD_sea = 0 }
	}
}

calculate_SAM_MD_land_gui_vars = {
	if = {
		limit = {
			check_variable = { var_deployed_SAM_MD_land < 0 }
		}
		set_variable = { var_deployed_SAM_MD_land = 0 }
	}
}

calculate_ABM_sea_gui_vars = {
	if = {
		limit = {
			check_variable = { var_deployed_ABM_sea < 0 }
		}
		set_variable = { var_deployed_ABM_sea = 0 }
	}
}

calculate_ABM_land_gui_vars = {
	if = {
		limit = {
			check_variable = { var_deployed_ABM_land < 0 }
		}
		set_variable = { var_deployed_ABM_land = 0 }
	}
}


### temp for testing, connect to inventory or tech array
set_SAM_display_array = {
	### SAM0
	add_to_array = { SAM_display_array = 80 }
	### SAM1
	add_to_array = { SAM_display_array = 81 }
	### SAM2
	add_to_array = { SAM_display_array = 82 }
	### SAM3
	add_to_array = { SAM_display_array = 83 }
	### SAM4
	add_to_array = { SAM_display_array = 84 }
	### SAM5
	add_to_array = { SAM_display_array = 85 }
	### SAM6
	add_to_array = { SAM_display_array = 86 }
	### SAM7
	add_to_array = { SAM_display_array = 87 }
}
set_ABM_display_array = {
	### ABM0
	add_to_array = { ABM_display_array = 90 }
	### ABM1
	add_to_array = { ABM_display_array = 91 }
	### ABM2
	add_to_array = { ABM_display_array = 92 }
	### ABM3
	add_to_array = { ABM_display_array = 93 }
	### ABM4
	add_to_array = { ABM_display_array = 94 }
	### ABM5
	add_to_array = { ABM_display_array = 95 }
	### ABM6
	add_to_array = { ABM_display_array = 96 }
	### ABM7
	add_to_array = { ABM_display_array = 97 }
}


######################
### satellites gui ###
######################

set_satellites_gui = {
	set_GNSS_satellites = yes
	set_COM_satellites = yes
	set_SPY_satellites = yes
}

set_GNSS_satellites = {
	set_variable = { var_GNSS_sat_total = 0 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^0 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^1 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^2 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^3 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^4 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^5 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^6 }
	add_to_variable = { var_GNSS_sat_total = GNSS_satellite_array^7 }
}

set_COM_satellites = {
	set_variable = { var_COM_sat_total = 0 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^0 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^1 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^2 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^3 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^4 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^5 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^6 }
	add_to_variable = { var_COM_sat_total = COM_satellite_array^7 }
}

set_SPY_satellites = {
	set_variable = { var_SPY_sat_total = 0 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^0 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^1 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^2 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^3 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^4 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^5 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^6 }
	add_to_variable = { var_SPY_sat_total = SPY_satellite_array^7 }
}

### satellite systems

set_GNSS_mil_systems = {
	add_to_array = { GNSS_mil_systems_array = 0 }
	add_to_array = { GNSS_mil_systems_array = 1 }
	add_to_array = { GNSS_mil_systems_array = 2 }
	add_to_array = { GNSS_mil_systems_array = 3 }
	add_to_array = { GNSS_mil_systems_array = 4 }
	add_to_array = { GNSS_mil_systems_array = 5 }
	add_to_array = { GNSS_mil_systems_array = 6 }
	add_to_array = { GNSS_mil_systems_array = 7 }
}
set_GNSS_civ_systems = {
	add_to_array = { GNSS_civ_systems_array = 0 }
	add_to_array = { GNSS_civ_systems_array = 1 }
	add_to_array = { GNSS_civ_systems_array = 2 }
	add_to_array = { GNSS_civ_systems_array = 3 }
	add_to_array = { GNSS_civ_systems_array = 4 }
	add_to_array = { GNSS_civ_systems_array = 5 }
	add_to_array = { GNSS_civ_systems_array = 6 }
	add_to_array = { GNSS_civ_systems_array = 7 }
}
set_COM_mil_systems = {
	add_to_array = { COM_mil_systems_array = 0 }
	add_to_array = { COM_mil_systems_array = 1 }
	add_to_array = { COM_mil_systems_array = 2 }
	add_to_array = { COM_mil_systems_array = 3 }
	add_to_array = { COM_mil_systems_array = 4 }
	add_to_array = { COM_mil_systems_array = 5 }
	add_to_array = { COM_mil_systems_array = 6 }
	add_to_array = { COM_mil_systems_array = 7 }
}
set_COM_civ_systems = {
	add_to_array = { COM_civ_systems_array = 0 }
	add_to_array = { COM_civ_systems_array = 1 }
	add_to_array = { COM_civ_systems_array = 2 }
	add_to_array = { COM_civ_systems_array = 3 }
	add_to_array = { COM_civ_systems_array = 4 }
	add_to_array = { COM_civ_systems_array = 5 }
	add_to_array = { COM_civ_systems_array = 6 }
	add_to_array = { COM_civ_systems_array = 7 }
}
set_SPY_mil_systems = {
	add_to_array = { SPY_mil_systems_array = 0 }
	add_to_array = { SPY_mil_systems_array = 1 }
	add_to_array = { SPY_mil_systems_array = 2 }
	add_to_array = { SPY_mil_systems_array = 3 }
	add_to_array = { SPY_mil_systems_array = 4 }
	add_to_array = { SPY_mil_systems_array = 5 }
	add_to_array = { SPY_mil_systems_array = 6 }
	add_to_array = { SPY_mil_systems_array = 7 }
}
set_SPY_civ_systems = {
	add_to_array = { SPY_civ_systems_array = 0 }
	add_to_array = { SPY_civ_systems_array = 1 }
	add_to_array = { SPY_civ_systems_array = 2 }
	add_to_array = { SPY_civ_systems_array = 3 }
	add_to_array = { SPY_civ_systems_array = 4 }
	add_to_array = { SPY_civ_systems_array = 5 }
	add_to_array = { SPY_civ_systems_array = 6 }
	add_to_array = { SPY_civ_systems_array = 7 }
}

set_COM_sat_receiver_tech_array = {
	add_to_array = { COM_sat_receiver_tech_array = 10 }
	add_to_array = { COM_sat_receiver_tech_array = 20 }
	add_to_array = { COM_sat_receiver_tech_array = 30 }
	add_to_array = { COM_sat_receiver_tech_array = 40 }
	add_to_array = { COM_sat_receiver_tech_array = 50 }
	add_to_array = { COM_sat_receiver_tech_array = 60 }
	add_to_array = { COM_sat_receiver_tech_array = 70 }
	add_to_array = { COM_sat_receiver_tech_array = 80 }
}

update_sat_systems_stats = {
	check_sat_systems_min_sat_num = yes
	set_satellites_gui = yes
	update_GNSS_system_stats = yes
	update_COM_system_stats = yes
	update_SPY_system_stats = yes
	calculate_GNSS_mil_gui_vars = yes
	calculate_GNSS_civ_gui_vars = yes
	calculate_COM_mil_gui_vars = yes
	calculate_COM_civ_gui_vars = yes
	calculate_SPY_mil_gui_vars = yes
	calculate_SPY_civ_gui_vars = yes
	add_access_GNSS_mil_vars = yes
	add_access_GNSS_civ_vars = yes
	add_access_COM_mil_vars = yes
	add_access_COM_civ_vars = yes
	add_access_SPY_mil_vars = yes
	add_access_SPY_civ_vars = yes
	force_update_dynamic_modifier = yes
}

check_sat_systems_min_sat_num = {
	meta_effect = {
		text = {
			#GNSS
			if = {
				limit = {
					check_variable = {
						GNSS_satellite_array^[GNSS_mil_system_ID] < GNSS_sat_system_min_array^[GNSS_mil_system_ID]
					}
					check_variable = {
						var_GNSS_mil_system_idx > 0
					}
				}
				subtract_from_variable = { var_GNSS_mil_system_idx = 1 }
				ROOT = { news_event = { id = satellites.2 } }
			}
			if = {
				limit = {
					check_variable = {
						GNSS_satellite_array^[GNSS_civ_system_ID] < GNSS_sat_system_min_array^[GNSS_civ_system_ID]
					}
					check_variable = {
						var_GNSS_civ_system_idx > 0
					}
				}
				subtract_from_variable = { var_GNSS_civ_system_idx = 1 }
				ROOT = { news_event = { id = satellites.3 } }
			}
			#COM
			if = {
				limit = {
					check_variable = {
						COM_satellite_array^[COM_mil_system_ID] < COM_sat_system_min_array^[COM_mil_system_ID]
					}
					check_variable = {
						var_COM_mil_system_idx > 0
					}
				}
				subtract_from_variable = { var_COM_mil_system_idx = 1 }
				ROOT = { news_event = { id = satellites.4 } }
			}
			if = {
				limit = {
					check_variable = {
						COM_satellite_array^[COM_civ_system_ID] < COM_sat_system_min_array^[COM_civ_system_ID]
					}
					check_variable = {
						var_COM_civ_system_idx > 0
					}
				}
				subtract_from_variable = { var_COM_civ_system_idx = 1 }
				ROOT = { news_event = { id = satellites.5 } }
			}
			#SPY
			if = {
				limit = {
					check_variable = {
						SPY_satellite_array^[SPY_mil_system_ID] < SPY_sat_system_min_array^[SPY_mil_system_ID]
					}
					check_variable = {
						var_SPY_mil_system_idx > 0
					}
				}
				subtract_from_variable = { var_SPY_mil_system_idx = 1 }
				ROOT = { news_event = { id = satellites.6 } }
			}
			if = {
				limit = {
					check_variable = {
						SPY_satellite_array^[SPY_civ_system_ID] < SPY_sat_system_min_array^[SPY_civ_system_ID]
					}
					check_variable = {
						var_SPY_civ_system_idx > 0
					}
				}
				subtract_from_variable = { var_SPY_civ_system_idx = 1 }
				ROOT = { news_event = { id = satellites.7 } }
			}
		}
		GNSS_mil_system_ID = "[?var_GNSS_mil_system_idx]"
		GNSS_civ_system_ID = "[?var_GNSS_civ_system_idx]"
		COM_mil_system_ID = "[?var_COM_mil_system_idx]"
		COM_civ_system_ID = "[?var_COM_civ_system_idx]"
		SPY_mil_system_ID = "[?var_SPY_mil_system_idx]"
		SPY_civ_system_ID = "[?var_SPY_civ_system_idx]"
	}
}

update_GNSS_system_stats = {
	meta_effect = {
		text = {
			### GNSS mil system
			set_variable = { var_GNSS_mil_sat_system_num = GNSS_satellite_array^[GNSS_mil_system_ID] }
			if = {
				limit = {
					check_variable = {
						GNSS_satellite_array^[GNSS_mil_system_ID] = GNSS_satellite_array^[GNSS_civ_system_ID]
					}
				}
				multiply_variable = { var_GNSS_mil_sat_system_num = 0.5 }
				subtract_from_variable = { var_GNSS_mil_sat_system_num = 0.5 }
				round_variable = var_GNSS_mil_sat_system_num
				if = {
					limit = {
						check_variable = {
							var_GNSS_mil_sat_system_num < 0
						}
					}
					set_variable = { var_GNSS_mil_sat_system_num = 0 }
				}
			}
			if = {
				limit = {
					check_variable = {
						var_GNSS_mil_sat_system_num > var_GNSS_mil_sat_system_max
					}
				}
				set_variable = { var_GNSS_mil_sat_system_num = var_GNSS_mil_sat_system_max }
				set_variable = { var_GNSS_mil_coverage = 1.0 }
				set_variable = { var_GNSS_mil_SBAS_num = 0 }
				set_variable = { var_GNSS_mil_SBAS_bonus = 0 }
			}
			else = {
				set_variable = { var_GNSS_mil_coverage = var_GNSS_mil_sat_system_num }
				divide_variable = { var_GNSS_mil_coverage = var_GNSS_mil_sat_system_max }
				update_GNSS_SBAS = yes
			}
			set_variable = { var_GNSS_mil_sat_system_bonus = var_GNSS_mil_coverage }
			add_to_variable = { var_GNSS_mil_sat_system_bonus = var_GNSS_mil_SBAS_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_mil_sat_system_bonus < 0
					}
				}
				set_variable = { var_GNSS_mil_sat_system_bonus = 0 }
			}
			### GNSS civ system
			set_variable = { var_GNSS_civ_sat_system_num = GNSS_satellite_array^[GNSS_civ_system_ID] }
			if = {
				limit = {
					check_variable = {
						GNSS_satellite_array^[GNSS_mil_system_ID] = GNSS_satellite_array^[GNSS_civ_system_ID]
					}
				}
				multiply_variable = { var_GNSS_civ_sat_system_num = 0.5 }
				subtract_from_variable = { var_GNSS_civ_sat_system_num = 0.5 }
				round_variable = var_GNSS_civ_sat_system_num
				if = {
					limit = {
						check_variable = {
							var_GNSS_civ_sat_system_num < 0
						}
					}
					set_variable = { var_GNSS_civ_sat_system_num = 0 }
				}
			}
			if = {
				limit = {
					check_variable = {
						var_GNSS_civ_sat_system_num > var_GNSS_civ_sat_system_max
					}
				}
				set_variable = { var_GNSS_civ_sat_system_num = var_GNSS_civ_sat_system_max }
				set_variable = { var_GNSS_civ_coverage = 1.0 }
				set_variable = { var_GNSS_civ_SBAS_num = 0 }
				set_variable = { var_GNSS_civ_SBAS_bonus = 0 }
			}
			else = {
				set_variable = { var_GNSS_civ_coverage = var_GNSS_civ_sat_system_num }
				divide_variable = { var_GNSS_civ_coverage = var_GNSS_civ_sat_system_max }
				update_GNSS_SBAS = yes
			}
			set_variable = { var_GNSS_civ_sat_system_bonus = var_GNSS_civ_coverage }
			add_to_variable = { var_GNSS_civ_sat_system_bonus = var_GNSS_civ_SBAS_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_civ_sat_system_bonus < 0
					}
				}
				set_variable = { var_GNSS_civ_sat_system_bonus = 0 }
			}
		}
		GNSS_mil_system_ID = "[?var_GNSS_mil_system_idx]"
		GNSS_civ_system_ID = "[?var_GNSS_civ_system_idx]"
	}
}

update_GNSS_SBAS = {
	### GNSS mil
	set_variable = { var_GNSS_mil_SBAS_num = var_GNSS_sat_total }
	subtract_from_variable = { var_GNSS_mil_SBAS_num = var_GNSS_mil_sat_system_num }
	subtract_from_variable = { var_GNSS_mil_SBAS_num = var_GNSS_civ_sat_system_num }
	set_variable = { var_GNSS_mil_SBAS_bonus = var_GNSS_mil_SBAS_num }
	divide_variable = { var_GNSS_mil_SBAS_bonus = 100 }
	set_temp_variable = { temp1 = var_GNSS_mil_coverage }
	set_temp_variable = { temp2 = 1 }
	subtract_from_temp_variable = { temp2 = temp1 }
	if = {
		limit = {
			check_variable = {
				temp2 < var_GNSS_mil_SBAS_bonus
			}
		}
		set_variable = { var_GNSS_mil_SBAS_bonus = temp2 }
	}
	###GNSS civ
	set_variable = { var_GNSS_civ_SBAS_num = var_GNSS_sat_total }
	subtract_from_variable = { var_GNSS_civ_SBAS_num = var_GNSS_civ_sat_system_num }
	subtract_from_variable = { var_GNSS_civ_SBAS_num = var_GNSS_mil_sat_system_num }
	set_variable = { var_GNSS_civ_SBAS_bonus = var_GNSS_civ_SBAS_num }
	divide_variable = { var_GNSS_civ_SBAS_bonus = 100 }
	set_temp_variable = { temp1 = var_GNSS_civ_coverage }
	set_temp_variable = { temp2 = 1 }
	subtract_from_temp_variable = { temp2 = temp1 }
	if = {
		limit = {
			check_variable = {
				temp2 < var_GNSS_civ_SBAS_bonus
			}
		}
		set_variable = { var_GNSS_civ_SBAS_bonus = temp2 }
	}
}

update_COM_system_stats = {
	meta_effect = {
		text = {
			set_variable = { var_COM_mil_sat_system_num = 0 }
			set_variable = { var_COM_mil_receiver_cap = 0 }
			set_variable = { var_COM_civ_sat_system_num = 0 }
			set_variable = { var_COM_civ_receiver_cap = 0 }
			for_each_loop = {
				array = COM_satellite_array
				### COM mil system
				if = {
					limit = {
						OR = {
							check_variable = { i = [COM_mil_system_ID] }
							check_variable = { i > [COM_mil_system_ID] }
						}
					}
					if = {
						limit = {
							OR = {
								check_variable = { i = [COM_civ_system_ID] }
								check_variable = { i > [COM_civ_system_ID] }
							}
						}
						set_temp_variable = { temp1 = COM_satellite_array^i }
						multiply_temp_variable = { temp1 = 0.5 }
						subtract_from_temp_variable = { temp1 = 0.5 }
						round_temp_variable = temp1
						add_to_variable = { var_COM_mil_sat_system_num = temp1 }
						#
						multiply_temp_variable = { temp1 = COM_sat_receiver_tech_array^i }
						add_to_variable = { var_COM_mil_receiver_cap = temp1 }
					}
					else = {
						add_to_variable = { var_COM_mil_sat_system_num = COM_satellite_array^i }
						set_temp_variable = { temp1 = COM_satellite_array^i }
						multiply_temp_variable = { temp1 = COM_sat_receiver_tech_array^i }
						add_to_variable = { var_COM_mil_receiver_cap = temp1 }
					}
				}
				### COM civ system
				if = {
					limit = {
						OR = {
							check_variable = { i = [COM_civ_system_ID] }
							check_variable = { i > [COM_civ_system_ID] }
						}
					}
					if = {
						limit = {
							OR = {
								check_variable = { i = [COM_mil_system_ID] }
								check_variable = { i > [COM_mil_system_ID] }
							}
						}
						set_temp_variable = { temp2 = COM_satellite_array^i }
						multiply_temp_variable = { temp2 = 0.5 }
						subtract_from_temp_variable = { temp2 = 0.5 }
						round_temp_variable = temp2
						add_to_variable = { var_COM_civ_sat_system_num = temp1 }
						#
						multiply_temp_variable = { temp2 = COM_sat_receiver_tech_array^i }
						add_to_variable = { var_COM_civ_receiver_cap = temp2 }
					}
					else = {
						add_to_variable = { var_COM_civ_sat_system_num = COM_satellite_array^i }
						set_temp_variable = { temp2 = COM_satellite_array^i }
						multiply_temp_variable = { temp2 = COM_sat_receiver_tech_array^i }
						add_to_variable = { var_COM_civ_receiver_cap = temp2 }
					}
				}
			}
			if = {
				limit = {
					check_variable = {
						var_COM_mil_sat_system_num > var_COM_mil_sat_system_max
					}
				}
				set_variable = { var_COM_mil_sat_system_num = var_COM_mil_sat_system_max }
				set_variable = { var_COM_mil_coverage = 1.0 }
			}
			else = {
				set_variable = { var_COM_mil_coverage = var_COM_mil_sat_system_num }
				divide_variable = { var_COM_mil_coverage = var_COM_mil_sat_system_max }
			}
			set_variable = { var_COM_mil_receiver_num = num_battalions }
			add_to_variable = { var_COM_mil_receiver_num = num_ships }
			add_to_variable = { var_COM_mil_receiver_num = num_deployed_planes }
			add_treaty_COM_mil_receiver_num = yes
			set_variable = { var_sat_network_traffic_mil = var_COM_mil_receiver_num }
			divide_variable = { var_sat_network_traffic_mil = var_COM_mil_receiver_cap }
			set_variable = { var_COM_mil_sat_system_bonus = var_COM_mil_coverage }
			if = {
				limit = {
					check_variable = {
						var_sat_network_traffic_mil > 1
					}
				}
				set_temp_variable = { temp3 = var_sat_network_traffic_mil }
				subtract_from_temp_variable = { temp3 = 1 }
				subtract_from_variable = { var_COM_mil_sat_system_bonus = temp3 }
				if = {
					limit = {
						check_variable = {
							var_COM_mil_sat_system_bonus < 0
						}
					}
					set_variable = { var_COM_mil_sat_system_bonus = 0 }
				}
			}
			if = {
				limit = {
					check_variable = {
						var_COM_civ_sat_system_num > var_COM_civ_sat_system_max
					}
				}
				set_variable = { var_COM_civ_sat_system_num = var_COM_civ_sat_system_max }
				set_variable = { var_COM_civ_coverage = 1.0 }
			}
			else = {
				set_variable = { var_COM_civ_coverage = var_COM_civ_sat_system_num }
				divide_variable = { var_COM_civ_coverage = var_COM_civ_sat_system_max }
			}
			set_variable = { var_COM_civ_receiver_num = num_controlled_states }
			multiply_variable = { var_COM_civ_receiver_num = 100 }
			add_treaty_COM_civ_receiver_num = yes
			set_variable = { var_sat_network_traffic_civ = var_COM_civ_receiver_num }
			divide_variable = { var_sat_network_traffic_civ = var_COM_civ_receiver_cap }
			set_variable = { var_COM_civ_sat_system_bonus = var_COM_civ_coverage }
			if = {
				limit = {
					check_variable = {
						var_sat_network_traffic_civ > 1
					}
				}
				set_temp_variable = { temp4 = var_sat_network_traffic_civ }
				subtract_from_temp_variable = { temp4 = 1 }
				subtract_from_variable = { var_COM_civ_sat_system_bonus = temp4 }
				if = {
					limit = {
						check_variable = {
							var_COM_civ_sat_system_bonus < 0
						}
					}
					set_variable = { var_COM_civ_sat_system_bonus = 0 }
				}
			}
		}
		COM_mil_system_ID = "[?var_COM_mil_system_idx]"
		COM_civ_system_ID = "[?var_COM_civ_system_idx]"
	}
}

### receiver from treaties (access granted)
add_treaty_COM_mil_receiver_num = {
	set_variable = { var_treaty_COM_mil_receiver_num = 0 }
	for_each_scope_loop = {
	#for_each_loop = {
		array = COM_mil_treaty_array
		add_to_variable = { PREV.var_treaty_COM_mil_receiver_num = THIS.num_battalions }
		add_to_variable = { PREV.var_treaty_COM_mil_receiver_num = THIS.num_ships }
		add_to_variable = { PREV.var_treaty_COM_mil_receiver_num = THIS.num_deployed_planes }
	}
	add_to_variable = { var_COM_mil_receiver_num = var_treaty_COM_mil_receiver_num }
}
add_treaty_COM_civ_receiver_num = {
	set_variable = { var_treaty_COM_civ_receiver_num = 0 }
	for_each_scope_loop = {
	#for_each_loop = {	
		array = COM_civ_treaty_array
		set_variable = { PREV.var_treaty_COM_civ_receiver_num = THIS.num_controlled_states }
		multiply_variable = { PREV.var_treaty_COM_civ_receiver_num = 100 }
	}
	add_to_variable = { var_COM_civ_receiver_num = var_treaty_COM_civ_receiver_num }
}
###

update_SPY_system_stats = {
	meta_effect = {
		text = {
			### SPY mil system
			set_variable = { var_SPY_mil_sat_system_num = SPY_satellite_array^[SPY_mil_system_ID] }
			if = {
				limit = {
					check_variable = {
						SPY_satellite_array^[SPY_mil_system_ID] = SPY_satellite_array^[SPY_civ_system_ID]
					}
				}
				multiply_variable = { var_SPY_mil_sat_system_num = 0.5 }
				subtract_from_variable = { var_SPY_mil_sat_system_num = 0.5 }
				round_variable = var_SPY_mil_sat_system_num
				if = {
					limit = {
						check_variable = {
							var_SPY_mil_sat_system_num < 0
						}
					}
					set_variable = { var_SPY_mil_sat_system_num = 0 }
				}
			}
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_sat_system_num > var_SPY_mil_sat_system_max
					}
				}
				set_variable = { var_SPY_mil_sat_system_num = var_SPY_mil_sat_system_max }
				set_variable = { var_SPY_mil_coverage = 1.0 }
			}
			else = {
				set_variable = { var_SPY_mil_coverage = var_SPY_mil_sat_system_num }
				divide_variable = { var_SPY_mil_coverage = var_SPY_mil_sat_system_max }
			}
			set_variable = { var_SPY_mil_sat_system_bonus = var_SPY_mil_coverage }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_sat_system_bonus < 0
					}
				}
				set_variable = { var_SPY_mil_sat_system_bonus = 0 }
			}
			update_SPY_mission_num = yes
			### SPY civ system
			set_variable = { var_SPY_civ_sat_system_num = SPY_satellite_array^[SPY_civ_system_ID] }
			if = {
				limit = {
					check_variable = {
						SPY_satellite_array^[SPY_mil_system_ID] = SPY_satellite_array^[SPY_civ_system_ID]
					}
				}
				multiply_variable = { var_SPY_civ_sat_system_num = 0.5 }
				subtract_from_variable = { var_SPY_civ_sat_system_num = 0.5 }
				round_variable = var_SPY_civ_sat_system_num
				if = {
					limit = {
						check_variable = {
							var_SPY_civ_sat_system_num < 0
						}
					}
					set_variable = { var_SPY_civ_sat_system_num = 0 }
				}
			}
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_sat_system_num > var_SPY_civ_sat_system_max
					}
				}
				set_variable = { var_SPY_civ_sat_system_num = var_SPY_civ_sat_system_max }
				set_variable = { var_SPY_civ_coverage = 1.0 }
			}
			else = {
				set_variable = { var_SPY_civ_coverage = var_SPY_civ_sat_system_num }
				divide_variable = { var_SPY_civ_coverage = var_SPY_civ_sat_system_max }
			}
			set_variable = { var_SPY_civ_sat_system_bonus = var_SPY_civ_coverage }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_sat_system_bonus < 0
					}
				}
				set_variable = { var_SPY_civ_sat_system_bonus = 0 }
			}
			update_SPY_mission_num = yes
		}
		SPY_mil_system_ID = "[?var_SPY_mil_system_idx]"
		SPY_civ_system_ID = "[?var_SPY_civ_system_idx]"
	}
}

update_SPY_mission_num = {
	set_variable = { var_SPY_mission_num = var_SPY_sat_total }
	subtract_from_variable = { var_SPY_mission_num = var_SPY_mil_sat_system_num }
	subtract_from_variable = { var_SPY_mission_num = var_SPY_civ_sat_system_num }
}


calculate_GNSS_mil_gui_vars = {
	meta_effect = {
		text = {
			### GNSS mil
			#army_speed_factor
			set_variable = { var_GNSS_mil_army_speed_factor_base = GNSS_mil_army_speed_factor_max_array^[GNSS_mil_system_ID] }
			set_variable = { var_GNSS_mil_army_speed_factor_min = GNSS_mil_army_speed_factor_min_array^[GNSS_mil_system_ID] }
			multiply_variable = { var_GNSS_mil_army_speed_factor_base = var_GNSS_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_mil_army_speed_factor_base < var_GNSS_mil_army_speed_factor_min
					}
				}
				set_variable = { var_GNSS_mil_army_speed_factor_base = var_GNSS_mil_army_speed_factor_min }
			}
			#air_cas_efficiency
			set_variable = { var_GNSS_mil_air_cas_efficiency_base = GNSS_mil_air_cas_efficiency_max_array^[GNSS_mil_system_ID] }
			set_variable = { var_GNSS_mil_air_cas_efficiency_min = GNSS_mil_air_cas_efficiency_min_array^[GNSS_mil_system_ID] }
			multiply_variable = { var_GNSS_mil_air_cas_efficiency_base = var_GNSS_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_mil_air_cas_efficiency_base < var_GNSS_mil_air_cas_efficiency_min
					}
				}
				set_variable = { var_GNSS_mil_air_cas_efficiency_base = var_GNSS_mil_air_cas_efficiency_min }
			}
			#air_nav_efficiency
			set_variable = { var_GNSS_mil_air_nav_efficiency_base  = GNSS_mil_air_nav_efficiency_max_array^[GNSS_mil_system_ID] }
			set_variable = { var_GNSS_mil_air_nav_efficiency_min = GNSS_mil_air_nav_efficiency_min_array^[GNSS_mil_system_ID] }
			multiply_variable = { var_GNSS_mil_air_nav_efficiency_base  = var_GNSS_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_mil_air_nav_efficiency_base  < var_GNSS_mil_air_nav_efficiency_min
					}
				}
				set_variable = { var_GNSS_mil_air_nav_efficiency_base  = var_GNSS_mil_air_nav_efficiency_min }
			}
			#air_strategic_bomber_bombing_factor
			set_variable = { var_GNSS_mil_air_strategic_bomber_bombing_factor_base = GNSS_mil_air_strategic_bomber_bombing_factor_max_array^[GNSS_mil_system_ID] }
			set_variable = { var_GNSS_mil_air_strategic_bomber_bombing_factor_min = GNSS_mil_air_strategic_bomber_bombing_factor_min_array^[GNSS_mil_system_ID] }
			multiply_variable = { var_GNSS_mil_air_strategic_bomber_bombing_factor_base = var_GNSS_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_mil_air_strategic_bomber_bombing_factor_base < var_GNSS_mil_air_strategic_bomber_bombing_factor_min
					}
				}
				set_variable = { var_GNSS_mil_air_strategic_bomber_bombing_factor_base = var_GNSS_mil_air_strategic_bomber_bombing_factor_min }
			}
			#positioning
			set_variable = { var_GNSS_mil_positioning_base = GNSS_mil_positioning_max_array^[GNSS_mil_system_ID] }
			set_variable = { var_GNSS_mil_positioning_min = GNSS_mil_positioning_min_array^[GNSS_mil_system_ID] }
			multiply_variable = { var_GNSS_mil_positioning_base = var_GNSS_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_mil_positioning_base < var_GNSS_mil_positioning_min
					}
				}
				set_variable = { var_GNSS_mil_positioning_base = var_GNSS_mil_positioning_min }
			}
			#naval_hit_chance
			set_variable = { var_GNSS_mil_naval_hit_chance_base = GNSS_mil_naval_hit_chance_max_array^[GNSS_mil_system_ID] }
			set_variable = { var_GNSS_mil_naval_hit_chance_min = GNSS_mil_naval_hit_chance_min_array^[GNSS_mil_system_ID] }
			multiply_variable = { var_GNSS_mil_naval_hit_chance_base = var_GNSS_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_mil_naval_hit_chance_base < var_GNSS_mil_naval_hit_chance_min
					}
				}
				set_variable = { var_GNSS_mil_naval_hit_chance_base = var_GNSS_mil_naval_hit_chance_min }
			}

			###
			#force_update_dynamic_modifier = yes
		}
		GNSS_mil_system_ID = "[?var_GNSS_mil_system_idx]"
	}
}
calculate_GNSS_civ_gui_vars = {
	meta_effect = {
		text = {
			### GNSS civ
			#production_speed_buildings_factor
			set_variable = { var_GNSS_civ_production_speed_buildings_factor_base = GNSS_civ_production_speed_buildings_factor_max_array^[GNSS_civ_system_ID] }
			set_variable = { var_GNSS_civ_production_speed_buildings_factor_min = GNSS_civ_production_speed_buildings_factor_min_array^[GNSS_civ_system_ID] }
			multiply_variable = { var_GNSS_civ_production_speed_buildings_factor_base = var_GNSS_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_civ_production_speed_buildings_factor_base < var_GNSS_civ_production_speed_buildings_factor_min
					}
				}
				set_variable = { var_GNSS_civ_production_speed_buildings_factor_base = var_GNSS_civ_production_speed_buildings_factor_min }
			}
			#production_speed_infrastructure_factor
			set_variable = { var_GNSS_civ_production_speed_infrastructure_factor_base = GNSS_civ_production_speed_infrastructure_factor_max_array^[GNSS_civ_system_ID] }
			set_variable = { var_GNSS_civ_production_speed_infrastructure_factor_min = GNSS_civ_production_speed_infrastructure_factor_min_array^[GNSS_civ_system_ID] }
			multiply_variable = { var_GNSS_civ_production_speed_infrastructure_factor_base = var_GNSS_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_civ_production_speed_infrastructure_factor_base < var_GNSS_civ_production_speed_infrastructure_factor_min
					}
				}
				set_variable = { var_GNSS_civ_production_speed_infrastructure_factor_base = var_GNSS_civ_production_speed_infrastructure_factor_min }
			}
			#local_resources_factor
			set_variable = { var_GNSS_civ_local_resources_factor_base = GNSS_civ_local_resources_factor_max_array^[GNSS_civ_system_ID] }
			set_variable = { var_GNSS_civ_local_resources_factor_min = GNSS_civ_local_resources_factor_min_array^[GNSS_civ_system_ID] }
			multiply_variable = { var_GNSS_civ_local_resources_factor_base = var_GNSS_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_GNSS_civ_local_resources_factor_base < var_GNSS_civ_local_resources_factor_min
					}
				}
				set_variable = { var_GNSS_civ_local_resources_factor_base = var_GNSS_civ_local_resources_factor_min }
			}
			###
			#force_update_dynamic_modifier = yes
		}
		GNSS_civ_system_ID = "[?var_GNSS_civ_system_idx]"
	}
}
calculate_COM_mil_gui_vars = {
	meta_effect = {
		text = {
			### COM mil
			#max_command_power
			set_variable = { var_COM_mil_max_command_power_base = COM_mil_max_command_power_max_array^[COM_mil_system_ID] }
			set_variable = { var_COM_mil_max_command_power_min = COM_mil_max_command_power_min_array^[COM_mil_system_ID] }
			multiply_variable = { var_COM_mil_max_command_power_base = var_COM_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_COM_mil_max_command_power_base < var_COM_mil_max_command_power_min
					}
				}
				set_variable = { var_COM_mil_max_command_power_base = var_COM_mil_max_command_power_min }
			}
			#army_org_factor
			set_variable = { var_COM_mil_army_org_factor_base = COM_mil_army_org_factor_max_array^[COM_mil_system_ID] }
			set_variable = { var_COM_mil_army_org_factor_min = COM_mil_army_org_factor_min_array^[COM_mil_system_ID] }
			multiply_variable = { var_COM_mil_army_org_factor_base = var_COM_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_COM_mil_army_org_factor_base < var_COM_mil_army_org_factor_min
					}
				}
				set_variable = { var_COM_mil_army_org_factor_base = var_COM_mil_army_org_factor_min }
			}
			#planning_speed
			set_variable = { var_COM_mil_planning_speed_base = COM_mil_planning_speed_max_array^[COM_mil_system_ID] }
			set_variable = { var_COM_mil_planning_speed_min = COM_mil_planning_speed_min_array^[COM_mil_system_ID] }
			multiply_variable = { var_COM_mil_planning_speed_base = var_COM_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_COM_mil_planning_speed_base < var_COM_mil_planning_speed_min
					}
				}
				set_variable = { var_COM_mil_planning_speed_base = var_COM_mil_planning_speed_min }
			}
			#air_escort_efficiency
			set_variable = { var_COM_mil_air_escort_efficiency_base = COM_mil_air_escort_efficiency_max_array^[COM_mil_system_ID] }
			set_variable = { var_COM_mil_air_escort_efficiency_min = COM_mil_air_escort_efficiency_min_array^[COM_mil_system_ID] }
			multiply_variable = { var_COM_mil_air_escort_efficiency_base = var_COM_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_COM_mil_air_escort_efficiency_base < var_COM_mil_air_escort_efficiency_min
					}
				}
				set_variable = { var_COM_mil_air_escort_efficiency_base = var_COM_mil_air_escort_efficiency_min }
			}
			#air_intercept_efficiency
			set_variable = { var_COM_mil_air_intercept_efficiency_base = COM_mil_air_intercept_efficiency_max_array^[COM_mil_system_ID] }
			set_variable = { var_COM_mil_air_intercept_efficiency_min = COM_mil_air_intercept_efficiency_min_array^[COM_mil_system_ID] }
			multiply_variable = { var_COM_mil_air_intercept_efficiency_base = var_COM_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_COM_mil_air_intercept_efficiency_base < var_COM_mil_air_intercept_efficiency_min
					}
				}
				set_variable = { var_COM_mil_air_intercept_efficiency_base = var_COM_mil_air_intercept_efficiency_min }
			}
			#naval_coordination
			set_variable = { var_COM_mil_naval_coordination_base = COM_mil_naval_coordination_max_array^[COM_mil_system_ID] }
			set_variable = { var_COM_mil_naval_coordination_min = COM_mil_naval_coordination_min_array^[COM_mil_system_ID] }
			multiply_variable = { var_COM_mil_naval_coordination_base = var_COM_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_COM_mil_naval_coordination_base < var_COM_mil_naval_coordination_min
					}
				}
				set_variable = { var_COM_mil_naval_coordination_base = var_COM_mil_naval_coordination_min }
			}
			###
			#force_update_dynamic_modifier = yes
		}
		COM_mil_system_ID = "[?var_COM_mil_system_idx]"
	}
}
calculate_COM_civ_gui_vars = {
	meta_effect = {
		text = {
			### COM civ
			#political_power_factor
			set_variable = { var_COM_civ_political_power_factor_base = COM_civ_political_power_factor_max_array^[COM_civ_system_ID] }
			set_variable = { var_COM_civ_political_power_factor_min = COM_civ_political_power_factor_min_array^[COM_civ_system_ID] }
			multiply_variable = { var_COM_civ_political_power_factor_base = var_COM_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_COM_civ_political_power_factor_base < var_COM_civ_political_power_factor_min
					}
				}
				set_variable = { var_COM_civ_political_power_factor_base = var_COM_civ_political_power_factor_min }
			}
			#decryption_factor
			set_variable = { var_COM_civ_decryption_factor_base= COM_civ_decryption_factor_max_array^[COM_civ_system_ID] }
			set_variable = { var_COM_civ_decryption_factor_min = COM_civ_decryption_factor_min_array^[COM_civ_system_ID] }
			multiply_variable = { var_COM_civ_decryption_factor_base= var_COM_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_COM_civ_decryption_factor_base< var_COM_civ_decryption_factor_min
					}
				}
				set_variable = { var_COM_civ_decryption_factor_base= var_COM_civ_decryption_factor_min }
			}
			#encryption_factor
			set_variable = { var_COM_civ_encryption_factor_base = COM_civ_encryption_factor_max_array^[COM_civ_system_ID] }
			set_variable = { var_COM_civ_encryption_factor_min = COM_civ_encryption_factor_min_array^[COM_civ_system_ID] }
			multiply_variable = { var_COM_civ_encryption_factor_base = var_COM_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_COM_civ_encryption_factor_base < var_COM_civ_encryption_factor_min
					}
				}
				set_variable = { var_COM_civ_encryption_factor_base = var_COM_civ_encryption_factor_min }
			}
			#intel_network_gain_factor
			set_variable = { var_COM_civ_intel_network_gain_factor_base = COM_civ_intel_network_gain_factor_max_array^[COM_civ_system_ID] }
			set_variable = { var_COM_civ_intel_network_gain_factor_min = COM_civ_intel_network_gain_factor_min_array^[COM_civ_system_ID] }
			multiply_variable = { var_COM_civ_intel_network_gain_factor_base = var_COM_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_COM_civ_intel_network_gain_factor_base < var_COM_civ_intel_network_gain_factor_min
					}
				}
				set_variable = { var_COM_civ_intel_network_gain_factor_base = var_COM_civ_intel_network_gain_factor_min }
			}
			#operation_outcome
			set_variable = { var_COM_civ_operation_outcome_base = COM_civ_operation_outcome_max_array^[COM_civ_system_ID] }
			set_variable = { var_COM_civ_operation_outcome_min = COM_civ_operation_outcome_min_array^[COM_civ_system_ID] }
			multiply_variable = { var_COM_civ_operation_outcome_base = var_COM_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_COM_civ_operation_outcome_base < var_COM_civ_operation_outcome_min
					}
				}
				set_variable = { var_COM_civ_operation_outcome_base = var_COM_civ_operation_outcome_min }
			}
			###
			#force_update_dynamic_modifier = yes
		}
		COM_civ_system_ID = "[?var_COM_civ_system_idx]"
	}
}
calculate_SPY_mil_gui_vars = {
	meta_effect = {
		text = {
			### SPY mil
			#max_planning_factor
			set_variable = { var_SPY_mil_max_planning_factor_base = SPY_mil_max_planning_factor_max_array^[SPY_mil_system_ID] }
			set_variable = { var_SPY_mil_max_planning_factor_min = SPY_mil_max_planning_factor_min_array^[SPY_mil_system_ID] }
			multiply_variable = { var_SPY_mil_max_planning_factor_base = var_SPY_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_max_planning_factor_base < var_SPY_mil_max_planning_factor_min
					}
				}
				set_variable = { var_SPY_mil_max_planning_factor_base = var_SPY_mil_max_planning_factor_min }
			}
			#recon_factor
			set_variable = { var_SPY_mil_recon_factor_base = SPY_mil_recon_factor_max_array^[SPY_mil_system_ID] }
			set_variable = { var_SPY_mil_recon_factor_min = SPY_mil_recon_factor_min_array^[SPY_mil_system_ID] }
			multiply_variable = { var_SPY_mil_recon_factor_base = var_SPY_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_recon_factor_base < var_SPY_mil_recon_factor_min
					}
				}
				set_variable = { var_SPY_mil_recon_factor_base = var_SPY_mil_recon_factor_min }
			}
			#air_weather_penalty
			set_variable = { var_SPY_mil_air_weather_penalty_base = SPY_mil_air_weather_penalty_max_array^[SPY_mil_system_ID] }
			set_variable = { var_SPY_mil_air_weather_penalty_min = SPY_mil_air_weather_penalty_min_array^[SPY_mil_system_ID] }
			multiply_variable = { var_SPY_mil_air_weather_penalty_base = var_SPY_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_air_weather_penalty_base < var_SPY_mil_air_weather_penalty_min
					}
				}
				set_variable = { var_SPY_mil_air_weather_penalty_base = var_SPY_mil_air_weather_penalty_min }
			}
			#spotting_chance
			set_variable = { var_SPY_mil_spotting_chance_base = SPY_mil_spotting_chance_max_array^[SPY_mil_system_ID] }
			set_variable = { var_SPY_mil_spotting_chance_min = SPY_mil_spotting_chance_min_array^[SPY_mil_system_ID] }
			multiply_variable = { var_SPY_mil_spotting_chance_base = var_SPY_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_spotting_chance_base < var_SPY_mil_spotting_chance_min
					}
				}
				set_variable = { var_SPY_mil_spotting_chance_base = var_SPY_mil_spotting_chance_min }
			}
			#convoy_raiding_efficiency_factor
			set_variable = { var_SPY_mil_convoy_raiding_efficiency_factor_base = SPY_mil_convoy_raiding_efficiency_factor_max_array^[SPY_mil_system_ID] }
			set_variable = { var_SPY_mil_convoy_raiding_efficiency_factor_min = SPY_mil_convoy_raiding_efficiency_factor_min_array^[SPY_mil_system_ID] }
			multiply_variable = { var_SPY_mil_convoy_raiding_efficiency_factor_base = var_SPY_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_convoy_raiding_efficiency_factor_base < var_SPY_mil_convoy_raiding_efficiency_factor_min
					}
				}
				set_variable = { var_SPY_mil_convoy_raiding_efficiency_factor_base = var_SPY_mil_convoy_raiding_efficiency_factor_min }
			}
			#convoy_escort_efficiency
			set_variable = { var_SPY_mil_convoy_escort_efficiency_base = SPY_mil_convoy_escort_efficiency_max_array^[SPY_mil_system_ID] }
			set_variable = { var_SPY_mil_convoy_escort_efficiency_min = SPY_mil_convoy_escort_efficiency_min_array^[SPY_mil_system_ID] }
			multiply_variable = { var_SPY_mil_convoy_escort_efficiency_base = var_SPY_mil_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_mil_convoy_escort_efficiency_base < var_SPY_mil_convoy_escort_efficiency_min
					}
				}
				set_variable = { var_SPY_mil_convoy_escort_efficiency_base = var_SPY_mil_convoy_escort_efficiency_min }
			}
			###
			#force_update_dynamic_modifier = yes
		}
		SPY_mil_system_ID = "[?var_SPY_mil_system_idx]"
	}
}
calculate_SPY_civ_gui_vars = {
	meta_effect = {
		text = {
			### SPY civ
			#research_speed_factor
			set_variable = { var_SPY_civ_research_speed_factor_base = SPY_civ_research_speed_factor_max_array^[SPY_civ_system_ID] }
			set_variable = { var_SPY_civ_research_speed_factor_min = SPY_civ_research_speed_factor_min_array^[SPY_civ_system_ID] }
			multiply_variable = { var_SPY_civ_research_speed_factor_base = var_SPY_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_research_speed_factor_base < var_SPY_civ_research_speed_factor_min
					}
				}
				set_variable = { var_SPY_civ_research_speed_factor_base = var_SPY_civ_research_speed_factor_min }
			}
			#civilian_intel_factor
			set_variable = { var_SPY_civ_civilian_intel_factor_base = SPY_civ_civilian_intel_factor_max_array^[SPY_civ_system_ID] }
			set_variable = { var_SPY_civ_civilian_intel_factor_min = SPY_civ_civilian_intel_factor_min_array^[SPY_civ_system_ID] }
			multiply_variable = { var_SPY_civ_civilian_intel_factor_base = var_SPY_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_civilian_intel_factor_base < var_SPY_civ_civilian_intel_factor_min
					}
				}
				set_variable = { var_SPY_civ_civilian_intel_factor_base = var_SPY_civ_civilian_intel_factor_min }
			}
			#army_intel_factor
			set_variable = { var_SPY_civ_army_intel_factor_base = SPY_civ_army_intel_factor_max_array^[SPY_civ_system_ID] }
			set_variable = { var_SPY_civ_army_intel_factor_min = SPY_civ_army_intel_factor_min_array^[SPY_civ_system_ID] }
			multiply_variable = { var_SPY_civ_army_intel_factor_base = var_SPY_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_army_intel_factor_base < var_SPY_civ_army_intel_factor_min
					}
				}
				set_variable = { var_SPY_civ_army_intel_factor_base = var_SPY_civ_army_intel_factor_min }
			}
			#navy_intel_factor
			set_variable = { var_SPY_civ_navy_intel_factor_base = SPY_civ_navy_intel_factor_max_array^[SPY_civ_system_ID] }
			set_variable = { var_SPY_civ_navy_intel_factor_min = SPY_civ_navy_intel_factor_min_array^[SPY_civ_system_ID] }
			multiply_variable = { var_SPY_civ_navy_intel_factor_base = var_SPY_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_navy_intel_factor_base < var_SPY_civ_navy_intel_factor_min
					}
				}
				set_variable = { var_SPY_civ_navy_intel_factor_base = var_SPY_civ_navy_intel_factor_min }
			}
			#airforce_intel_factor
			set_variable = { var_SPY_civ_airforce_intel_factor_base = SPY_civ_airforce_intel_factor_max_array^[SPY_civ_system_ID] }
			set_variable = { var_SPY_civ_airforce_intel_factor_min = SPY_civ_airforce_intel_factor_min_array^[SPY_civ_system_ID] }
			multiply_variable = { var_SPY_civ_airforce_intel_factor_base = var_SPY_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_airforce_intel_factor_base < var_SPY_civ_airforce_intel_factor_min
					}
				}
				set_variable = { var_SPY_civ_airforce_intel_factor_base = var_SPY_civ_airforce_intel_factor_min }
			}
			#root_out_resistance_effectiveness_factor
			set_variable = { var_SPY_civ_root_out_resistance_effectiveness_factor_base = SPY_civ_root_out_resistance_effectiveness_factor_max_array^[SPY_civ_system_ID] }
			set_variable = { var_SPY_civ_root_out_resistance_effectiveness_factor_min = SPY_civ_root_out_resistance_effectiveness_factor_min_array^[SPY_civ_system_ID] }
			multiply_variable = { var_SPY_civ_root_out_resistance_effectiveness_factor_base = var_SPY_civ_sat_system_bonus }
			if = {
				limit = {
					check_variable = {
						var_SPY_civ_root_out_resistance_effectiveness_factor_base < var_SPY_civ_root_out_resistance_effectiveness_factor_min
					}
				}
				set_variable = { var_SPY_civ_root_out_resistance_effectiveness_factor_base = var_SPY_civ_root_out_resistance_effectiveness_factor_min }
			}
			###
			#force_update_dynamic_modifier = yes
		}
		SPY_civ_system_ID = "[?var_SPY_civ_system_idx]"
	}
}

add_access_GNSS_mil_vars = {
	set_variable = { temp_GNSS_mil_access_system_highest_idx = 0 }
	set_variable = { var_GNSS_mil_army_speed_factor = var_GNSS_mil_army_speed_factor_base }
	set_variable = { var_GNSS_mil_air_cas_efficiency = var_GNSS_mil_air_cas_efficiency_base }
	set_variable = { var_GNSS_mil_air_nav_efficiency = var_GNSS_mil_air_nav_efficiency_base }
	set_variable = { var_GNSS_mil_air_strategic_bomber_bombing_factor = var_GNSS_mil_air_strategic_bomber_bombing_factor_base }
	set_variable = { var_GNSS_mil_positioning = var_GNSS_mil_positioning_base }
	set_variable = { var_GNSS_mil_naval_hit_chance = var_GNSS_mil_naval_hit_chance_base }
	for_each_loop = {
		array = GNSS_mil_access_system_idx_array
		if = {
			limit = {
				check_variable = {
					GNSS_mil_access_system_idx_array^i > temp_GNSS_mil_access_system_highest_idx
				}
			}
			set_variable = { temp_GNSS_mil_access_system_highest_idx = GNSS_mil_access_system_idx_array^i }
		}
	}
	for_each_scope_loop = {
		array = GNSS_mil_access_array
		if = {
			limit = {
				NOT = {
					check_variable = {
						ROOT.var_GNSS_mil_system_idx > THIS.var_GNSS_mil_system_idx
					}
				}
			}
			add_to_variable = { ROOT.var_GNSS_mil_army_speed_factor = THIS.var_GNSS_mil_army_speed_factor_base }
			add_to_variable = { ROOT.var_GNSS_mil_air_cas_efficiency = THIS.var_GNSS_mil_air_cas_efficiency_base }
			add_to_variable = { ROOT.var_GNSS_mil_air_nav_efficiency = THIS.var_GNSS_mil_air_nav_efficiency_base }
			add_to_variable = { ROOT.var_GNSS_mil_air_strategic_bomber_bombing_factor = THIS.var_GNSS_mil_air_strategic_bomber_bombing_factor_base }
			add_to_variable = { ROOT.var_GNSS_mil_positioning = THIS.var_GNSS_mil_positioning_base }
			add_to_variable = { ROOT.var_GNSS_mil_naval_hit_chance = THIS.var_GNSS_mil_naval_hit_chance_base }
		}
		#army_speed_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_GNSS_mil_army_speed_factor > GNSS_mil_army_speed_factor_max_array^temp_GNSS_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_GNSS_mil_army_speed_factor = GNSS_mil_army_speed_factor_max_array^temp_GNSS_mil_access_system_highest_idx }
		}
		#air_cas_efficiency
		if = {
			limit = {
				check_variable = {
					ROOT.var_GNSS_mil_air_cas_efficiency > GNSS_mil_air_cas_efficiency_max_array^temp_GNSS_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_GNSS_mil_air_cas_efficiency = GNSS_mil_air_cas_efficiency_max_array^temp_GNSS_mil_access_system_highest_idx }
		}
		#air_nav_efficiency
		if = {
			limit = {
				check_variable = {
					ROOT.var_GNSS_mil_air_nav_efficiency > GNSS_mil_air_nav_efficiency_max_array^temp_GNSS_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_GNSS_mil_air_nav_efficiency = GNSS_mil_air_nav_efficiency_max_array^temp_GNSS_mil_access_system_highest_idx }
		}
		#air_strategic_bomber_bombing_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_GNSS_mil_air_strategic_bomber_bombing_factor > GNSS_mil_air_strategic_bomber_bombing_factor_max_array^temp_GNSS_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_GNSS_mil_air_strategic_bomber_bombing_factor = GNSS_mil_air_strategic_bomber_bombing_factor_max_array^temp_GNSS_mil_access_system_highest_idx }
		}
		#positioning
		if = {
			limit = {
				check_variable = {
					ROOT.var_GNSS_mil_positioning > GNSS_mil_positioning_max_array^temp_GNSS_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_GNSS_mil_positioning = GNSS_mil_army_speed_factor_max_array^temp_GNSS_mil_access_system_highest_idx }
		}
		#naval_hit_chance
		if = {
			limit = {
				check_variable = {
					ROOT.var_GNSS_mil_naval_hit_chance > GNSS_mil_naval_hit_chance_max_array^temp_GNSS_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_GNSS_mil_naval_hit_chance = GNSS_mil_naval_hit_chance_max_array^temp_GNSS_mil_access_system_highest_idx }
		}
	}
}


add_access_GNSS_civ_vars = {
	set_variable = { temp_GNSS_civ_access_system_highest_idx = 0 }
	set_variable = { var_GNSS_civ_production_speed_buildings_factor = var_GNSS_civ_production_speed_buildings_factor_base }
	set_variable = { var_GNSS_civ_production_speed_infrastructure_factor = var_GNSS_civ_production_speed_infrastructure_factor_base }
	set_variable = { var_GNSS_civ_local_resources_factor = var_GNSS_civ_local_resources_factor_base }
	for_each_loop = {
		array = GNSS_civ_access_system_idx_array
		if = {
			limit = {
				check_variable = {
					GNSS_civ_access_system_idx_array^i > temp_GNSS_civ_access_system_highest_idx
				}
			}
			set_variable = { temp_GNSS_civ_access_system_highest_idx = GNSS_civ_access_system_idx_array^i }
		}
	}
	for_each_scope_loop = {
		array = GNSS_civ_access_array
		if = {
			limit = {
				NOT = {
					check_variable = {
						ROOT.var_GNSS_civ_system_idx > THIS.var_GNSS_civ_system_idx
					}
				}
			}
			add_to_variable = { ROOT.var_GNSS_civ_production_speed_buildings_factor = THIS.var_GNSS_civ_production_speed_buildings_factor_base }
			add_to_variable = { ROOT.var_GNSS_civ_production_speed_infrastructure_factor = THIS.var_GNSS_civ_production_speed_infrastructure_factor_base }
			add_to_variable = { ROOT.var_GNSS_civ_local_resources_factor = THIS.var_GNSS_civ_local_resources_factor_base }

		}
		#production_speed_buildings_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_GNSS_civ_production_speed_buildings_factor > GNSS_civ_production_speed_buildings_factor_max_array^temp_GNSS_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_GNSS_civ_production_speed_buildings_factor = GNSS_civ_production_speed_buildings_factor_max_array^temp_GNSS_mil_access_system_highest_idx }
		}
		#production_speed_infrastructure_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_GNSS_civ_production_speed_infrastructure_factor > GNSS_civ_production_speed_infrastructure_factor_max_array^temp_GNSS_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_GNSS_civ_production_speed_infrastructure_factor = GNSS_civ_production_speed_infrastructure_factor_max_array^temp_GNSS_mil_access_system_highest_idx }
		}
		#local_resources_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_GNSS_civ_local_resources_factor > GNSS_civ_local_resources_factor_max_array^temp_GNSS_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_GNSS_civ_local_resources_factor = GNSS_civ_local_resources_factor_max_array^temp_GNSS_mil_access_system_highest_idx }
		}
	}
}
add_access_COM_mil_vars = {
	set_variable = { temp_COM_mil_access_system_highest_idx = 0 }
	set_variable = { var_COM_mil_max_command_power = var_COM_mil_max_command_power_base }
	set_variable = { var_COM_mil_army_org_factor = var_COM_mil_army_org_factor_base }
	set_variable = { var_COM_mil_planning_speed = var_COM_mil_planning_speed_base }
	set_variable = { var_COM_mil_air_escort_efficiency = var_COM_mil_air_escort_efficiency_base }
	set_variable = { var_COM_mil_air_intercept_efficiency = var_COM_mil_air_intercept_efficiency_base }
	set_variable = { var_COM_mil_naval_coordination = var_COM_mil_naval_coordination_base }
	for_each_loop = {
		array = COM_mil_access_system_idx_array
		if = {
			limit = {
				check_variable = {
					COM_mil_access_system_idx_array^i > temp_COM_mil_access_system_highest_idx
				}
			}
			set_variable = { temp_COM_mil_access_system_highest_idx = COM_mil_access_system_idx_array^i }
		}
	}
	for_each_scope_loop = {
		array = COM_mil_access_array
		if = {
			limit = {
				NOT = {
					check_variable = {
						ROOT.var_COM_mil_system_idx > THIS.var_COM_mil_system_idx
					}
				}
			}
			add_to_variable = { ROOT.var_COM_mil_max_command_power = THIS.var_COM_mil_max_command_power_base }
			add_to_variable = { ROOT.var_COM_mil_army_org_factor = THIS.var_COM_mil_army_org_factor_base }
			add_to_variable = { ROOT.var_COM_mil_planning_speed = THIS.var_COM_mil_planning_speed_base }
			add_to_variable = { ROOT.var_COM_mil_air_escort_efficiency = THIS.var_COM_mil_air_escort_efficiency_base }
			add_to_variable = { ROOT.var_COM_mil_air_intercept_efficiency = THIS.var_COM_mil_air_intercept_efficiency_base }
			add_to_variable = { ROOT.var_COM_mil_naval_coordination = THIS.var_COM_mil_naval_coordination_base }
		}
		#max_command_power
		if = {
			limit = {
				check_variable = {
					ROOT.var_COM_mil_max_command_power > COM_mil_max_command_power_max_array^temp_COM_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_COM_mil_max_command_power = COM_mil_max_command_power_max_array^temp_COM_mil_access_system_highest_idx }
		}
		#army_org_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_COM_mil_army_org_factor > COM_mil_army_org_factor_max_array^temp_COM_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_COM_mil_army_org_factor = COM_mil_army_org_factor_max_array^temp_COM_mil_access_system_highest_idx }
		}
		#planning_speed
		if = {
			limit = {
				check_variable = {
					ROOT.var_COM_mil_planning_speed > COM_mil_planning_speed_max_array^temp_COM_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_COM_mil_planning_speed = COM_mil_planning_speed_max_array^temp_COM_mil_access_system_highest_idx }
		}
		#air_escort_efficiency
		if = {
			limit = {
				check_variable = {
					ROOT.var_COM_mil_air_escort_efficiency > COM_mil_air_escort_efficiency_max_array^temp_COM_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_COM_mil_air_escort_efficiency = COM_mil_air_escort_efficiency_max_array^temp_COM_mil_access_system_highest_idx }
		}
		#air_intercept_efficiency
		if = {
			limit = {
				check_variable = {
					ROOT.var_COM_mil_air_intercept_efficiency > COM_mil_air_intercept_efficiency_max_array^temp_COM_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_COM_mil_air_intercept_efficiency = COM_mil_air_intercept_efficiency_max_array^temp_COM_mil_access_system_highest_idx }
		}
		#naval_coordination
		if = {
			limit = {
				check_variable = {
					ROOT.var_COM_mil_naval_coordination > COM_mil_naval_coordination_max_array^temp_COM_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_COM_mil_naval_coordination = COM_mil_naval_coordination_max_array^temp_COM_mil_access_system_highest_idx }
		}
	}
}
add_access_COM_civ_vars = {
	set_variable = { temp_COM_civ_access_system_highest_idx = 0 }
	set_variable = { var_COM_civ_political_power_factor = var_COM_civ_political_power_factor_base }
	set_variable = { var_COM_civ_decryption_factor = var_COM_civ_decryption_factor_base }
	set_variable = { var_COM_civ_encryption_factor = var_COM_civ_encryption_factor_base }
	set_variable = { var_COM_civ_intel_network_gain_factor = var_COM_civ_intel_network_gain_factor_base }
	set_variable = { var_COM_civ_operation_outcome = var_COM_civ_operation_outcome_base }
	for_each_loop = {
		array = COM_civ_access_system_idx_array
		if = {
			limit = {
				check_variable = {
					COM_civ_access_system_idx_array^i > temp_COM_civ_access_system_highest_idx
				}
			}
			set_variable = { temp_COM_civ_access_system_highest_idx = COM_civ_access_system_idx_array^i }
		}
	}
	for_each_scope_loop = {
		array = COM_civ_access_array
		if = {
			limit = {
				NOT = {
					check_variable = {
						ROOT.var_COM_civ_system_idx > THIS.var_COM_civ_system_idx
					}
				}
			}
			add_to_variable = { ROOT.var_COM_civ_political_power_factor = THIS.var_COM_civ_political_power_factor_base }
			add_to_variable = { ROOT.var_COM_civ_decryption_factor = THIS.var_COM_civ_decryption_factor_base }
			add_to_variable = { ROOT.var_COM_civ_encryption_factor = THIS.var_COM_civ_encryption_factor_base }
			add_to_variable = { ROOT.var_COM_civ_intel_network_gain_factor = THIS.var_COM_civ_intel_network_gain_factor_base }
			add_to_variable = { ROOT.var_COM_civ_operation_outcome = THIS.var_COM_civ_operation_outcome_base }
		}
		#political_power_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_COM_civ_political_power_factor > COM_civ_political_power_factor_max_array^temp_COM_civ_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_COM_civ_political_power_factor = COM_civ_political_power_factor_max_array^temp_COM_civ_access_system_highest_idx }
		}
		#decryption_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_COM_civ_decryption_factor > COM_civ_decryption_factor_max_array^temp_COM_civ_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_COM_civ_decryption_factor = COM_civ_decryption_factor_max_array^temp_COM_civ_access_system_highest_idx }
		}
		#encryption_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_COM_civ_encryption_factor > COM_civ_encryption_factor_max_array^temp_COM_civ_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_COM_civ_encryption_factor = COM_civ_encryption_factor_max_array^temp_COM_civ_access_system_highest_idx }
		}
		#intel_network_gain_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_COM_civ_intel_network_gain_factor > COM_civ_intel_network_gain_factor_max_array^temp_COM_civ_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_COM_civ_intel_network_gain_factor = COM_civ_intel_network_gain_factor_max_array^temp_COM_civ_access_system_highest_idx }
		}
		#operation_outcome
		if = {
			limit = {
				check_variable = {
					ROOT.var_COM_civ_operation_outcome > COM_civ_operation_outcome_max_array^temp_COM_civ_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_COM_civ_operation_outcome = COM_civ_operation_outcome_max_array^temp_COM_civ_access_system_highest_idx }
		}
	}
}
add_access_SPY_mil_vars = {
	set_variable = { temp_SPY_mil_access_system_highest_idx = 0 }
	set_variable = { var_SPY_mil_max_planning_factor = var_SPY_mil_max_planning_factor_base }
	set_variable = { var_SPY_mil_recon_factor = var_SPY_mil_recon_factor_base }
	set_variable = { var_SPY_mil_air_weather_penalty = var_SPY_mil_air_weather_penalty_base }
	set_variable = { var_SPY_mil_spotting_chance = var_SPY_mil_spotting_chance_base }
	set_variable = { var_SPY_mil_convoy_raiding_efficiency_factor = var_SPY_mil_convoy_raiding_efficiency_factor_base }
	set_variable = { var_SPY_mil_convoy_escort_efficiency = var_SPY_mil_convoy_escort_efficiency_base }
	for_each_loop = {
		array = SPY_mil_access_system_idx_array
		if = {
			limit = {
				check_variable = {
					SPY_mil_access_system_idx_array^i > temp_SPY_mil_access_system_highest_idx
				}
			}
			set_variable = { temp_SPY_mil_access_system_highest_idx = SPY_mil_access_system_idx_array^i }
		}
	}
	for_each_scope_loop = {
		array = SPY_mil_access_array
		if = {
			limit = {
				NOT = {
					check_variable = {
						ROOT.var_SPY_mil_system_idx > THIS.var_SPY_mil_system_idx
					}
				}
			}
			add_to_variable = { ROOT.var_SPY_mil_max_planning_factor = THIS.var_SPY_mil_max_planning_factor_base }
			add_to_variable = { ROOT.var_SPY_mil_recon_factor = THIS.var_SPY_mil_recon_factor_base }
			add_to_variable = { ROOT.var_SPY_mil_air_weather_penalty = THIS.var_SPY_mil_air_weather_penalty_base }
			add_to_variable = { ROOT.var_SPY_mil_spotting_chance = THIS.var_SPY_mil_spotting_chance_base }
			add_to_variable = { ROOT.var_SPY_mil_convoy_raiding_efficiency_factor = THIS.var_SPY_mil_convoy_raiding_efficiency_factor_base }
			add_to_variable = { ROOT.var_SPY_mil_convoy_escort_efficiency = THIS.var_SPY_mil_convoy_escort_efficiency_base }
		}
		#max_planning_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_SPY_mil_max_planning_factor > SPY_mil_max_planning_factor_max_array^temp_SPY_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_SPY_mil_max_planning_factor = SPY_mil_max_planning_factor_max_array^temp_SPY_mil_access_system_highest_idx }
		}
		#recon_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_SPY_mil_recon_factor > SPY_mil_recon_factor_max_array^temp_SPY_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_SPY_mil_recon_factor = SPY_mil_recon_factor_max_array^temp_SPY_mil_access_system_highest_idx }
		}
		#air_weather_penalty
		if = {
			limit = {
				check_variable = {
					ROOT.var_SPY_mil_air_weather_penalty > SPY_mil_air_weather_penalty_max_array^temp_SPY_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_SPY_mil_air_weather_penalty = SPY_mil_air_weather_penalty_max_array^temp_SPY_mil_access_system_highest_idx }
		}
		#spotting_chance
		if = {
			limit = {
				check_variable = {
					ROOT.var_SPY_mil_spotting_chance > SPY_mil_spotting_chance_max_array^temp_SPY_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_SPY_mil_spotting_chance = SPY_mil_spotting_chance_max_array^temp_SPY_mil_access_system_highest_idx }
		}
		#convoy_raiding_efficiency_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_SPY_mil_convoy_raiding_efficiency_factor > SPY_mil_convoy_raiding_efficiency_factor_max_array^temp_SPY_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_SPY_mil_convoy_raiding_efficiency_factor = SPY_mil_convoy_raiding_efficiency_factor_max_array^temp_SPY_mil_access_system_highest_idx }
		}
		#convoy_escort_efficiency
		if = {
			limit = {
				check_variable = {
					ROOT.var_SPY_mil_convoy_escort_efficiency > SPY_mil_convoy_escort_efficiency_max_array^temp_SPY_mil_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_SPY_mil_convoy_escort_efficiency = SPY_mil_convoy_escort_efficiency_max_array^temp_SPY_mil_access_system_highest_idx }
		}
	}
}
add_access_SPY_civ_vars = {
	set_variable = { temp_SPY_civ_access_system_highest_idx = 0 }
	set_variable = { var_SPY_civ_research_speed_factor = var_SPY_civ_research_speed_factor_base }
	set_variable = { var_SPY_civ_civilian_intel_factor = var_SPY_civ_civilian_intel_factor_base }
	set_variable = { var_SPY_civ_army_intel_factor = var_SPY_civ_army_intel_factor_base }
	set_variable = { var_SPY_civ_navy_intel_factor = var_SPY_civ_navy_intel_factor_base }
	set_variable = { var_SPY_civ_airforce_intel_factor = var_SPY_civ_airforce_intel_factor_base }
	set_variable = { var_SPY_civ_root_out_resistance_effectiveness_factor = var_SPY_civ_root_out_resistance_effectiveness_factor_base }
	for_each_loop = {
		array = SPY_civ_access_system_idx_array
		if = {
			limit = {
				check_variable = {
					SPY_civ_access_system_idx_array^i > temp_SPY_civ_access_system_highest_idx
				}
			}
			set_variable = { temp_SPY_civ_access_system_highest_idx = SPY_civ_access_system_idx_array^i }
		}
	}
	for_each_scope_loop = {
		array = SPY_civ_access_array
		if = {
			limit = {
				NOT = {
					check_variable = {
						ROOT.var_SPY_civ_system_idx > THIS.var_SPY_civ_system_idx
					}
				}
			}
			add_to_variable = { ROOT.var_SPY_civ_research_speed_factor = THIS.var_SPY_civ_research_speed_factor_base }
			add_to_variable = { ROOT.var_SPY_civ_civilian_intel_factor = THIS.var_SPY_civ_civilian_intel_factor_base }
			add_to_variable = { ROOT.var_SPY_civ_army_intel_factor = THIS.var_SPY_civ_army_intel_factor_base }
			add_to_variable = { ROOT.var_SPY_civ_navy_intel_factor = THIS.var_SPY_civ_navy_intel_factor_base }
			add_to_variable = { ROOT.var_SPY_civ_airforce_intel_factor = THIS.var_SPY_civ_airforce_intel_factor_base }
			add_to_variable = { ROOT.var_SPY_civ_root_out_resistance_effectiveness_factor = THIS.var_SPY_civ_root_out_resistance_effectiveness_factor_base }
		}
		#research_speed_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_SPY_civ_research_speed_factor > SPY_civ_research_speed_factor_max_array^temp_SPY_civ_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_SPY_civ_research_speed_factor = SPY_civ_research_speed_factor_max_array^temp_SPY_civ_access_system_highest_idx }
		}
		#civilian_intel_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_SPY_civ_civilian_intel_factor > SPY_civ_civilian_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_SPY_civ_civilian_intel_factor = SPY_civ_civilian_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx }
		}
		#army_intel_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_SPY_civ_army_intel_factor > SPY_civ_army_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_SPY_civ_army_intel_factor = SPY_civ_army_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx }
		}
		#navy_intel_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_SPY_civ_navy_intel_factor > SPY_civ_navy_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_SPY_civ_navy_intel_factor = SPY_civ_navy_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx }
		}
		#airforce_intel_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_SPY_civ_airforce_intel_factor > SPY_civ_airforce_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_SPY_civ_airforce_intel_factor = SPY_civ_airforce_intel_factor_max_array^temp_SPY_civ_access_system_highest_idx }
		}
		#root_out_resistance_effectiveness_factor
		if = {
			limit = {
				check_variable = {
					ROOT.var_SPY_civ_root_out_resistance_effectiveness_factor > SPY_civ_root_out_resistance_effectiveness_factor_max_array^temp_SPY_civ_access_system_highest_idx
				}
			}
			set_variable = { ROOT.var_SPY_civ_root_out_resistance_effectiveness_factor = SPY_civ_root_out_resistance_effectiveness_factor_max_array^temp_SPY_civ_access_system_highest_idx }
		}
	}
}

#### scripted effects for offer 
# default = PREV = target / bonus TAG
# ROOT = sending TAG / access TAG

add_offer_access_GNSS_mil_vars = {
	PREV = {
		set_variable = { temp_GNSS_mil_access_system_highest_idx = 0 }
		set_variable = { var_GNSS_mil_army_speed_factor = var_GNSS_mil_army_speed_factor_base }
		set_variable = { var_GNSS_mil_air_cas_efficiency = var_GNSS_mil_air_cas_efficiency_base }
		set_variable = { var_GNSS_mil_air_nav_efficiency = var_GNSS_mil_air_nav_efficiency_base }
		set_variable = { var_GNSS_mil_air_strategic_bomber_bombing_factor = var_GNSS_mil_air_strategic_bomber_bombing_factor_base }
		set_variable = { var_GNSS_mil_positioning = var_GNSS_mil_positioning_base }
		set_variable = { var_GNSS_mil_naval_hit_chance = var_GNSS_mil_naval_hit_chance_base }
		for_each_loop = {
			array = GNSS_mil_access_system_idx_array
			if = {
				limit = {
					check_variable = {
						GNSS_mil_access_system_idx_array^i > temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { temp_GNSS_mil_access_system_highest_idx = GNSS_mil_access_system_idx_array^i }
			}
		}
		for_each_scope_loop = {
			array = GNSS_mil_access_array
			if = {
				limit = {
					NOT = {
						check_variable = {
							var_GNSS_mil_system_idx > THIS.var_GNSS_mil_system_idx
						}
					}
				}
				add_to_variable = { PREV.var_GNSS_mil_army_speed_factor = THIS.var_GNSS_mil_army_speed_factor_base }
				add_to_variable = { PREV.var_GNSS_mil_air_cas_efficiency = THIS.var_GNSS_mil_air_cas_efficiency_base }
				add_to_variable = { PREV.var_GNSS_mil_air_nav_efficiency = THIS.var_GNSS_mil_air_nav_efficiency_base }
				add_to_variable = { PREV.var_GNSS_mil_air_strategic_bomber_bombing_factor = THIS.var_GNSS_mil_air_strategic_bomber_bombing_factor_base }
				add_to_variable = { PREV.var_GNSS_mil_positioning = THIS.var_GNSS_mil_positioning_base }
				add_to_variable = { PREV.var_GNSS_mil_naval_hit_chance = THIS.var_GNSS_mil_naval_hit_chance_base }
			}
			#army_speed_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_mil_army_speed_factor > GNSS_mil_army_speed_factor_max_array^PREV.temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_mil_army_speed_factor = GNSS_mil_army_speed_factor_max_array^PREV.temp_GNSS_mil_access_system_highest_idx }
			}
			#air_cas_efficiency
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_mil_air_cas_efficiency > GNSS_mil_air_cas_efficiency_max_array^PREV.temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_mil_air_cas_efficiency = GNSS_mil_air_cas_efficiency_max_array^PREV.temp_GNSS_mil_access_system_highest_idx }
			}
			#air_nav_efficiency
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_mil_air_nav_efficiency > GNSS_mil_air_nav_efficiency_max_array^PREV.temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_mil_air_nav_efficiency = GNSS_mil_air_nav_efficiency_max_array^PREV.temp_GNSS_mil_access_system_highest_idx }
			}
			#air_strategic_bomber_bombing_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_mil_air_strategic_bomber_bombing_factor > GNSS_mil_air_strategic_bomber_bombing_factor_max_array^PREV.temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_mil_air_strategic_bomber_bombing_factor = GNSS_mil_air_strategic_bomber_bombing_factor_max_array^PREV.temp_GNSS_mil_access_system_highest_idx }
			}
			#positioning
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_mil_positioning > GNSS_mil_positioning_max_array^PREV.temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_mil_positioning = GNSS_mil_army_speed_factor_max_array^PREV.temp_GNSS_mil_access_system_highest_idx }
			}
			#naval_hit_chance
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_mil_naval_hit_chance > GNSS_mil_naval_hit_chance_max_array^PREV.temp_GNSS_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_mil_naval_hit_chance = GNSS_mil_naval_hit_chance_max_array^PREV.temp_GNSS_mil_access_system_highest_idx }
			}
		}
	}
}
add_offer_access_GNSS_civ_vars = {
	PREV = {
		set_variable = { temp_GNSS_civ_access_system_highest_idx = 0 }
		set_variable = { var_GNSS_civ_production_speed_buildings_factor = var_GNSS_civ_production_speed_buildings_factor_base }
		set_variable = { var_GNSS_civ_production_speed_infrastructure_factor = var_GNSS_civ_production_speed_infrastructure_factor_base }
		set_variable = { var_GNSS_civ_local_resources_factor = var_GNSS_civ_local_resources_factor_base }
		for_each_loop = {
			array = GNSS_civ_access_system_idx_array
			if = {
				limit = {
					check_variable = {
						GNSS_civ_access_system_idx_array^i > temp_GNSS_civ_access_system_highest_idx
					}
				}
				set_variable = { temp_GNSS_civ_access_system_highest_idx = GNSS_civ_access_system_idx_array^i }
			}
		}
		for_each_scope_loop = {
			array = GNSS_civ_access_array
			if = {
				limit = {
					NOT = {
						check_variable = {
							var_GNSS_civ_system_idx > THIS.var_GNSS_civ_system_idx
						}
					}
				}
				add_to_variable = { PREV.var_GNSS_civ_production_speed_buildings_factor = THIS.var_GNSS_civ_production_speed_buildings_factor_base }
				add_to_variable = { PREV.var_GNSS_civ_production_speed_infrastructure_factor = THIS.var_GNSS_civ_production_speed_infrastructure_factor_base }
				add_to_variable = { PREV.var_GNSS_civ_local_resources_factor = THIS.var_GNSS_civ_local_resources_factor_base }

			}
			#production_speed_buildings_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_civ_production_speed_buildings_factor > GNSS_civ_production_speed_buildings_factor_max_array^PREV.temp_GNSS_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_civ_production_speed_buildings_factor = GNSS_civ_production_speed_buildings_factor_max_array^PREV.temp_GNSS_civ_access_system_highest_idx }
			}
			#production_speed_infrastructure_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_civ_production_speed_infrastructure_factor > GNSS_civ_production_speed_infrastructure_factor_max_array^PREV.temp_GNSS_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_civ_production_speed_infrastructure_factor = GNSS_civ_production_speed_infrastructure_factor_max_array^PREV.temp_GNSS_civ_access_system_highest_idx }
			}
			#local_resources_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_GNSS_civ_local_resources_factor > GNSS_civ_local_resources_factor_max_array^PREV.temp_GNSS_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_GNSS_civ_local_resources_factor = GNSS_civ_local_resources_factor_max_array^PREV.temp_GNSS_civ_access_system_highest_idx }
			}
		}
	}
}
add_offer_access_COM_mil_vars = {
	PREV = {
		set_variable = { temp_COM_mil_access_system_highest_idx = 0 }
		set_variable = { var_COM_mil_max_command_power = var_COM_mil_max_command_power_base }
		set_variable = { var_COM_mil_army_org_factor = var_COM_mil_army_org_factor_base }
		set_variable = { var_COM_mil_planning_speed = var_COM_mil_planning_speed_base }
		set_variable = { var_COM_mil_air_escort_efficiency = var_COM_mil_air_escort_efficiency_base }
		set_variable = { var_COM_mil_air_intercept_efficiency = var_COM_mil_air_intercept_efficiency_base }
		set_variable = { var_COM_mil_naval_coordination = var_COM_mil_naval_coordination_base }
		for_each_loop = {
			array = COM_mil_access_system_idx_array
			if = {
				limit = {
					check_variable = {
						COM_mil_access_system_idx_array^i > temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { temp_COM_mil_access_system_highest_idx = COM_mil_access_system_idx_array^i }
			}
		}
		for_each_scope_loop = {
			array = COM_mil_access_array
			if = {
				limit = {
					NOT = {
						check_variable = {
							var_COM_mil_system_idx > THIS.var_COM_mil_system_idx
						}
					}
				}
				add_to_variable = { PREV.var_COM_mil_max_command_power = THIS.var_COM_mil_max_command_power_base }
				add_to_variable = { PREV.var_COM_mil_army_org_factor = THIS.var_COM_mil_army_org_factor_base }
				add_to_variable = { PREV.var_COM_mil_planning_speed = THIS.var_COM_mil_planning_speed_base }
				add_to_variable = { PREV.var_COM_mil_air_escort_efficiency = THIS.var_COM_mil_air_escort_efficiency_base }
				add_to_variable = { PREV.var_COM_mil_air_intercept_efficiency = THIS.var_COM_mil_air_intercept_efficiency_base }
				add_to_variable = { PREV.var_COM_mil_naval_coordination = THIS.var_COM_mil_naval_coordination_base }
			}
			#max_command_power
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_mil_max_command_power > COM_mil_max_command_power_max_array^PREV.temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_mil_max_command_power = COM_mil_max_command_power_max_array^PREV.temp_COM_mil_access_system_highest_idx }
			}
			#army_org_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_mil_army_org_factor > COM_mil_army_org_factor_max_array^PREV.temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_mil_army_org_factor = COM_mil_army_org_factor_max_array^PREV.temp_COM_mil_access_system_highest_idx }
			}
			#planning_speed
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_mil_planning_speed > COM_mil_planning_speed_max_array^PREV.temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_mil_planning_speed = COM_mil_planning_speed_max_array^PREV.temp_COM_mil_access_system_highest_idx }
			}
			#air_escort_efficiency
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_mil_air_escort_efficiency > COM_mil_air_escort_efficiency_max_array^PREV.temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_mil_air_escort_efficiency = COM_mil_air_escort_efficiency_max_array^PREV.temp_COM_mil_access_system_highest_idx }
			}
			#air_intercept_efficiency
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_mil_air_intercept_efficiency > COM_mil_air_intercept_efficiency_max_array^PREV.temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_mil_air_intercept_efficiency = COM_mil_air_intercept_efficiency_max_array^PREV.temp_COM_mil_access_system_highest_idx }
			}
			#naval_coordination
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_mil_naval_coordination > COM_mil_naval_coordination_max_array^PREV.temp_COM_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_mil_naval_coordination = COM_mil_naval_coordination_max_array^PREV.temp_COM_mil_access_system_highest_idx }
			}
		}
	}
}
add_offer_access_COM_civ_vars = {
	PREV = {
		set_variable = { temp_COM_civ_access_system_highest_idx = 0 }
		set_variable = { var_COM_civ_political_power_factor = var_COM_civ_political_power_factor_base }
		set_variable = { var_COM_civ_decryption_factor = var_COM_civ_decryption_factor_base }
		set_variable = { var_COM_civ_encryption_factor = var_COM_civ_encryption_factor_base }
		set_variable = { var_COM_civ_intel_network_gain_factor = var_COM_civ_intel_network_gain_factor_base }
		set_variable = { var_COM_civ_operation_outcome = var_COM_civ_operation_outcome_base }
		for_each_loop = {
			array = COM_civ_access_system_idx_array
			if = {
				limit = {
					check_variable = {
						COM_civ_access_system_idx_array^i > temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { temp_COM_civ_access_system_highest_idx = COM_civ_access_system_idx_array^i }
			}
		}
		for_each_scope_loop = {
			array = COM_civ_access_array
			if = {
				limit = {
					NOT = {
						check_variable = {
							var_COM_civ_system_idx > THIS.var_COM_civ_system_idx
						}
					}
				}
				add_to_variable = { PREV.var_COM_civ_political_power_factor = THIS.var_COM_civ_political_power_factor_base }
				add_to_variable = { PREV.var_COM_civ_decryption_factor = THIS.var_COM_civ_decryption_factor_base }
				add_to_variable = { PREV.var_COM_civ_encryption_factor = THIS.var_COM_civ_encryption_factor_base }
				add_to_variable = { PREV.var_COM_civ_intel_network_gain_factor = THIS.var_COM_civ_intel_network_gain_factor_base }
				add_to_variable = { PREV.var_COM_civ_operation_outcome = THIS.var_COM_civ_operation_outcome_base }
			}
			#political_power_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_civ_political_power_factor > COM_civ_political_power_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_civ_political_power_factor = COM_civ_political_power_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx }
			}
			#decryption_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_civ_decryption_factor > COM_civ_decryption_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_civ_decryption_factor = COM_civ_decryption_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx }
			}
			#encryption_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_civ_encryption_factor > COM_civ_encryption_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_civ_encryption_factor = COM_civ_encryption_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx }
			}
			#intel_network_gain_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_civ_intel_network_gain_factor > COM_civ_intel_network_gain_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_civ_intel_network_gain_factor = COM_civ_intel_network_gain_factor_max_array^PREV.temp_COM_civ_access_system_highest_idx }
			}
			#operation_outcome
			if = {
				limit = {
					check_variable = {
						PREV.var_COM_civ_operation_outcome > COM_civ_operation_outcome_max_array^PREV.temp_COM_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_COM_civ_operation_outcome = COM_civ_operation_outcome_max_array^PREV.temp_COM_civ_access_system_highest_idx }
			}
		}
	}
}
add_offer_access_SPY_mil_vars = {
	PREV = {
		set_variable = { temp_SPY_mil_access_system_highest_idx = 0 }
		set_variable = { var_SPY_mil_max_planning_factor = var_SPY_mil_max_planning_factor_base }
		set_variable = { var_SPY_mil_recon_factor = var_SPY_mil_recon_factor_base }
		set_variable = { var_SPY_mil_air_weather_penalty = var_SPY_mil_air_weather_penalty_base }
		set_variable = { var_SPY_mil_spotting_chance = var_SPY_mil_spotting_chance_base }
		set_variable = { var_SPY_mil_convoy_raiding_efficiency_factor = var_SPY_mil_convoy_raiding_efficiency_factor_base }
		set_variable = { var_SPY_mil_convoy_escort_efficiency = var_SPY_mil_convoy_escort_efficiency_base }
		for_each_loop = {
			array = SPY_mil_access_system_idx_array
			if = {
				limit = {
					check_variable = {
						SPY_mil_access_system_idx_array^i > temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { temp_SPY_mil_access_system_highest_idx = SPY_mil_access_system_idx_array^i }
			}
		}
		for_each_scope_loop = {
			array = SPY_mil_access_array
			if = {
				limit = {
					NOT = {
						check_variable = {
							var_SPY_mil_system_idx > THIS.var_SPY_mil_system_idx
						}
					}
				}
				add_to_variable = { PREV.var_SPY_mil_max_planning_factor = THIS.var_SPY_mil_max_planning_factor_base }
				add_to_variable = { PREV.var_SPY_mil_recon_factor = THIS.var_SPY_mil_recon_factor_base }
				add_to_variable = { PREV.var_SPY_mil_air_weather_penalty = THIS.var_SPY_mil_air_weather_penalty_base }
				add_to_variable = { PREV.var_SPY_mil_spotting_chance = THIS.var_SPY_mil_spotting_chance_base }
				add_to_variable = { PREV.var_SPY_mil_convoy_raiding_efficiency_factor = THIS.var_SPY_mil_convoy_raiding_efficiency_factor_base }
				add_to_variable = { PREV.var_SPY_mil_convoy_escort_efficiency = THIS.var_SPY_mil_convoy_escort_efficiency_base }
			}
			#max_planning_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_mil_max_planning_factor > SPY_mil_max_planning_factor_max_array^PREV.temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_mil_max_planning_factor = SPY_mil_max_planning_factor_max_array^PREV.temp_SPY_mil_access_system_highest_idx }
			}
			#recon_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_mil_recon_factor > SPY_mil_recon_factor_max_array^PREV.temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_mil_recon_factor = SPY_mil_recon_factor_max_array^PREV.temp_SPY_mil_access_system_highest_idx }
			}
			#air_weather_penalty
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_mil_air_weather_penalty > SPY_mil_air_weather_penalty_max_array^PREV.temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_mil_air_weather_penalty = SPY_mil_air_weather_penalty_max_array^PREV.temp_SPY_mil_access_system_highest_idx }
			}
			#spotting_chance
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_mil_spotting_chance > SPY_mil_spotting_chance_max_array^PREV.temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_mil_spotting_chance = SPY_mil_spotting_chance_max_array^PREV.temp_SPY_mil_access_system_highest_idx }
			}
			#convoy_raiding_efficiency_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_mil_convoy_raiding_efficiency_factor > SPY_mil_convoy_raiding_efficiency_factor_max_array^PREV.temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_mil_convoy_raiding_efficiency_factor = SPY_mil_convoy_raiding_efficiency_factor_max_array^PREV.temp_SPY_mil_access_system_highest_idx }
			}
			#convoy_escort_efficiency
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_mil_convoy_escort_efficiency > SPY_mil_convoy_escort_efficiency_max_array^PREV.temp_SPY_mil_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_mil_convoy_escort_efficiency = SPY_mil_convoy_escort_efficiency_max_array^PREV.temp_SPY_mil_access_system_highest_idx }
			}
		}
	}
}
add_offer_access_SPY_civ_vars = {
	PREV = {
		set_variable = { temp_SPY_civ_access_system_highest_idx = 0 }
		set_variable = { var_SPY_civ_research_speed_factor = var_SPY_civ_research_speed_factor_base }
		set_variable = { var_SPY_civ_civilian_intel_factor = var_SPY_civ_civilian_intel_factor_base }
		set_variable = { var_SPY_civ_army_intel_factor = var_SPY_civ_army_intel_factor_base }
		set_variable = { var_SPY_civ_navy_intel_factor = var_SPY_civ_navy_intel_factor_base }
		set_variable = { var_SPY_civ_airforce_intel_factor = var_SPY_civ_airforce_intel_factor_base }
		set_variable = { var_SPY_civ_root_out_resistance_effectiveness_factor = var_SPY_civ_root_out_resistance_effectiveness_factor_base }
		for_each_loop = {
			array = SPY_civ_access_system_idx_array
			if = {
				limit = {
					check_variable = {
						SPY_civ_access_system_idx_array^i > temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { temp_SPY_civ_access_system_highest_idx = SPY_civ_access_system_idx_array^i }
			}
		}
		for_each_scope_loop = {
			array = SPY_civ_access_array
			if = {
				limit = {
					NOT = {
						check_variable = {
							var_SPY_civ_system_idx > THIS.var_SPY_civ_system_idx
						}
					}
				}
				add_to_variable = { PREV.var_SPY_civ_research_speed_factor = THIS.var_SPY_civ_research_speed_factor_base }
				add_to_variable = { PREV.var_SPY_civ_civilian_intel_factor = THIS.var_SPY_civ_civilian_intel_factor_base }
				add_to_variable = { PREV.var_SPY_civ_army_intel_factor = THIS.var_SPY_civ_army_intel_factor_base }
				add_to_variable = { PREV.var_SPY_civ_navy_intel_factor = THIS.var_SPY_civ_navy_intel_factor_base }
				add_to_variable = { PREV.var_SPY_civ_airforce_intel_factor = THIS.var_SPY_civ_airforce_intel_factor_base }
				add_to_variable = { PREV.var_SPY_civ_root_out_resistance_effectiveness_factor = THIS.var_SPY_civ_root_out_resistance_effectiveness_factor_base }
			}
			#research_speed_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_civ_research_speed_factor > SPY_civ_research_speed_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_civ_research_speed_factor = SPY_civ_research_speed_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx }
			}
			#civilian_intel_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_civ_civilian_intel_factor > SPY_civ_civilian_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_civ_civilian_intel_factor = SPY_civ_civilian_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx }
			}
			#army_intel_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_civ_army_intel_factor > SPY_civ_army_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_civ_army_intel_factor = SPY_civ_army_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx }
			}
			#navy_intel_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_civ_navy_intel_factor > SPY_civ_navy_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_civ_navy_intel_factor = SPY_civ_navy_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx }
			}
			#airforce_intel_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_civ_airforce_intel_factor > SPY_civ_airforce_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_civ_airforce_intel_factor = SPY_civ_airforce_intel_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx }
			}
			#root_out_resistance_effectiveness_factor
			if = {
				limit = {
					check_variable = {
						PREV.var_SPY_civ_root_out_resistance_effectiveness_factor > SPY_civ_root_out_resistance_effectiveness_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx
					}
				}
				set_variable = { PREV.var_SPY_civ_root_out_resistance_effectiveness_factor = SPY_civ_root_out_resistance_effectiveness_factor_max_array^PREV.temp_SPY_civ_access_system_highest_idx }
			}
		}
	}
}

###################################
### MD_satellite_orbit_view_gui ###
###################################

add_new_satellite_to_orbit = {
	if = {
		limit = {
			OR = {
				check_variable = { var_orbit = 3 }
				check_variable = { var_orbit = 0 }
			}
		}
		if = {
			limit = {
				any_of = {
					array = sat_3_array
					check_variable = { v = 0 }
				}
				check_variable = { sat_3_array^num > 335 }
			}
			set_variable = { sat_3_array^i = 1 }
		}
		else_if = {
			limit = {
				all_of = {
					array = sat_3_array
					check_variable = { v > 0 }
				}
				check_variable = { sat_3_array^num > 335 }
			}
			add_new_satellite_to_orbit_6 = yes
		}
		else = {
			add_new_satellite_to_orbit_3 = yes
			add_to_variable = { var_sat_block_3 = 1 }
		}
		set_variable = { var_orbit = 2 }
	}
	else_if = {
		limit = {
			check_variable = { var_orbit = 2 }
		}
		if = {
			limit = {
				any_of = {
					array = sat_2_array
					check_variable = { v = 0 }
				}
				check_variable = { sat_2_array^num > 399 }
			}
			set_variable = { sat_2_array^i = 1 }
		}		
		else_if = {
			limit = {
				all_of = {
					array = sat_2_array
					check_variable = { v > 0 }
				}
				check_variable = { sat_2_array^num > 399 }
			}
			add_new_satellite_to_orbit_6 = yes
		}
		else = {
			add_new_satellite_to_orbit_2 = yes
			add_to_variable = { var_sat_block_2 = 1 }
		}
		set_variable = { var_orbit = 4 }
	}
	else_if = {
		limit = {
			check_variable = { var_orbit = 4 }
		}
		if = {
			limit = {
				any_of = {
					array = sat_4_array
					check_variable = { v = 0 }
				}
				check_variable = { sat_4_array^num > 399 }
			}
			set_variable = { sat_4_array^i = 1 }
		}
		else_if = {
			limit = {
				all_of = {
					array = sat_4_array
					check_variable = { v > 0 }
				}
				check_variable = { sat_4_array^num > 399 }
			}
			add_new_satellite_to_orbit_6 = yes
		}
		else = {
			add_new_satellite_to_orbit_4 = yes
			add_to_variable = { var_sat_block_4 = 1 }
		}
		set_variable = { var_orbit = 1 }
	}
	else_if = {
		limit = {
			check_variable = { var_orbit = 1 }
		}
		if = {
			limit = {
				any_of = {
					array = sat_1_array
					check_variable = { v = 0 }
				}
				check_variable = { sat_1_array^num > 179 }
			}
			set_variable = { sat_1_array^i = 1 }
		}
		else_if = {
			limit = {
				all_of = {
					array = sat_1_array
					check_variable = { v > 0 }
				}
				check_variable = { sat_1_array^num > 179 }
			}
			add_new_satellite_to_orbit_6 = yes
		}
		else = {
			add_new_satellite_to_orbit_1 = yes
			add_to_variable = { var_sat_block_1 = 1 }
		}
		set_variable = { var_orbit = 5 }
	}
	else_if = {
		limit = {
			check_variable = { var_orbit = 5 }
		}
		if = {
			limit = {
				any_of = {
					array = sat_5_array
					check_variable = { v = 0 }
				}
				check_variable = { sat_5_array^num > 179 }
			}
			set_variable = { sat_5_array^i = 1 }
		}
		else_if = {
			limit = {
				all_of = {
					array = sat_5_array
					check_variable = { v > 0 }
				}
				check_variable = { sat_5_array^num > 179 }
			}
			add_new_satellite_to_orbit_6 = yes
		}
		else = {
			add_new_satellite_to_orbit_5 = yes
			add_to_variable = { var_sat_block_5 = 1 }
		}
		set_variable = { var_orbit = 3 }
	}
}

add_new_satellite_to_orbit_1 = {
	add_to_variable = { var_sat_in_orbit = 1 }
	if = {
		limit = {
			check_variable = {
				add_minus_X1 < add_plus_X1
			}
		}
		add_to_variable = { add_minus_X1 = 1 }
		set_temp_variable = { temp1 = 90 }
		subtract_from_temp_variable = { temp1 = add_minus_X1 }
	}
	else = {
		set_temp_variable = { temp1 = 90 }
		add_to_temp_variable = { temp1 = add_plus_X1 }
		add_to_variable = { add_plus_X1 = 1 }
	}
	set_variable = { sat_1_array^temp1 = 1 }
}
add_new_satellite_to_orbit_2 = {
	add_to_variable = { var_sat_in_orbit = 1 }
	if = {
		limit = {
			check_variable = {
				add_minus_X2 < add_plus_X2
			}
		}
		add_to_variable = { add_minus_X2 = 1 }
		set_temp_variable = { temp2 = 180 }
		subtract_from_temp_variable = { temp2 = add_minus_X2 }
	}
	else = {
		set_temp_variable = { temp2 = 180 }
		add_to_temp_variable = { temp2 = add_plus_X2 }
		add_to_variable = { add_plus_X2 = 1 }
	}
	set_variable = { sat_2_array^temp2 = 1 }
}
add_new_satellite_to_orbit_3 = {
	add_to_variable = { var_sat_in_orbit = 1 }
	if = {
		limit = {
			check_variable = {
				add_minus_X3 < add_plus_X3
			}
		}
		add_to_variable = { add_minus_X3 = 1 }
		set_temp_variable = { temp3 = 147 }
		subtract_from_temp_variable = { temp3 = add_minus_X3 }
	}
	else = {
		set_temp_variable = { temp3 = 147 }
		add_to_temp_variable = { temp3 = add_plus_X3 }
		add_to_variable = { add_plus_X3= 1 }
	}
	set_variable = { sat_3_array^temp3 = 1 }
}
add_new_satellite_to_orbit_4 = {
	add_to_variable = { var_sat_in_orbit = 1 }
	if = {
		limit = {
			check_variable = {
				add_minus_X4 < add_plus_X4
			}
		}
		add_to_variable = { add_minus_X4 = 1 }
		set_temp_variable = { temp4 = 180 }
		subtract_from_temp_variable = { temp4 = add_minus_X4 }
	}
	else = {
		set_temp_variable = { temp4 = 180 }
		add_to_temp_variable = { temp4 = add_plus_X4 }
		add_to_variable = { add_plus_X4 = 1 }
	}
	set_variable = { sat_4_array^temp4 = 1 }
}
add_new_satellite_to_orbit_5 = {
	add_to_variable = { var_sat_in_orbit = 1 }
	if = {
		limit = {
			check_variable = {
				add_minus_X5 < add_plus_X5
			}
		}
		add_to_variable = { add_minus_X5 = 1 }
		set_temp_variable = { temp5 = 90 }
		subtract_from_temp_variable = { temp5 = add_minus_X5 }
	}
	else = {
		set_temp_variable = { temp5 = 90 }
		add_to_temp_variable = { temp5 = add_plus_X5 }
		add_to_variable = { add_plus_X5 = 1 }
	}
	set_variable = { sat_5_array^temp5 = 1 }
}

add_new_satellite_to_orbit_6 = {
	if = {
		limit = {
			all_of = {
				array = sat_6_array
				check_variable = { v > 0 }
			}
			check_variable = { sat_6_array^num > 1503 }
		}
		ROOT = { news_event = { id = satellites.8 } }
	}
	else = {
		add_to_variable = { var_sat_in_orbit = 1 }
		add_to_array = { sat_6_array = 1 }
	}
}



###########################
### for on daily effect ###
###########################

missile_on_daily = {
	for_each_loop = {
		array = missile_target_point_array
		if = {
			limit = {
				check_variable = { missile_duration_array^i > 0 }
			}

			log = "[GetDateText]: [Root.GetName]: missile_on_daily: Missile Target: [?missile_target_point_array^i.GetName] ID = [?missile_target_point_array^i.GetID]"
			set_variable = { var_salvo = missile_salvo_array^i }

			var:ROOT.missile_target_controller_array^i = {
				### sea
				set_variable = { ROOT.var_intercept_capacity_boost_sea = 0 }
				set_variable = { ROOT.var_intercept_capacity_midcourse_sea = 0 }
				set_variable = { ROOT.var_intercept_capacity_terminal_sea = 0 }
				### land
				set_variable = { ROOT.var_intercept_capacity_boost_land = 0 }
				set_variable = { ROOT.var_intercept_capacity_midcourse_land = 0 }
				set_variable = { ROOT.var_intercept_capacity_terminal_land = 0 }

				set_seabased_missile_defense_cap = yes
				set_landbased_missile_defense_cap = yes

				### sea
				set_variable = { ROOT.var_intercept_chance_boost_sea = var_SAM_intercept_chance_sea }
				set_variable = { ROOT.var_intercept_chance_midcourse_sea = var_ABM_intercept_chance_sea }
				set_variable = { ROOT.var_intercept_chance_terminal_sea = var_SAM_intercept_chance_sea }
				### land
				set_variable = { ROOT.var_intercept_chance_boost_land = var_SAM_intercept_chance_land }
				set_variable = { ROOT.var_intercept_chance_midcourse_land = var_ABM_intercept_chance_land }
				set_variable = { ROOT.var_intercept_chance_terminal_land = var_SAM_intercept_chance_land }
			}

			set_missile_model = yes ### add modify intercept chance
			set_warhead = yes

			meta_effect = {
				text = {
					subtract_from_variable = { var_inventory_[missile_type]_[missile_tech] = var_salvo }
				}
				missile_type = "[?missile_type_array^i]"
				missile_tech = "[?missile_tech_array^i]"
			}
			subtract_from_variable = { missile_duration_array^i = 1 }

			var:ROOT.missile_target_controller_array^i = {
				ROOT = {
					### boost phase vs defense ###
					boost_phase_defense_sea = yes
					boost_phase_defense_land = yes
					### midcourse phase vs defense ###
					if = {
						limit = {
							OR = {
								#ICBM
								AND = {
									check_variable = { missile_type_array^i > 10 }
									check_variable = { missile_type_array^i < 20 }
								}
								#IRBM
								AND = {
									check_variable = { missile_type_array^i > 20 }
									check_variable = { missile_type_array^i < 30 }
								}
								#SLBM
								AND = {
									check_variable = { missile_type_array^i > 30 }
									check_variable = { missile_type_array^i < 40 }
								}
							}
						}
						midcourse_phase_defense_sea = yes
						midcourse_phase_defense_land = yes
					}
					### terminal phase vs defense ###
					terminal_phase_defense_sea = yes
					terminal_phase_defense_land = yes
				}
			}
			add_to_array = { array = SAM_consumption_sea_array value = SAM_consumption_sea index = i }
			add_to_array = { array = SAM_consumption_land_array value = SAM_consumption_land index = i }
			add_to_array = { array = ABM_consumption_sea_array value = ABM_consumption_sea index = i }
			add_to_array = { array = ABM_consumption_land_array value = ABM_consumption_land index = i }

			clear_variable = SAM_consumption_sea
			clear_variable = SAM_consumption_land
			clear_variable = ABM_consumption_sea
			clear_variable = ABM_consumption_land

			set_missile_damage = yes
			set_missile_warhead_effects = yes
		}
	}
}